getgenv().UseUi = true

getgenv().AUNIVERSALTIME = true
getgenv().AOTREVOLUTION = true
getgenv().MO = true
getgenv().FISCH = true
getgenv().JujutsuInfinite = true
getgenv().SwordBloxOnlineRebirth = true

if not game:IsLoaded() then
    game.Loaded:Wait()
end

while not cloneref(game:GetService("Workspace")) do
    task.wait()
end

game = game
workspace = cloneref(game:GetService("Workspace"))
players = cloneref(game:GetService("Players"))

player = players.LocalPlayer

while not player do task.wait()
    player = players.LocalPlayer
end

vim = cloneref(game:GetService("VirtualInputManager"))

while not vim do task.wait()
    vim = cloneref(game:GetService("VirtualInputManager"))
end

VirtualUser = cloneref(game:GetService("VirtualUser"))
RunService = cloneref(game:GetService("RunService"))
TweenService = cloneref(game:GetService("TweenService"))
TeleportService = cloneref(game:GetService("TeleportService"))
httpService = cloneref(game:GetService("HttpService"))
coreGui = cloneref(game:GetService("CoreGui"))
ReplicatedStorage = cloneref(game:GetService("ReplicatedStorage"))
UserInputService = cloneref(game:GetService("UserInputService"))
GuiService = cloneref(game:GetService("GuiService"))
StarterGui = cloneref(game:GetService("StarterGui"))
Lighting = cloneref(game:GetService('Lighting'))
NetworkClient = cloneref(game:GetService('NetworkClient'))
Stats = cloneref(game:GetService('Stats'))
MemStorageService = cloneref(game:GetService('MemStorageService'))
mouse = player:GetMouse()

camera = workspace.Camera
screenWidth = camera.ViewportSize.X
screenHeight = camera.ViewportSize.Y
screenSize = workspace.CurrentCamera.ViewportSize

task.spawn(function()
    local success, err = pcall(function()
        if getgenv().autorejoin_dc_or_kick and getgenv().autorejoin_dc_or_kick == true then
            if game.GameId == 4658598196 then
                GuiService.ErrorMessageChanged:Connect(function()
                    local httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
                    if httprequest then
                        local servers = {}
                        local req = httprequest({
                            Url = string.format(
                                "https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true",
                                13379208636
                            )
                        })
                        local body = httpService:JSONDecode(req.Body)

                        if body and body.data then
                            for _, server in next, body.data do
                                if type(server) == "table" and server.playing and server.maxPlayers and server.playing < server.maxPlayers and server.id ~= JobId then
                                    table.insert(servers, server.id)
                                end
                            end
                        end

                        if #servers > 0 then
                            local targetServer = servers[math.random(1, #servers)]
                            TeleportService:TeleportToPlaceInstance(13379208636, targetServer, game.Players.LocalPlayer)
                        else
                            sendNotification("Auto Rejoin", "No suitable servers found. Retrying...", 5)
                        end
                    else
                        sendNotification("Incompatible Exploit", "Your exploit does not support Auto Rejoin", 10)
                    end
                end)
            else
                GuiService.ErrorMessageChanged:Connect(function()
                    local httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
                    if httprequest then
                        local servers = {}
                        local req = httprequest({
                            Url = string.format(
                                "https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true",
                                game.PlaceId
                            )
                        })
                        local body = httpService:JSONDecode(req.Body)

                        if body and body.data then
                            for _, server in next, body.data do
                                if type(server) == "table" and server.playing and server.maxPlayers and server.playing < server.maxPlayers and server.id ~= JobId then
                                    table.insert(servers, server.id)
                                end
                            end
                        end

                        if #servers > 0 then
                            local targetServer = servers[math.random(1, #servers)]
                            TeleportService:TeleportToPlaceInstance(game.PlaceId, targetServer, game.Players.LocalPlayer)
                        else
                            sendNotification("Auto Rejoin", "No suitable servers found. Retrying...", 5)
                        end
                    else
                        sendNotification("Incompatible Exploit", "Your exploit does not support Auto Rejoin", 10)
                    end
                end)
            end
        end
    end)
    if not success then warn(err) end
end)

function press(btn)
    local inset = GuiService:GetGuiInset()
    local aPos, aSize = btn.AbsolutePosition, btn.AbsoluteSize
    vim:SendMouseButtonEvent(inset.X + aPos.X + aSize.X / 2, inset.Y + aPos.Y + aSize.Y / 2, 0, true, nil, 1)
    vim:SendMouseButtonEvent(inset.X + aPos.X + aSize.X / 2, inset.Y + aPos.Y + aSize.Y / 2, 0, false, nil, 1)
end

local function realClick(instance)
    if instance and instance.Selectable and instance.Visible == true then
        GuiService.SelectedObject = instance
        task.wait()
        vim:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
        vim:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
        task.wait()
        GuiService.SelectedObject = nil
    end
end

function stringToNumber(str)
    local result = 0
    local decimalFound = false
    local decimalDivisor = 1

    for i = 1, #str do
        local char = string.sub(str, i, i)
        if char == '.' then
            decimalFound = true
        elseif char >= '0' and char <= '9' then
            if decimalFound then
                decimalDivisor = decimalDivisor * 10
                result = result + (char:byte() - 48) / decimalDivisor
            else
                result = result * 10 + (char:byte() - 48)
            end
        end
    end
    return result
end

function getPrimaryPartFunc(object)
    if not object then
        return nil
    end

    if typeof(object) == "Instance" and object:IsA("BasePart") then
        return object
    end

    if object.PrimaryPart then
        return object.PrimaryPart
    end

    local humanoid = object:FindFirstChildOfClass("Humanoid")
    if humanoid then
        if humanoid.RootPart then
            local rootPartName = humanoid.RootPart.Name
            for _, descendant in ipairs(object:GetDescendants()) do
                if descendant.Name == rootPartName then
                    return descendant
                end
            end
        end
    end

    if object:FindFirstChild("HumanoidRootPart") then
        return object.HumanoidRootPart
    end

    for _, descendant in ipairs(object:GetDescendants()) do
        if descendant:IsA("BasePart") then
            return descendant
        end
    end

    if object.GetPivot then
        return object:GetPivot()
    end

    warn("No valid part or pivot found in the object!")
    return nil
end

function getSecondPartFunc(object)
    if not object then
        return nil
    end

    if typeof(object) == "Instance" and object:IsA("BasePart") then
        object = object.Parent
    end

    local parts = {}
    
    for _, descendant in ipairs(object:GetDescendants()) do
        if descendant:IsA("BasePart") then
            table.insert(parts, descendant)
        end
    end

    if #parts >= 2 then
        return parts[2]
    end

    warn("No second part found in the object!")
    return nil
end

player.Idled:Connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)

task.spawn(function()
    while task.wait() do
        vim:SendKeyEvent(true, Enum.KeyCode.L, false, game)
        task.wait(.1)
        vim:SendKeyEvent(false, Enum.KeyCode.L, false, game)
        task.wait(600)
    end
end)

local function sendNotification(title, text, duration)
    StarterGui:SetCore("SendNotification", { Title = title; Text = text; Duration = duration; })
end

function serverhop()
    if game.GameId == 4658598196 then
        PlaceID = 13379208636
    else
        PlaceID = game.PlaceId
    end
    local httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
    if httprequest then
        local servers = {}
        local req = httprequest({Url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true", PlaceID)})
        local body = httpService:JSONDecode(req.Body)

        if body and body.data then
            for _, v in ipairs(body.data) do
                if type(v) == "table" and v.playing < v.maxPlayers and v.id ~= game.JobId then
                    table.insert(servers, v.id)
                end
            end
        end

        if #servers > 0 then
            TeleportService:TeleportToPlaceInstance(PlaceID, servers[math.random(1, #servers)], player)
        end
    end
end

function pingwait(baseWait)
    baseWait = baseWait or 0
    local ping = Stats.Network.ServerStatsItem["Data Ping"]:GetValue()
    local pingInSeconds = ping / 1000
    return task.wait(baseWait + pingInSeconds + 0.01)
end

if game.GameId == 1782832995 and getgenv().AUNIVERSALTIME == true then

    if game.PlaceId ~= 5130598377 and game.PlaceId ~= 8008202756 then
        character = player.Character or player.CharacterAdded:Wait()

        while not character do task.wait()
            character = player.Character
        end

        local hrp = character:FindFirstChild("HumanoidRootPart")

        while not hrp do task.wait()
            hrp = character:FindFirstChild("HumanoidRootPart")
        end

        humanoid = character:FindFirstChildOfClass("Humanoid")

        while not humanoid do task.wait()
            humanoid = character:FindFirstChildOfClass("Humanoid")
        end

        character = player.Character or player.CharacterAdded:Wait()
        humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        humanoid = character:FindFirstChildOfClass("Humanoid")

        player.CharacterAdded:Connect(function(newCharacter)
            character = newCharacter
            humanoidRootPart = character:WaitForChild("HumanoidRootPart")
            humanoid = character:FindFirstChildOfClass("Humanoid")
        end)
    end

    if not NetworkClient:FindFirstChild('ClientReplicator') then
        sendNotification("Error", "Current Server is Bugged, serverhopping..", 5)
        task.wait(3)
        serverhop()
    end

    local moveCancelled = false
    local moveInProgress = false

    local function moveTo(character, targetPosition)
        if not character or not targetPosition then return end

        if moveInProgress then
            moveCancelled = true
        end

        moveCancelled = false
        moveInProgress = true

        local rootpart = character:FindFirstChild("HumanoidRootPart")
        if not rootpart then return end

        local startPosition = rootpart.Position

        local direction = (targetPosition - startPosition).Unit
        local distance = (targetPosition - startPosition).Magnitude

        local duration = distance / 600

        local startTime = os.clock()
        local endTime = startTime + duration

        while os.clock() < endTime and not moveCancelled do task.wait()
            local currentTime = os.clock()
            local timeRatio = (currentTime - startTime) / duration

            local currentPosition = startPosition + direction * (distance * timeRatio)

            rootpart.CFrame = CFrame.new(currentPosition)

            TweenService:Create(game.Workspace.CurrentCamera, TweenInfo.new(0.1), {CFrame = CFrame.new(currentPosition, targetPosition)}):Play()
        end

        rootpart.CFrame = CFrame.new(targetPosition)

        moveInProgress = false
    end

    local function stripTags(text)
        return text:gsub("<[^>]+>", "")
    end

    local function trim(s)
        return s:match("^%s*(.-)%s*$")
    end

    local clickX = math.floor(screenWidth * 0.1)
    local clickY = math.floor(screenHeight * 0.1)

    task.wait(2)

    local MacLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/ImSa1f/dwadaw/refs/heads/main/vasst"))()

    local windowWidth = math.clamp(screenSize.X * 0.6, 350, 800)
    local windowHeight = math.clamp(screenSize.Y * 0.6, 200, 650)

    local Window = MacLib:Window({
        Title = "North Hub",
        Subtitle = "discord.gg/northhub",
        Size = UDim2.fromOffset(windowWidth, windowHeight),
        DragStyle = 1,
        DisabledWindowControls = {},
        ShowUserInfo = false,
        Keybind = Enum.KeyCode.RightControl,
        AcrylicBlur = true,
    })

    local macUI

    while not macUI do task.wait()
        for i,v in pairs(coreGui:GetDescendants()) do
            if v.Name == "ScreenGui" and v:FindFirstChild("Base") then
                macUI = v
            end
        end
        for i, x in ipairs(gethui():GetChildren()) do
            if x.Name == "ScreenGui" and x:FindFirstChild("Base") then
                macUI = x
            end
        end
    end

    local function togglemacUI()
        if macUI then
            macUI.Enabled = not macUI.Enabled
            return true
        else
            return false
        end
    end

    local function createButtonUI()
        if not macUI or not macUI.Parent then
            error("macUI or macUI.Parent is not defined")
        end

        local buttonGui = Instance.new("ScreenGui")
        buttonGui.Name = "ButtonUI"
        buttonGui.Parent = macUI.Parent

        local backgroundFrame = Instance.new("Frame")
        backgroundFrame.Name = "BackgroundFrame"
        backgroundFrame.Size = UDim2.new(0, 60, 0, 60)
        backgroundFrame.Position = UDim2.new(1, -70, -0.03, -30)
        backgroundFrame.BackgroundColor3 = Color3.new(1, 0, 0)
        backgroundFrame.BorderSizePixel = 0
        backgroundFrame.BackgroundTransparency = 1 
        backgroundFrame.Parent = buttonGui

        local button = Instance.new("ImageButton")
        button.Name = "OpenButton"
        button.Image = "rbxassetid://107491175530182"
        button.Size = UDim2.new(0, 100, 0, 100)
        button.Position = UDim2.new(0.5, -45, 0.5, -45)
        button.BackgroundTransparency = 1
        button.Parent = backgroundFrame

        return button
    end


    if UserInputService.TouchEnabled then
        local button = createButtonUI()
        button.MouseButton1Click:Connect(togglemacUI)
    end

    local globalSettings = {
        UIBlurToggle = Window:GlobalSetting({
            Name = "UI Blur",
            Default = Window:GetAcrylicBlurState(),
            Callback = function(bool)
                Window:SetAcrylicBlurState(bool)
                Window:Notify({
                    Title = Window.Settings.Title,
                    Description = (bool and "Enabled" or "Disabled") .. " UI Blur",
                    Lifetime = 5
                })
            end,
        }),
        NotificationToggler = Window:GlobalSetting({
            Name = "Notifications",
            Default = Window:GetNotificationsState(),
            Callback = function(bool)
                Window:SetNotificationsState(bool)
                Window:Notify({
                    Title = Window.Settings.Title,
                    Description = (bool and "Enabled" or "Disabled") .. " Notifications",
                    Lifetime = 5
                })
            end,
        }),
        ShowUserInfo = Window:GlobalSetting({
            Name = "Show User Info",
            Default = Window:GetUserInfoState(),
            Callback = function(bool)
                Window:SetUserInfoState(bool)
                Window:Notify({
                    Title = Window.Settings.Title,
                    Description = (bool and "Showing" or "Redacted") .. " User Info",
                    Lifetime = 5
                })
            end,
        })
    }

    local tabGroups = {
        TabGroup1 = Window:TabGroup()
    }

    local tabs = {
        Main = tabGroups.TabGroup1:Tab({ Name = "Main", Image = "rbxassetid://93139146814165" }),
        itemsandchests = tabGroups.TabGroup1:Tab({ Name = "Items & Chests", Image = "rbxassetid://116849336198422" }),
        miscautos = tabGroups.TabGroup1:Tab({ Name = "Misc Autos", Image = "rbxassetid://121157752745208" }),
        teleports = tabGroups.TabGroup1:Tab({ Name = "Teleports", Image = "rbxassetid://122128498233634" }),
        misc = tabGroups.TabGroup1:Tab({ Name = "Misc", Image = "rbxassetid://113446708604407" }),
        menus = tabGroups.TabGroup1:Tab({ Name = "Menus", Image = "rbxassetid://93347906587647" }),
        risky = tabGroups.TabGroup1:Tab({ Name = "Risky", Image = "rbxassetid://75476705562455" }),
        Settings = tabGroups.TabGroup1:Tab({ Name = "Settings", Image = "rbxassetid://10734950309" })
    }

    local sections = {
        mainleft = tabs.Main:Section({ Side = "Left" }),
        mainright = tabs.Main:Section({ Side = "Right" }),
        itemsandchestsleft = tabs.itemsandchests:Section({ Side = "Left" }),
        itemsandchestsright = tabs.itemsandchests:Section({ Side = "Right" }),
        miscautosleft = tabs.miscautos:Section({ Side = "Left" }),
        miscautosright = tabs.miscautos:Section({ Side = "Right" }),
        teleportsleft = tabs.teleports:Section({ Side = "Left" }),
        teleportsright = tabs.teleports:Section({ Side = "Right" }),
        miscleft = tabs.misc:Section({ Side = "Left" }),
        menuleft = tabs.menus:Section({ Side = "Left" }),
        menuright = tabs.menus:Section({ Side = "Right" }),
        riskyleft = tabs.risky:Section({ Side = "Left" }),
        riskyright = tabs.risky:Section({ Side = "Right" }),
    }

    farmingchest = false

    sections.mainright:Header({
        Text = "Farm Settings"
    })

    sections.mainright:Toggle({
        Name = "Auto Equip Stand",
        Default = false,
        Callback = function(state)
            autoequip = state
            if autoequip and game.PlaceId ~= 5130598377 and game.PlaceId ~= 8008202756 then

                while autoequip do task.wait()
                    local success, err = pcall(function()

                        if character:FindFirstChild("StatesFolder") and character.StatesFolder:FindFirstChild("StandOff") and character.StatesFolder.StandOff.Value then
                            ReplicatedStorage.ReplicatedModules.KnitPackage.Knit.Services.MoveInputService.RF.FireInput:InvokeServer("Q")
                            ReplicatedStorage.ReplicatedModules.KnitPackage.Knit.Services.MoveInputService.RF.FireInput:InvokeServer("END-Q")
                        end
                    end)
                    if not success then warn(err) end
                end
            end
        end
    }, "autoequipstand")

    -- sections.mainleft:Toggle({
    --     Name = "Instant Kill",
    --     Default = false,
    --     Callback = function(state)
    --         instakill = state
    --         if instakill and game.PlaceId ~= 5130598377 and game.PlaceId ~= 8008202756 then

    --             local function checkTarget(k)
    --                 if k:IsA("Model") and k:FindFirstChild("Head") and k.Head:IsA("Part") and k.Head.Name == "Head" and k.Head ~= character.Head then
    --                     local humanoid = k:FindFirstChildOfClass("Humanoid")
    --                     local targetPlayer = players:GetPlayerFromCharacter(k)
    --                     if humanoid and humanoid.Health > 0 and humanoid.Health < humanoid.MaxHealth and targetPlayer ~= player then
    --                         local distance = (k.Head.Position - character.Head.Position).magnitude
    --                         if distance <= 35 then
    --                             humanoid.Health = 0
    --                         end
    --                     end
    --                 end
    --             end

    --             while instakill do task.wait()
    --                 local success, err = pcall(function()
    --                     for _, k in ipairs(workspace.Living:GetChildren()) do
    --                         checkTarget(k) 
    --                     end
    --                 end)
    --                 if not success then warn(err) end
    --                 task.wait(.1)
    --             end
    --         end
    --     end
    -- }, "InstantKill")
    
    sections.mainright:Slider({
        Name = "Sell Delay",
        Default = 2,
        Minimum = 0,
        Maximum = 180,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(t)
            selldelay = t
        end
    }, "SellDelay")

    sections.mainright:Toggle({
        Name = "Auto Sell",
        Default = false,
        Callback = function(state)
            autosell = state
            if autosell and game.PlaceId ~= 5130598377 and game.PlaceId ~= 8008202756 then
            
                while autosell do task.wait()
                    local success, error = pcall(function()
                        local backpack = player.Backpack
                        local tool = backpack:FindFirstChildOfClass("Tool")
                        local prompt = player.PlayerGui.UI.Prompt

                        local itemsToSell = {}

                        for _, tool in ipairs(backpack:GetChildren()) do
                            if tool:IsA("Tool") then
                                local itemId = tool:GetAttribute("ItemId")
                                local uuid = tool:GetAttribute("UUID")
                        
                                if itemId and uuid then
                                    table.insert(itemsToSell, {itemId, uuid, 1})
                                end
                            end
                        end
                        
                        if #itemsToSell > 0 then
                            ReplicatedStorage.ReplicatedModules.KnitPackage.Knit.Services.ShopService.RE.Signal:FireServer("BlackMarketBulkSellItems", itemsToSell)
                            task.wait(selldelay)
                        end
                        if prompt.Visible and not player.PlayerGui.UI.Gameplay.TraitHands.Visible then
                            press(prompt.Frame.SingleButton)
                        end
                    end)
                    if not success then warn(err) end
                end
            end
        end
    }, "Auto_Sell")

    sections.mainleft:Header({
        Text = "Mob Auto Farms"
    })

    local Mobs_Table = {}
    if game.PlaceId ~= 5130598377 and game.PlaceId ~= 8008202756 then
        for i,v in pairs(workspace.Living:GetChildren()) do
            if v:IsA("Model") and not players:FindFirstChild(v.Name) and not table.find(Mobs_Table,v.Name) then
                table.insert(Mobs_Table,v.Name)
            end
        end
    end

    local mobsdropdown = sections.mainright:Dropdown({
        Name = "Select Mobs to Farm",
        Search = true,
        Multi = true,
        Required = false,
        Options = Mobs_Table,
        Default = nil,
        Callback = function(selectedValues)
            SelectedMobs = {}
            for mobName, isSelected in pairs(selectedValues) do
                if isSelected then
                    table.insert(SelectedMobs, mobName)
                end
            end
        end,
    }, "MobsToFarm")

    sections.mainright:Button({
        Name = "Clear Mobs Selected",
        Callback = function()
            mobsdropdown:UpdateSelection({nil})
        end,
    })

    sections.mainright:Button({
        Name = "Refresh Mobs List",
        Callback = function()
            local Mobs_Table = {}
            for i,v in pairs(workspace.Living:GetChildren()) do
                if v:IsA("Model") and not players:FindFirstChild(v.Name) and not table.find(Mobs_Table,v.Name) then
                    table.insert(Mobs_Table,v.Name)
                end
            end
            mobsdropdown:Refresh(Mobs_Table)
        end,
    })

    sections.mainleft:Toggle({
        Name = "Auto Farm Mobs",
        Default = false,
        Callback = function(state)
            autofarmmobs = state
            if autofarmmobs and game.PlaceId ~= 5130598377 and game.PlaceId ~= 8008202756 then
                local function farmMob(mobName)
                    for _, v in pairs(workspace.Living:GetChildren()) do
                        if v.Name == mobName then
                            while v:FindFirstChildOfClass("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Parent and v.Parent.Name == "Living" and autofarmmobs and not farmingchest do
                                task.wait()
                                humanoidRootPart:PivotTo(v.HumanoidRootPart.CFrame)
                                ReplicatedStorage.ReplicatedModules.KnitPackage.Knit.Services.MoveInputService.RF.FireInput:InvokeServer("MouseButton1")
                                while player.Cooldowns:FindFirstChild("Rush Attack") and autofarmmobs
                                    or humanoid.WalkSpeed < 7 and autofarmmobs
                                    or humanoid.JumpPower < 1 and autofarmmobs do
                                    task.wait()
                                    humanoidRootPart:PivotTo(v.HumanoidRootPart.CFrame * CFrame.new(0, 60, 0))
                                end
                            end
                        end
                    end
                end
    
                while autofarmmobs do task.wait()
                    local success, err = pcall(function()
                        if SelectedMobs and #SelectedMobs > 0 and not farmingchest then
                            for _, mobName in ipairs(SelectedMobs) do
                                farmMob(mobName)
                            end
                        end
                    end)
                    if not success then
                        warn(err)
                    end
                end
            end
        end
    }, "AutoFarmMobs")

    local curse_names = {"Roppongi Curse", "Jujutsu Sorcerer", "Flyhead", "Mantis Curse"}

    local curses = {}
    for i, NPC in ipairs(curse_names) do
        table.insert(curses, NPC)
    end
    
    sections.mainleft:Toggle({
        Name = "Auto Farm Curses Mob Group",
        Default = false,
        Callback = function(state)
            autocursesmobs = state
    
            if autocursesmobs then
    
                while autocursesmobs do task.wait()
                    local success, error = pcall(function()
    
                        local foundCurse = false
                        for _,v in pairs(workspace.Living:GetChildren()) do
                            if table.find(curses, v.Name) and v:FindFirstChild("HumanoidRootPart") and v.Parent and v.Parent.Name == "Living" and character and humanoidRootPart and v:FindFirstChildOfClass("Humanoid") then
                                foundCurse = true
                                while v:FindFirstChildOfClass("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Parent ~= nil and not farmingchest and autocursesmobs do task.wait()
                                    humanoidRootPart:PivotTo(v.HumanoidRootPart.CFrame)
                                    ReplicatedStorage.ReplicatedModules.KnitPackage.Knit.Services.MoveInputService.RF.FireInput:InvokeServer("MouseButton1")
                                    while player.Cooldowns:FindFirstChild("Rush Attack") and autocursesmobs
                                    or humanoid.WalkSpeed < 7 and autocursesmobs
                                    or humanoid.JumpPower < 1 and autocursesmobs do task.wait()
                                        humanoidRootPart:PivotTo(v.HumanoidRootPart.CFrame * CFrame.new(0,60,0))
                                    end
                                end
                            end
                        end
                        if not foundCurse and not farmingchest and autocursesmobs then
                            humanoidRootPart:PivotTo(CFrame.new(1986, 943, -1492))
                            moveTo(character, humanoidRootPart.Position + Vector3.new(0, 0, 70))
                        end
                    end)
                    if not success then warn(err) end
                end
            end
        end
    }, "FarmCursesMobs")

    sections.mainleft:Toggle({
        Name = "Auto Finger Bearer Quest",
        Default = false,
        Callback = function(state)
            autofingerquest = state
            
            if autofingerquest then

                local lastCheck = os.clock()
            
                ReplicatedStorage.ReplicatedModules.KnitPackage.Knit.Services.QuestLineService.RF.DiscardQuestline:InvokeServer("Slayer_Quest")
                
                while autofingerquest do task.wait()
                    pcall(function()
                        ReplicatedStorage.ReplicatedModules.KnitPackage.Knit.Services.DialogueService.RF.CheckDialogue:InvokeServer("Slayer_Quest","Finger Bearer")
                        
                        for _,v in pairs(workspace.Living:GetChildren()) do
                            if v.Name == "The Bearer" and v:FindFirstChild("HumanoidRootPart") and character and humanoidRootPart and v:FindFirstChildOfClass("Humanoid") or 
                            table.find(curses, v.Name) and v:FindFirstChild("HumanoidRootPart") and character and humanoidRootPart and v:FindFirstChildOfClass("Humanoid") then
                                foundsomething = true
                                while v:FindFirstChildOfClass("Humanoid") and v:FindFirstChild("HumanoidRootPart") and not farmingchest and autofingerquest do task.wait()
                                    humanoidRootPart:PivotTo(v.HumanoidRootPart.CFrame)
                                    ReplicatedStorage.ReplicatedModules.KnitPackage.Knit.Services.MoveInputService.RF.FireInput:InvokeServer("MouseButton1")
                                    while player.Cooldowns:FindFirstChild("Rush Attack") or humanoid.WalkSpeed < 7 or humanoid.JumpPower < 1 and autofingerquest do task.wait()
                                        humanoidRootPart:PivotTo(v.HumanoidRootPart.CFrame * CFrame.new(0,60,0))
                                    end
                                end
                            end
                        end
                        if not foundsomething and character and humanoidRootPart and not farmingchest and autofingerquest or 
                        (os.clock() - lastCheck >= 15) and character and humanoidRootPart and not farmingchest and autofingerquest then
                            lastCheck = os.clock()
                            humanoidRootPart:PivotTo(CFrame.new(1986, 943, -1492))
                            --moveTo(character, character.HumanoidRootPart.Position + Vector3.new(0, 0, 70))
                        end
                    end)
                end
            end
        end
    }, "AutoFingerQuest")

    sections.mainleft:Divider()

    sections.mainleft:Header({
        Text = "Bosses"
    })

    local Bosses_Table = {
        { "The Vessel", CFrame.new(-162, 5, -10016) },
        { "Eight-Handled Sword Divergent Sila Divine General Mahoraga", CFrame.new(-69, 5, -10250) },
        { "The Sorcerer Killer", CFrame.new(65, 6, -10018) },
        { "The Strongest Of Today", CFrame.new(-16733, 7, -5966) },
        { "The Strongest In History", CFrame.new(-16733, 7, -5966) },
        { "Luffy", CFrame.new(-3266, 919, 14879) },
        { "The Clown", CFrame.new(-3151, 919, 15235) },
        { "Shanks", CFrame.new(-3477, 919, 15258) },
        { "Diavolo, The Boss", CFrame.new(1001, 934, 2874) },
        { "Surgeon of Death", CFrame.new(-69063, 3360, 19958) },
        { "Whitebeard", CFrame.new(-24395, 1577, 483) },
        { "Crocodile", CFrame.new(2171, 913, -2525) },
        { "Kars", CFrame.new(593, 1015, -416) }
    }
    
    local Boss_Names = {}
    for i, boss in ipairs(Bosses_Table) do
        table.insert(Boss_Names, boss[1])
    end
    
    local SelectedBosses = {}
    
    local bossdropdown = sections.mainleft:Dropdown({
        Name = "Select Bosses to Farm",
        Search = true,
        Multi = true,
        Required = false,
        Options = Boss_Names,
        Default = nil,
        Callback = function(selectedValues)
            SelectedBosses = {}
            for bossName, isSelected in pairs(selectedValues) do
                if isSelected then
                    table.insert(SelectedBosses, bossName)
                end
            end
        end,
    }, "BossestoFarm")

    sections.mainleft:Button({
        Name = "Clear Bosses Selection",
        Callback = function()
            bossdropdown:UpdateSelection({nil})
        end,
    })

    sections.mainleft:Slider({
        Name = "Teleport Next Boss Delay",
        Default = 1,
        Minimum = 0,
        Maximum = 10,
        DisplayMethod = "Value",
        Precision = 0,
        Callback = function(t)
            bossspawntpdelay = t
        end
    }, "TPNextBossDelay")
    
    sections.mainleft:Toggle({
        Name = "Auto Farm Bosses",
        Default = false,
        Callback = function(state)
            autofarmbosses = state
            if autofarmbosses and game.PlaceId ~= 5130598377 and game.PlaceId ~= 8008202756 then
                local function getBossCFrame(bossName)
                    for _, boss in ipairs(Bosses_Table) do
                        if boss[1] == bossName then
                            return boss[2]
                        end
                    end
                    return nil
                end
    
                local function farmBoss(bossName)
                    for _, v in pairs(workspace.Living:GetChildren()) do
                        if v.Name == bossName and v:FindFirstChild("HumanoidRootPart") and v.Parent ~= nil then
                            while v:FindFirstChildOfClass("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Parent and v.Parent.Name == "Living" and not farmingchest and autofarmbosses do task.wait()
                                humanoidRootPart:PivotTo(v.HumanoidRootPart.CFrame)
                                ReplicatedStorage.ReplicatedModules.KnitPackage.Knit.Services.MoveInputService.RF.FireInput:InvokeServer("MouseButton1")
                                while player.Cooldowns:FindFirstChild("Rush Attack") and autofarmbosses
                                or humanoid.WalkSpeed < 7 and autofarmbosses
                                or humanoid.JumpPower < 1 and autofarmbosses do task.wait()
                                    humanoidRootPart:PivotTo(v.HumanoidRootPart.CFrame * CFrame.new(0, 60, 0))
                                end
                            end
                            return true
                        end
                    end
                    return false
                end
    
                local currentIndex = 1
    
                while autofarmbosses do task.wait()
    
                    if #SelectedBosses > 0 then
                        local currentBoss = SelectedBosses[currentIndex]
                        if currentBoss then
                            local bossCFrame = getBossCFrame(currentBoss)
                            if bossCFrame then
                                humanoidRootPart.CFrame = bossCFrame
                            end

                            task.wait(bossspawntpdelay)
    
                            local bossFound = farmBoss(currentBoss)
                            if not bossFound then
                                currentIndex = currentIndex + 1
                                if currentIndex > #SelectedBosses then
                                    currentIndex = 1
                                end
                            end
                        else
                            currentIndex = 1
                        end
                    end
                end
            end
        end,
    }, "AutoFarmBosses")
    
    sections.mainright:Button({
        Name = "Go Back Up",
        Callback = function()
            pcall(function()
                humanoidRootPart.CFrame = CFrame.new(humanoidRootPart.Position + Vector3.new(0,40,0))
            end)
        end
    })

    sections.itemsandchestsleft:Header({
        Text = "Chest Auto Farms"
    })

    sections.itemsandchestsleft:Label({
        Text = "Auto Collect Chests from mobs max distance"
    })

    sections.itemsandchestsleft:Slider({
        Name = "",
        Default = 100,
        Minimum = 30,
        Maximum = 300,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(t)
            maxchestdistance = t
        end
    }, "ChestMaxDistance")

    sections.itemsandchestsleft:Toggle({
        Name = "Auto Farm Chests (From Mobs)",
        Default = false,
        Callback = function(state)
            autofarmchestsMobs = state
            if autofarmchestsMobs and game.PlaceId ~= 5130598377 and game.PlaceId ~= 8008202756 then
                local plrgui = player.PlayerGui
                local gameplay = plrgui.UI.Gameplay
                
                while autofarmchestsMobs do task.wait()
                    local success, err = pcall(function()
                        for _,v in pairs(workspace:GetChildren()) do
                            if v.Name == "Common" or v.Name == "Rare" or v.Name == "Epic" or v.Name == "Legendary" and (v.RootPart.Position - humanoidRootPart.Position).magnitude <= maxchestdistance then
                                local item = v:FindFirstChild("RootPart")
                                if item then
                                    local prompt = item:FindFirstChildOfClass("Attachment") and item:FindFirstChildOfClass("Attachment"):FindFirstChildOfClass("ProximityPrompt")
                                    if prompt then
                                        farmingchest = true
                                        humanoidRootPart:PivotTo(item.CFrame)
                                        fireproximityprompt(prompt, 0)
                                        fireproximityprompt(prompt, 1)
                                    else
                                        farmingchest = false
                                    end
                                else
                                    farmingchest = false
                                end
                            else
                                farmingchest = false
                            end
                        end
                        if gameplay:FindFirstChild("ChestRoll") and gameplay.ChestRoll.Visible and gameplay.ChestRoll.SelectAll.Visible and gameplay.ChestRoll.TextLabel.Text == "REWARDS GAINED:" then
                            firesignal(gameplay.ChestRoll.SelectAll.MouseButton1Click)
                        end
                        if gameplay:FindFirstChild("ChestRoll") and gameplay.ChestRoll.Close.Visible and gameplay.ChestRoll.TextLabel.Text == "REWARDS GAINED:" then
                            firesignal(gameplay.ChestRoll.Close.MouseButton1Click)
                        end
                    end)
                    if not success then warn(err) end
                end
            end
        end
    }, "AutoFarmChests")

    sections.itemsandchestsleft:Toggle({
        Name = "Auto Farm Chests",
        Default = false,
        Callback = function(state)
            autofarmchests = state
            if autofarmchests and game.PlaceId ~= 5130598377 and game.PlaceId ~= 8008202756 then
                local plrgui = player.PlayerGui
                local gameplay = plrgui.UI.Gameplay

                local lastActionTime = 0
                
                while autofarmchests do task.wait()
                    local success, err = pcall(function()
                        for _,v in pairs(workspace.ItemSpawns.Chests:GetChildren()) do
                            if v.Name == "SpawnLocation" and #v:GetChildren() > 0 then
                                local item = v:FindFirstChildOfClass("Part") or v:FindFirstChildOfClass("MeshPart")
                                if item then
                                    local prompt = item:FindFirstChildOfClass("Attachment") and item:FindFirstChildOfClass("Attachment"):FindFirstChildOfClass("ProximityPrompt")
                                    if prompt then
                                        farmingchest = true
                                        humanoidRootPart:PivotTo(item.CFrame)
                                        fireproximityprompt(prompt, 0)
                                        fireproximityprompt(prompt, 1)
                                    else
                                        farmingchest = false
                                    end
                                else
                                    farmingchest = false
                                end
                            else
                                local currentTime = os.clock()
                                if currentTime - lastActionTime >= 5 then
                                    lastActionTime = currentTime
                                    task.spawn(function()
                                        StarterGui:SetCore("SendNotification", {
                                            Title = "North Hub Notifier";
                                            Text = "No Chests Spawned in";
                                            Duration = 2;
                                        })
                                    end)
                                end
                            end
                        end
                        if gameplay:FindFirstChild("ChestRoll") and gameplay.ChestRoll.Visible and gameplay.ChestRoll.SelectAll.Visible and gameplay.ChestRoll.TextLabel.Text == "REWARDS GAINED:" then
                            firesignal(gameplay.ChestRoll.SelectAll.MouseButton1Click)
                        end
                        if gameplay:FindFirstChild("ChestRoll") and gameplay.ChestRoll.Close.Visible and gameplay.ChestRoll.TextLabel.Text == "REWARDS GAINED:" then
                            firesignal(gameplay.ChestRoll.Close.MouseButton1Click)
                        end
                    end)
                    if not success then warn(err) end
                end
            end
        end
    })

    sections.itemsandchestsleft:Toggle({
        Name = "Auto Farm Astral Chests",
        Default = false,
        Callback = function(state)
            autofarmastralchests = state
            if autofarmastralchests then
                local plrgui = player.PlayerGui
                local gameplay = plrgui.UI.Gameplay

                local lastActionTime = 0
                
                while autofarmastralchests do task.wait()
                    local success, error = pcall(function()
                        for _,v in pairs(workspace.ItemSpawns.AstralChests:GetChildren()) do
                            if v.Name == "SpawnLocation" and #v:GetChildren() > 0 then
                                local item = v:FindFirstChildOfClass("Part") or v:FindFirstChildOfClass("MeshPart")
                                if item then
                                    local prompt = item:FindFirstChildOfClass("Attachment") and item:FindFirstChildOfClass("Attachment"):FindFirstChildOfClass("ProximityPrompt")
                                    if prompt then
                                        farmingchest = true
                                        humanoidRootPart:PivotTo(item.CFrame)
                                        fireproximityprompt(prompt, 0)
                                        fireproximityprompt(prompt, 1)
                                    else
                                        farmingchest = false
                                    end
                                else
                                    farmingchest = false
                                end
                            else
                                local currentTime = os.clock()
                                if currentTime - lastActionTime >= 5 then
                                    lastActionTime = currentTime
                                    task.spawn(function()
                                        StarterGui:SetCore("SendNotification", {
                                            Title = "North Hub Notifier";
                                            Text = "No Astral Chests Spawned In";
                                            Duration = 2;
                                        })
                                    end)
                                end
                            end
                        end
                        if gameplay:FindFirstChild("ChestRoll") and gameplay.ChestRoll.Visible and gameplay.ChestRoll.SelectAll.Visible and gameplay.ChestRoll.TextLabel.Text == "REWARDS GAINED:" then
                            firesignal(gameplay.ChestRoll.SelectAll.MouseButton1Click)
                        end
                        if gameplay:FindFirstChild("ChestRoll") and gameplay.ChestRoll.Close.Visible and gameplay.ChestRoll.TextLabel.Text == "REWARDS GAINED:" then
                            firesignal(gameplay.ChestRoll.Close.MouseButton1Click)
                        end
                    end)
                    if not success then warn(err) end
                end
            end
        end
    })

    sections.itemsandchestsright:Header({
        Text = "Item Auto Farms"
    })

    sections.itemsandchestsright:Toggle({
        Name = "Auto Farm All Items",
        Default = false,
        Callback = function(state)
            autofarmallitems = state
            if autofarmallitems and game.PlaceId ~= 5130598377 and game.PlaceId ~= 8008202756 then
                local plrgui = player.PlayerGui
                local gameplay = plrgui.UI.Gameplay

                local lastActionTime = 0
                
                while autofarmallitems do task.wait()
                    local success, err = pcall(function()
                        for _,v in pairs(workspace.ItemSpawns:GetDescendants()) do
                            if v.Name == "SpawnLocation" and #v:GetChildren() > 0 then
                                local item = v:FindFirstChildOfClass("Part") or v:FindFirstChildOfClass("MeshPart")
                                if item then
                                    local prompt = item:FindFirstChildOfClass("Attachment") and item:FindFirstChildOfClass("Attachment"):FindFirstChildOfClass("ProximityPrompt")
                                    if prompt then
                                        farmingchest = true
                                        humanoidRootPart:PivotTo(item.CFrame)
                                        fireproximityprompt(prompt, 0)
                                        fireproximityprompt(prompt, 1)
                                    else
                                        farmingchest = false
                                    end
                                else
                                    farmingchest = false
                                end
                            else
                                local currentTime = os.clock()
                                if currentTime - lastActionTime >= 5 then
                                    lastActionTime = currentTime
                                    task.spawn(function()
                                        StarterGui:SetCore("SendNotification", {
                                            Title = "North Hub Notifier";
                                            Text = "No Items Spawned in";
                                            Duration = 2;
                                        })
                                    end)
                                end
                            end
                        end
                        if gameplay:FindFirstChild("ChestRoll") and gameplay.ChestRoll.Visible and gameplay.ChestRoll.SelectAll.Visible and gameplay.ChestRoll.TextLabel.Text == "REWARDS GAINED:" then
                            firesignal(gameplay.ChestRoll.SelectAll.MouseButton1Click)
                        end
                        if gameplay:FindFirstChild("ChestRoll") and gameplay.ChestRoll.Close.Visible and gameplay.ChestRoll.TextLabel.Text == "REWARDS GAINED:" then
                            firesignal(gameplay.ChestRoll.Close.MouseButton1Click)
                        end
                    end)
                    if not success then warn(err) end
                end
            end
        end
    }, "AutoFarmAllItems")

    sections.itemsandchestsright:Toggle({
        Name = "Auto Farm Devil Fruits",
        Default = false,
        Callback = function(state)
            autofarmdevilfruits = state
            if autofarmdevilfruits then

                local lastActionTime = 0
                
                while autofarmdevilfruits do task.wait()
                    local success, err = pcall(function()
                        for _,v in pairs(workspace.ItemSpawns.DevilFruits:GetChildren()) do
                            if v.Name == "SpawnLocation" and #v:GetChildren() > 0 then
                                local item = v:FindFirstChildOfClass("Part") or v:FindFirstChildOfClass("MeshPart")
                                if item then
                                    local prompt = item:FindFirstChildOfClass("Attachment") and item:FindFirstChildOfClass("Attachment"):FindFirstChildOfClass("ProximityPrompt")
                                    if prompt then
                                        humanoidRootPart:PivotTo(item.CFrame)
                                        fireproximityprompt(prompt, 0)
                                        fireproximityprompt(prompt, 1)
                                    end
                                end
                            else
                                local currentTime = os.clock()
                                if currentTime - lastActionTime >= 5 then
                                    lastActionTime = currentTime
                                    task.spawn(function()
                                        StarterGui:SetCore("SendNotification", {
                                            Title = "North Hub Notifier";
                                            Text = "No Devil Fruits Spawned in";
                                            Duration = 2;
                                        })
                                    end)
                                end
                            end
                        end
                    end)
                    if not success then warn(err) end
                end
            end
        end
    }, "Auto_Farm_Devil_Fruits")

    sections.itemsandchestsright:Toggle({
        Name = "Auto Farm Event Items",
        Default = false,
        Callback = function(state)
            autofarmeventitems = state
            if autofarmeventitems then

                local lastActionTime = 0
                
                while autofarmeventitems do task.wait()
                    local success, err = pcall(function()
                        for _,v in pairs(workspace.ItemSpawns.EventItems:GetChildren()) do
                            if v.Name == "SpawnLocation" and #v:GetChildren() > 0 then
                                local item = v:FindFirstChildOfClass("Part") or v:FindFirstChildOfClass("MeshPart")
                                if item then
                                    local prompt = item:FindFirstChildOfClass("Attachment") and item:FindFirstChildOfClass("Attachment"):FindFirstChildOfClass("ProximityPrompt")
                                    if prompt then
                                        humanoidRootPart:PivotTo(item.CFrame)
                                        fireproximityprompt(prompt, 0)
                                        fireproximityprompt(prompt, 1)
                                    end
                                end
                            else
                                local currentTime = os.clock()
                                if currentTime - lastActionTime >= 5 then
                                    lastActionTime = currentTime
                                    task.spawn(function()
                                        StarterGui:SetCore("SendNotification", {
                                            Title = "North Hub Notifier";
                                            Text = "No Event Items Spawned in";
                                            Duration = 2;
                                        })
                                    end)
                                end
                            end
                        end
                    end)
                    if not success then warn(err) end
                end
            end
        end
    }, "AutoFarmEventItems")

    sections.itemsandchestsright:Toggle({
        Name = "Auto Farm Meteors",
        Default = false,
        Callback = function(state)
            autofarmMeteors = state
            if autofarmMeteors then

                local lastActionTime = 0
                
                while autofarmMeteors do task.wait()
                    local success, err = pcall(function()
                        for _,v in pairs(workspace.ItemSpawns.Meteors:GetChildren()) do
                            if v.Name == "SpawnLocation" and #v:GetChildren() > 0 then
                                local item = v:FindFirstChildOfClass("Part") or v:FindFirstChildOfClass("MeshPart")
                                if item then
                                    local prompt = item:FindFirstChildOfClass("Attachment") and item:FindFirstChildOfClass("Attachment"):FindFirstChildOfClass("ProximityPrompt")
                                    if prompt then
                                        humanoidRootPart:PivotTo(item.CFrame)
                                        fireproximityprompt(prompt, 0)
                                        fireproximityprompt(prompt, 1)
                                    end
                                end
                            else
                                local currentTime = os.clock()
                                if currentTime - lastActionTime >= 5 then
                                    lastActionTime = currentTime
                                    task.spawn(function()
                                        StarterGui:SetCore("SendNotification", {
                                            Title = "North Hub Notifier";
                                            Text = "No Meteors Spawned in";
                                            Duration = 2;
                                        })
                                    end)
                                end
                            end
                        end
                    end)
                    if not success then warn(err) end
                end
            end
        end
    }, "AutoFarmMeteors")

    sections.itemsandchestsright:Toggle({
        Name = "Auto Farm Shards",
        Default = false,
        Callback = function(state)
            autofarmShards = state
            if autofarmShards then

                local lastActionTime = 0
                
                while autofarmShards do task.wait()
                    local success, err = pcall(function()
                        for _,v in pairs(workspace.ItemSpawns.Shards:GetChildren()) do
                            if v.Name == "SpawnLocation" and #v:GetChildren() > 0 then
                                local item = v:FindFirstChildOfClass("Part") or v:FindFirstChildOfClass("MeshPart")
                                if item then
                                    local prompt = item:FindFirstChildOfClass("Attachment") and item:FindFirstChildOfClass("Attachment"):FindFirstChildOfClass("ProximityPrompt")
                                    if prompt then
                                        humanoidRootPart:PivotTo(item.CFrame)
                                        fireproximityprompt(prompt, 0)
                                        fireproximityprompt(prompt, 1)
                                    end
                                end
                            else
                                local currentTime = os.clock()
                                if currentTime - lastActionTime >= 5 then
                                    lastActionTime = currentTime
                                    task.spawn(function()
                                        StarterGui:SetCore("SendNotification", {
                                            Title = "North Hub Notifier";
                                            Text = "No Shards Spawned in";
                                            Duration = 2;
                                        })
                                    end)
                                end
                            end
                        end
                    end)
                    if not success then warn(err) end
                end
            end
        end
    }, "AutoFarmShards")

    sections.itemsandchestsright:Toggle({
        Name = "Auto Farm Only Standard Items",
        Default = false,
        Callback = function(state)
            autofarmStandardItems = state
            if autofarmStandardItems then

                local lastActionTime = 0
                
                while autofarmStandardItems do task.wait()
                    local success, err = pcall(function()
                        for _,v in pairs(workspace.ItemSpawns.StandardItems:GetChildren()) do
                            if v.Name == "SpawnLocation" and #v:GetChildren() > 0 then
                                local item = v:FindFirstChildOfClass("Part") or v:FindFirstChildOfClass("MeshPart")
                                if item then
                                    local prompt = item:FindFirstChildOfClass("Attachment") and item:FindFirstChildOfClass("Attachment"):FindFirstChildOfClass("ProximityPrompt")
                                    if prompt then
                                        humanoidRootPart:PivotTo(item.CFrame)
                                        fireproximityprompt(prompt, 0)
                                        fireproximityprompt(prompt, 1)
                                    end
                                end
                            else
                                local currentTime = os.clock()
                                if currentTime - lastActionTime >= 5 then
                                    lastActionTime = currentTime
                                    task.spawn(function()
                                        StarterGui:SetCore("SendNotification", {
                                            Title = "North Hub Notifier";
                                            Text = "No Standard Items Spawned in";
                                            Duration = 2;
                                        })
                                    end)
                                end
                            end
                        end
                    end)
                    if not success then warn(err) end
                end
            end
        end
    }, "AutoFarmOnlyStandardItems")

    if game.PlaceId ~= 5130598377 and game.PlaceId ~= 8008202756 then

        baseplate = workspace:FindFirstChild("Baseplate") or Instance.new("Part", workspace)
        baseplate.Size = Vector3.new(10000, 0.3, 10000)
        baseplate.Anchored = true
        baseplate.CanCollide = true
        baseplate.Transparency = 1

        function followPlayer()
            if character and character:FindFirstChild("HumanoidRootPart") then
                local playerPosition = humanoidRootPart.Position
                baseplate.Position = Vector3.new(playerPosition.X, playerPosition.Y - 5, playerPosition.Z)
            end
        end

        function noclip()
            for i, v in pairs(character:GetDescendants()) do
                if v:IsA("BasePart") and v.CanCollide == true then
                    v.CanCollide = false
                    humanoidRootPart.Velocity = Vector3.new(0,0,0)
                end
            end
        end

        function unnoclip()
            for i, v in pairs(character:GetDescendants()) do
                if v:IsA("BasePart") and v.CanCollide == false then
                    v.CanCollide = true
                    humanoidRootPart.Velocity = Vector3.new(0,0,0)
                end
            end
        end
    end

    hidingname = false

    if game.PlaceId == 8023712967 or game.PlaceId == 6846458508 then
        label = player.PlayerGui.UI.Gameplay.Character.Info.Label

        local playerList = coreGui:FindFirstChild("PlayerList")
        local children = playerList and playerList:FindFirstChild("Children")
        local offsetFrame = children and children:FindFirstChild("OffsetFrame")
        local playerScrollList = offsetFrame and offsetFrame:FindFirstChild("PlayerScrollList")
        local sizeOffsetFrame = playerScrollList and playerScrollList:FindFirstChild("SizeOffsetFrame")
        local scrollingFrameContainer = sizeOffsetFrame and sizeOffsetFrame:FindFirstChild("ScrollingFrameContainer")
        local scrollingFrameClippingFrame = scrollingFrameContainer and scrollingFrameContainer:FindFirstChild("ScrollingFrameClippingFrame")
        local scrollingFrame = scrollingFrameClippingFrame and scrollingFrameClippingFrame:FindFirstChild("ScrollingFrame")
        local offsetUndoFrame = scrollingFrame and scrollingFrame:FindFirstChild("OffsetUndoFrame")
        local playerFrame = offsetUndoFrame and offsetUndoFrame:FindFirstChild("p_7208978385")
        local childrenFrame = playerFrame and playerFrame:FindFirstChild("ChildrenFrame")
        local nameFrame = childrenFrame and childrenFrame:FindFirstChild("NameFrame")
        local bgFrame = nameFrame and nameFrame:FindFirstChild("BGFrame")
        local overlayFrame = bgFrame and bgFrame:FindFirstChild("OverlayFrame")
        local playerName = overlayFrame and overlayFrame:FindFirstChild("PlayerName")

        local label2 = playerName and playerName:FindFirstChild("PlayerName")

        function updateLabelText()
            if hidingname then
                local desiredText = "https://discord.gg/northhub"
                local desiredTextt = ".gg/northhub"

                if label and label.Text ~= desiredText then
                    label.Text = desiredText
                end

                if label2 and label2.Text ~= desiredTextt then
                    label2.Text = desiredTextt
                end
            end
        end
    end

    sections.miscautosleft:Header({
        Text = "Press X to halt Auto Roll"
    })

    if game.PlaceId == 6846458508 then
        UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
            if gameProcessedEvent then return end
            if input.KeyCode == Enum.KeyCode.X then
                autorollabilitybanner = false
                print("Auto Roll Ability Banner Stopped")
            end
        end)
    end

    initialload = false

    sections.miscautosleft:Toggle({
        Name = "Auto Roll Ability Banner",
        Default = false,
        Callback = function(state)
            autorollabilitybanner = state
            if autorollabilitybanner and game.PlaceId == 6846458508 then
                while autorollabilitybanner do task.wait()
                    local success, err = pcall(function()
                        if not player.PlayerGui.UI.Enabled then return end
                        if not initialload then
                            currentcframe = humanoidRootPart.CFrame
                            task.wait(.1)
                            while autorollabilitybanner and not player.PlayerGui.DialogueGUI.Enabled do task.wait()
                                humanoidRootPart.CFrame = workspace.NPCS["Ability Banner"].HumanoidRootPart.CFrame
                                task.wait(.1)
                                fireproximityprompt(workspace.NPCS["Ability Banner"].HumanoidRootPart.Attachment.Interaction)
                                if player.PlayerGui.DialogueGUI.Enabled then
                                    task.wait(.5)
                                    break
                                end
                            end
                            if player.PlayerGui.DialogueGUI.Enabled or player.PlayerGui.UI.Gameplay.Banner.Visible then
                                humanoidRootPart.CFrame = currentcframe
                                initialload = true
                            end
                            while player.PlayerGui.DialogueGUI.Enabled do task.wait()
                                while player.PlayerGui.DialogueGUI.Frame.ResponseFrame.Page.Visible and player.PlayerGui.DialogueGUI.Frame.ResponseFrame.Page.ResponseIMG.ResponseTXT.Text:lower() == "i would like to access the ability banner" do task.wait()
                                    press(player.PlayerGui.DialogueGUI.Frame.ResponseFrame.Page.ResponseIMG.ResponseTXT)
                                    task.wait(.1)
                                end
                            end
                            if player.PlayerGui.DialogueGUI.Enabled or player.PlayerGui.UI.Gameplay.Banner.Visible then
                                humanoidRootPart.CFrame = currentcframe
                                initialload = true
                            end
                        end
                        if player.PlayerGui.UI.Gameplay.Banner.Visible and not player.PlayerGui.UI.Prompt.Visible then
                            local text = player.PlayerGui.UI.Gameplay.Banner.Buy.Ten.Currency.ContentText
                            local number = stringToNumber(string.match(text, "%d+"))
                            if player.Data.Currency.Value > number then
                                press(player.PlayerGui.UI.Gameplay.Banner.Buy.Ten)
                                task.wait(.1)
                            end
                        elseif not player.PlayerGui.UI.Gameplay.Banner.Visible then
                            player.PlayerGui.UI.Gameplay.Banner.Visible = true
                        end
                        if player.PlayerGui.UI.Prompt.Visible then
                            if player.PlayerGui.UI.Prompt.Frame.DescriptionFrame.Description.Text:lower() == "choose a currency to buy pulls with" or player.PlayerGui.UI.Prompt.Frame.Label.Text:lower() == "you pulled the following items" then
                                for _,v in pairs(player.PlayerGui.UI.Prompt.Frame.Buttons:GetDescendants()) do
                                    if v:IsA("TextLabel") and (v.ContentText:lower() == "10000 us" or v.ContentText:lower() == "ok") then
                                        press(v.Parent)
                                        task.wait(.1)
                                        break
                                    end
                                end
                            end
                        end
                        while not player.PlayerGui.UI.Enabled do 
                            task.wait()
                        end
                    end)
                    if not success then warn(err) end
                end
            end
        end
    }, "AutoRollAbilityBanner")

    sections.miscautosright:Header({
        Text = "Misc Auto Settings"
    })

    sections.miscautosright:Label({
        Text = "Ascension Limit before switch stand"
    })

    sections.miscautosright:Slider({
        Name = "",
        Default = 200,
        Minimum = 1,
        Maximum = 10000,
        DisplayMethod = "Ascensions",
        Precision = 0,
        Callback = function(t)
            ascensionlimit = t
        end
    }, "AscensionLimitBeforeSwitch")

    sections.miscautosleft:Toggle({
        Name = "Auto Swap Stand on Ascension Limit",
        Default = false,
        Callback = function(state)
            autoswapascension = state
            if autoswapascension and game.PlaceId ~= 5130598377 and game.PlaceId ~= 8008202756 then

                local ascensionCheckCount = 0
                local startTime = os.time()

                while autoswapascension do task.wait()

                    local success, err = pcall(function()
                        local data = player.Data
                        local ability = data.Ability
                        local standability = ability:GetAttribute("AbilityName")

                        if not player.PlayerGui.UI.Gameplay.Character.Info:FindFirstChild("CombatTag").Visible then
                            local Inventory = ReplicatedStorage.ReplicatedModules.KnitPackage.Knit.Services.InventoryService.RF.GetItems:InvokeServer("AbilityInventory")

                            for _, x in pairs(Inventory) do
                                task.wait(1)
                                if ability:GetAttribute("AscensionRank") >= ascensionlimit then
                                    ascensionCheckCount += 1

                                    if ascensionCheckCount > 60 and os.time() - startTime <= 90 then
                                        autoswapascension = false
                                        warn("Changed Stands over 60 times within 90 seconds. Auto-swap stopped.")
                                        break
                                    end

                                    if os.time() - startTime > 90 then
                                        ascensionCheckCount = 0
                                        startTime = os.time()
                                    end

                                    ReplicatedStorage.ReplicatedModules.KnitPackage.Knit.Services.InventoryService.RE.AbilityInventory:FireServer({
                                        ["Equip"] = true,
                                        ["UUID"] = x._UUID,
                                        ["ItemId"] = x._ItemId
                                    })
                                end
                            end
                        end
                    end)

                    if not success then warn(err) end
                end
            end
        end
    }, "AutoSwapStandOnAscensionLimit")

    sections.miscautosleft:Slider({
        Name = "Auto Ascend Delay",
        Default = 1,
        Minimum = 0,
        Maximum = 20,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(t)
            autoascenddelay = t
        end
    }, "AutoAscendDelay")

    sections.miscautosleft:Toggle({
        Name = "Auto Ascend",
        Default = false,
        Callback = function(state)
            autoascend = state
            if autoascend and game.PlaceId ~= 5130598377 and game.PlaceId ~= 8008202756 then
                local abilityUI = player.PlayerGui.UI.Menus.Ability.Tabs.Ascensions.AscendSection.Requirements
                local levelLabel = abilityUI.Level.AmountLabel
                local ucoinsLabel = abilityUI.UCoins.AmountLabel
                local ability = player.Data.Ability
                
                while autoascend do task.wait()
                    local success, err = pcall(function()
                        local levelCleanText = stripTags(levelLabel.Text)
                        levelCleanText = trim(levelCleanText)
                    
                        local currentLevel, maxLevel = levelCleanText:match("(%d+)%s*%/%s*(%d+)")
                        currentLevel, maxLevel = tonumber(currentLevel), tonumber(maxLevel)
                        
                        local ucoinsCleanText = stripTags(ucoinsLabel.Text)
                        ucoinsCleanText = trim(ucoinsCleanText)
                    
                        local currentUCoins, maxUCoins = ucoinsCleanText:match("(%d+)%s*%/%s*(%d+)")
                        currentUCoins, maxUCoins = tonumber(currentUCoins), tonumber(maxUCoins)
                        
                        if currentLevel and maxLevel and currentUCoins and maxUCoins then
                            if currentLevel == maxLevel and currentUCoins >= maxUCoins then
                                ReplicatedStorage.ReplicatedModules.KnitPackage.Knit.Services.LevelService.RF.AscendAbility:InvokeServer(ability.Value)
                            end
                        else
                            warn("Failed to extract values - Level: " .. (currentLevel or "nil") .. "/" .. (maxLevel or "nil"))
                            warn("Failed to extract UCoins - Current: " .. (currentUCoins or "nil") .. "/" .. (maxUCoins or "nil"))
                        end
                        
                        task.wait(autoascenddelay)
                    end)
                    if not success then warn(err) end
                end
            end
        end
    }, "AutoAscend")

    local stats_table = {
        "Attack", "Defense",

        "Health", "Special"
    }

    local statdropdown = sections.miscautosright:Dropdown({
        Name = "Stat to Auto Invest",
        Multi = false,
        Required = true,
        Options = stats_table,
        Default = nil,
        Callback = function(Value)
            selectedstat = Value
        end,
    }, "StattoAutoInvest")

    sections.miscautosright:Slider({
        Name = "Auto Stat Delay",
        Default = 0.5,
        Minimum = 0,
        Maximum = 5,
        DisplayMethod = "Value",
        Precision = 1,
        Callback = function(t)
            autostatdelay = t
        end
    }, "AutoStatDelay")

    sections.miscautosleft:Divider()

    sections.miscautosleft:Header({
        Text = "Auto Skills"
    })
    
    sections.miscautosleft:Slider({
        Name = "Skill Spam Delay",
        Default = 1.5,
        Minimum = 0,
        Maximum = 5,
        DisplayMethod = "Value",
        Precision = 1,
        Callback = function(t)
            skillspamdelay = t
        end
    }, "skillspamdelay")

    sections.miscautosleft:Toggle({
        Name = "Auto Spam All Skills",
        Default = false,
        Callback = function(state)
            spamallskills = state

            if spamallskills then
                while spamallskills do task.wait()
                    local success, err = pcall(function()
                        local keys = {Enum.KeyCode.E, Enum.KeyCode.R, Enum.KeyCode.Y, Enum.KeyCode.Y, Enum.KeyCode.X}
        
                        for _, key in ipairs(keys) do
                            vim:SendKeyEvent(true, key, false, game)
                            task.wait(.1)
                            vim:SendKeyEvent(false, key, false, game)
                        end
                        
                        task.wait(skillspamdelay)
                    end)
                    if not success then warn(err) end
                end
            end
        end
    }, "AutoSpamAllSkills")

    local Skills_Table = {"E", "R", "T", "Y", "G", "H", "Z", "X", "C", "P"}
    local SelectedSkills = {}
    
    local skillsdropdown = sections.miscautosleft:Dropdown({
        Name = "Select Skills to Spam",
        Search = true,
        Multi = true,
        Required = false,
        Options = Skills_Table,
        Default = nil,
        Callback = function(selectedValues)
            SelectedSkills = {}
            for skill, isSelected in pairs(selectedValues) do
                if isSelected then
                    table.insert(SelectedSkills, skill)
                end
            end
        end,
    }, "SelectedSkillstoSpam")
    
    sections.miscautosleft:Toggle({
        Name = "Auto Spam Chosen Skills",
        Default = false,
        Callback = function(state)
            spamallskills = state
            
            if spamallskills then
                task.spawn(function()
                    while spamallskills do task.wait()
                        local success, err = pcall(function()
                            for _, skillKey in ipairs(SelectedSkills) do
                                vim:SendKeyEvent(true, Enum.KeyCode[skillKey], false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(false, Enum.KeyCode[skillKey], false, game)
                                task.wait(skillspamdelay)
                            end
                        end)
                        if not success then
                            warn(err)
                        end
                    end
                end)
            end
        end,
    })    

    sections.miscautosleft:Label({
        Text = "To see the visual change go out of stats and back in"
    })

    sections.miscautosleft:Toggle({
        Name = "Auto Stat Selected",
        Default = false,
        Callback = function(state)
            autostat = state
            if autostat and game.PlaceId ~= 5130598377 and game.PlaceId ~= 8008202756 then
                while autostat do task.wait()
                    local success, error = pcall(function()
                        local ability = player.Data.Ability
                        if selectedstat == "Attack" then
                            ReplicatedStorage.ReplicatedModules.KnitPackage.Knit.Services.StatService.RF.ApplyStats:InvokeServer(ability.Value, {["Special"] = 0, ["Defense"] = 0, ["Health"] = 0, ["Attack"] = 1})
                        elseif selectedstat == "Defense" then
                            ReplicatedStorage.ReplicatedModules.KnitPackage.Knit.Services.StatService.RF.ApplyStats:InvokeServer(ability, {["Special"] = 0, ["Defense"] = 1, ["Health"] = 0, ["Attack"] = 0})
                        elseif selectedstat == "Health" then
                            ReplicatedStorage.ReplicatedModules.KnitPackage.Knit.Services.StatService.RF.ApplyStats:InvokeServer(ability, {["Special"] = 0, ["Defense"] = 0, ["Health"] = 1, ["Attack"] = 0})
                        elseif selectedstat == "Special" then
                            ReplicatedStorage.ReplicatedModules.KnitPackage.Knit.Services.StatService.RF.ApplyStats:InvokeServer(ability, {["Special"] = 1, ["Defense"] = 0, ["Health"] = 0, ["Attack"] = 0})
                        end
                        task.wait(autostatdelay)
                    end)
                    if not success then warn(err) end
                end
            end
        end
    }, "AutoStat")

    local stands_table = {
        -- Original Stands
        "Star Platinum",
        "Magician's Red",
        "Silver Chariot",
        "Anubis",
        "Shadow Dio",
        "Killer Queen",
        "Crazy Diamond",
        "The Hand",
        "Gold Experience",
        "King Crimson",
        "Sticky Fingers",
        "Whitesnake",
        "Weather Report",
        "D4C",
        "Dirty Deeds Done Dirt Cheap",
        "Dirty Deeds Done Dirt Cheap (D4C)",
        "The World High Voltage",
        "Tusk Act 1",
        "Steel Spin",

        -- Additional Stands
        "Star Platinum: The World",
        "Gold Experience Requiem",
        "The World",
        "C-Moon",
        "Made in Heaven",
        "The World: Over Heaven",
        "D4C: Love Train",
        "Tusk Act 2",
        "Tusk Act 3",
        "Tusk Act 4",
        "Planet // Shaper",
        "Sol",
        "Nocturnus",
        "Shadow The World Requiem",
        "Star Platinum Requiem",
        "Locke",
        "XENO",

        -- Specs
        "Standless",
        "Dawn",
        "Reaper",
        "Sans",
        "Asgore",
        "Broly",
        "Killua",
        "Yasuo",
        "Yone",
        "Mero Mero No Mi",
        "Gomu Gomu No Mi",
        "Hito Model: Nika",
        "Ope Ope No Mi",
        "Suna Suna No Mi",
        "Gryphon",
        "Kuro Claws",
        "Anshen",
        "Brickbattle",
        "Umbra",
        "Vampire",
        "Kars",
        "Jonathan Hamon",
        "Joseph Hamon",
        "Base Hamon",
        "Soul Survivor",
        "Dragon Knight",
        "Shadow",
        "Chrono Warden",
        "Casey",
        "The Vessel",
        "King Of Curses",
        "Sorcerer Killer",
        "The Strongest",
        "Cursed Child",

        -- Event
        "Candy Cutlass",
        "Shinigami"
    }

    local allTraits = {}

    pcall(function()
        if game.PlaceId ~= 5130598377 and game.PlaceId ~= 8008202756 then    
            local TraitHandler = require(ReplicatedStorage.ReplicatedModules.PVEPackage.TraitHandler)
            local Knit = require(ReplicatedStorage.ReplicatedModules.KnitPackage.Knit)

            function getTraits()
                for traitName, traitData in pairs(TraitHandler.Traits) do
                    local hexPrefix = traitData.HexPrefix
                    table.insert(allTraits, hexPrefix)
                    table.insert(allTraits, traitName)
                end
            end

            currentTrait = ""

            oldGetTraitData = TraitHandler.GetTraitData
            TraitHandler.GetTraitData = function(...)
                local args = {...}
                currentTrait = args[1]
                return oldGetTraitData(...)
            end

            getTraits()
        end
    end)

    sections.miscautosright:Divider()

    sections.miscautosright:Header({
        Text = "Auto Trait"
    })

    local SelectedTraits = {}

    local traitsdropdown = sections.miscautosright:Dropdown({
        Name = "Select Traits Roll For",
        Search = true,
        Multi = true,
        Required = false,
        Options = allTraits,
        Default = nil,
        Callback = function(selectedValues)
            SelectedTraits = {}
            for traitName, isSelected in pairs(selectedValues) do
                if isSelected then
                    table.insert(SelectedTraits, traitName)
                end
            end
        end,
    }, "Select Traits Roll For")

    sections.miscautosright:Button({
        Name = "Clear Traits Selection",
        Callback = function()
            traitsdropdown:UpdateSelection({nil})
        end,
    })

    -- local pings_table = {
    --     "Below 60 Ping", -- .07
    --     "Below 90 Ping", -- .1
    --     "Below 140 Ping", -- .15
    --     "Below 190 Ping", -- .2
    --     "Below 240 Ping", -- .25
    --     "Below 290 Ping"  -- .3
    -- }

    -- local ping_to_wait_time = {
    --     ["Below 60 Ping"] = 0.07,
    --     ["Below 90 Ping"] = 0.1,
    --     ["Below 140 Ping"] = 0.15,
    --     ["Below 190 Ping"] = 0.2,
    --     ["Below 240 Ping"] = 0.25,
    --     ["Below 290 Ping"] = 0.3
    -- }

    -- local traitsdropdownping = sections.miscautosright:Dropdown({
    --     Name = "Auto Trait Ping",
    --     Search = true,
    --     Multi = false,
    --     Required = false,
    --     Options = pings_table,
    --     Default = "Below 190 Ping",
    --     Callback = function(SelectedValue)
    --         selectedping = SelectedValue
    --     end,
    -- }, "Auto Trait Ping")

    sections.miscautosright:Toggle({
        Name = "Auto Trait",
        Default = false,
        Callback = function(state)
            autotrait = state
            if autotrait and game.PlaceId ~= 5130598377 and game.PlaceId ~= 8008202756 then
                local TraitService = Knit.GetService("TraitService")
                if TraitService then
                    while autotrait do
                        local shouldStop = false

                        for _, selectedTrait in ipairs(SelectedTraits) do
                            if currentTrait == selectedTrait then
                                warn("Trait Found: " .. selectedTrait)
                                shouldStop = true
                                break
                            end
                        end

                        if shouldStop then
                            break
                        end

                        TraitService:PickTrait(1)

                        -- local wait_time = ping_to_wait_time[selectedping] or 0.2
                        pingwait()

                        for _, selectedTrait in ipairs(SelectedTraits) do
                            if currentTrait == selectedTrait then
                                warn("Trait Found: " .. selectedTrait)
                                shouldStop = true
                                break
                            end
                        end

                        if shouldStop then
                            break
                        end
                    end
                end
            end
        end
    }, "Auto Trait")

    sections.miscautosright:Toggle({
        Name = "Auto Discard all Trait Hands",
        Default = false,
        Callback = function(state)
            autodiscard = state
            if autodiscard and game.PlaceId ~= 5130598377 and game.PlaceId ~= 8008202756 then
                while autodiscard do task.wait()
                    pcall(function()
                        for _ = 1,10 do
                            ReplicatedStorage.ReplicatedModules.KnitPackage.Knit.Services.TraitService.RF.DiscardTraits:InvokeServer()
                        end
                    end)
                end
            end
        end
    }, "AutoDiscardAllTraitHands")

    local NPCs_Table = {}

    if game.PlaceId ~= 5130598377 and game.PlaceId ~= 8008202756 then
        for i,v in pairs(workspace.NPCS:GetChildren()) do
            if v:IsA("Model")  and not table.find(NPCs_Table,v.Name) then
                table.insert(NPCs_Table,v.Name)
            end
        end
    end

    sections.teleportsleft:Header({
        Text = "Npc Teleports"
    })

    local NPCSDropDown = sections.teleportsleft:Dropdown({
        Name = "Npc to Teleport to",
        Search = true,
        Multi = false,
        Required = false,
        Default = nil,
        Options = NPCs_Table,
        Callback = function(t)
            npctp = t
        end
    }, "NPCtoTPto")

    sections.teleportsleft:Button({
        Name = "Teleport to Selected NPC",
        Callback = function()
            humanoidRootPart.CFrame = workspace.NPCS[npctp]:GetPivot()
        end
    })

    sections.teleportsleft:Button({
        Name = "Refresh Npcs List",
        Callback = function()
            local NPCs_Table = {}
            for _, v in pairs(workspace.Living:GetChildren()) do
                if v:IsA("Model")  and not table.find(NPCs_Table,v.Name) then
                    table.insert(NPCs_Table, v.Name)
                end
            end
            NPCSDropDown:Refresh(NPCs_Table)
        end,
    })

    local function createBaseplate(position)
        local baseplate = Instance.new("Part")
        baseplate.Size = Vector3.new(10, 1, 10)
        baseplate.Position = position + Vector3.new(0, -20, 0)
        baseplate.Anchored = true
        baseplate.CanCollide = true
        baseplate.BrickColor = BrickColor.new("Bright blue")
        baseplate.Parent = workspace
    end

    sections.teleportsleft:Button({
        Name = "Teleport to Black Market",
        Callback = function()
            if game.PlaceId ~= 5130598377 and game.PlaceId ~= 8008202756 then
                if workspace.NPCS:FindFirstChild("Black Market") then
                    humanoidRootPart.CFrame = workspace.NPCS["Black Market"]:GetPivot() * CFrame.new(0,5,0)
                    createBaseplate(humanoidRootPart.Position)
                else
                    StarterGui:SetCore("SendNotification", {
                        Title = "North Hub Notifier";
                        Text = "Black Market Not Spawned!";
                        Duration = 3;
                    })
                end
            end
        end
    })

    sections.teleportsleft:Divider()

    sections.teleportsleft:Header({
        Text = "Area Teleports"
    })

    local areas_table = {
        {Name = "Central City Spawn", CFrame = CFrame.new(2013, 974, 305)},
        {Name = "Desert (JJK Area)", CFrame = CFrame.new(1928, 944, -1367)},
        {Name = "Realm of the Forgotten", CFrame = CFrame.new(19291, 912, 198)},
        {Name = "Floating Village", CFrame = CFrame.new(1188, 1009, -321)},
        {Name = "Soccer Field", CFrame = CFrame.new(1980, 976, -399)},
        {Name = "Infernal Cairn", CFrame = CFrame.new(2777, 1021, -749)},
        {Name = "Subway", CFrame = CFrame.new(-16332, 7, -5967)},
        {Name = "Shibuya", CFrame = CFrame.new(280, 5, -9928)},
        {Name = "Colloseum", CFrame = CFrame.new(1027, 934, 3090)},
        {Name = "Port", CFrame = CFrame.new(2120, 922, 995)},
        {Name = "JoeStar Mansion", CFrame = CFrame.new(2717, 919, 5332)},
        {Name = "Marine Ford", CFrame = CFrame.new(-24618, 1660, 784)},
        {Name = "Orange Town", CFrame = CFrame.new(-2920, 919, 15168)},
        {Name = "Punk Hazard", CFrame = CFrame.new(-69014, 3350, 19820)},
        {Name = "Knights Cavern", CFrame = CFrame.new(3526, 938, -424)},
        {Name = "Valentine Island", CFrame = CFrame.new(-5118, 190, -246)},
        {Name = "Devil's Palm", CFrame = CFrame.new(1230, 909, -2012)},
        {Name = "Devil's Palm (Safe Area)", CFrame = CFrame.new(1529, 960, -1997)},
        {Name = "Alabasta", CFrame = CFrame.new(2006, 917, -2334)},
        {Name = "Central Wilds", CFrame = CFrame.new(2441, 991, -529)},
        {Name = "Skate Park", CFrame = CFrame.new(2426, 998, -212)},
        {Name = "Backrooms", CFrame = CFrame.new(926, 80, -5942)},
        {Name = "???", CFrame = CFrame.new(582, 917, -2010)},
        {Name = "Kame House", CFrame = CFrame.new(2540, 917, 1831)},
        {Name = "Space", CFrame = CFrame.new(1868, 4308, -182)},
    }
    
    local areaNames = {}
    for _, area in ipairs(areas_table) do
        table.insert(areaNames, area.Name)
    end
    
    local areasdropdown = sections.teleportsleft:Dropdown({
        Name = "Area to teleport to",
        Search = true,
        Multi = false,
        Required = false,
        Options = areaNames,
        Default = nil,
        Callback = function(SelectedValue)
            selectedarea = SelectedValue
        end,
    }, "Area to teleport to")

    sections.teleportsleft:Button({
        Name = "Teleport to Selected Area",
        Callback = function()
            if selectedarea then
                for _, area in ipairs(areas_table) do
                    if area.Name == selectedarea then
                        humanoidRootPart.CFrame = area.CFrame
                        break
                    end
                end
            end
        end
    })

    sections.teleportsright:Header({
        Text = "Boss Spawn Teleports"
    })

    local boss_spawns_table = {
        {Name = "Sukuna Spawn", CFrame = CFrame.new(-84, 5, -9780)},
        {Name = "Mahoroga Spawn", CFrame = CFrame.new(-69, 5, -10250)},
        {Name = "Toji Spawn", CFrame = CFrame.new(65, 6, -10018)},
        {Name = "Yuji Spawn", CFrame = CFrame.new(-147, 5, -9989)},
        {Name = "Gojo Spawn", CFrame = CFrame.new(-16733, 7, -5966)},
        {Name = "Luffy Spawn", CFrame = CFrame.new(-3266, 919, 14879)},
        {Name = "Shanks Spawn", CFrame = CFrame.new(-3477, 919, 15258)},
        {Name = "Bara Spawn", CFrame = CFrame.new(-3151, 919, 15235)},
        {Name = "Diavolo Spawn", CFrame = CFrame.new(1001, 934, 2874)},
        {Name = "Law Spawn", CFrame = CFrame.new(-69063, 3360, 19958)},
        {Name = "Whitebeard Spawn", CFrame = CFrame.new(-24401, 1577, 496)},
        {Name = "Kars Spawn", CFrame = CFrame.new(593, 1015, -416)},
        {Name = "Crocodile Spawn", CFrame = CFrame.new(2171, 913, -2525)},
    }

    local bossspawnnames = {}
    for _, bossspawns in ipairs(boss_spawns_table) do
        table.insert(bossspawnnames, bossspawns.Name)
    end

    local bossspawndropdown = sections.teleportsright:Dropdown({
        Name = "Boss Spawn to teleport to",
        Search = true,
        Multi = false,
        Required = false,
        Options = bossspawnnames,
        Default = nil,
        Callback = function(SelectedValue)
            selectedbossspawn = SelectedValue
        end,
    }, "BossSpawntoteleportto")

    sections.teleportsright:Button({
        Name = "Teleport to Selected Boss Spawn",
        Callback = function()
            if selectedbossspawn then
                for _, bosser in ipairs(boss_spawns_table) do
                    if bosser.Name == selectedbossspawn then
                        humanoidRootPart.CFrame = bosser.CFrame
                        break
                    end
                end
            end
        end
    })

    sections.teleportsright:Divider()

    sections.teleportsright:Header({
        Text = "Black Market Spawn Teleports"
    })

    local bm_spawns_table = {
        {Name = "First BM Spawn", CFrame = CFrame.new(2452, 982, 131)},
        {Name = "Second BM Spawn", CFrame = CFrame.new(2035, 922, 1063)},
        {Name = "Third BM Spawn", CFrame = CFrame.new(957, 1009, -452)},
        {Name = "Fourth BM Spawn", CFrame = CFrame.new(2039, 1063, -779)},
    }

    local bmNames = {}
    for _, bm in ipairs(bm_spawns_table) do
        table.insert(bmNames, bm.Name)
    end

    local bmdropdown = sections.teleportsright:Dropdown({
        Name = "BM Spawn to teleport to",
        Search = true,
        Multi = false,
        Required = false,
        Options = bmNames,
        Default = nil,
        Callback = function(SelectedValue)
            selectedbm = SelectedValue
        end,
    }, "BM Spawn to teleport to")

    sections.teleportsright:Button({
        Name = "Teleport to Selected BM Spawn",
        Callback = function()
            if selectedbm then
                for _, bm in ipairs(bm_spawns_table) do
                    if bm.Name == selectedbm then
                        humanoidRootPart.CFrame = bm.CFrame
                        break
                    end
                end
            end
        end
    })

    -- misc:Button({
    --     Name = "Join random Private Server",
    --     Callback = function()
    --         if game.PlaceId == 5130598377 then
    --             local psremote = ReplicatedStorage.ReplicatedModules.KnitPackage.Knit.Services.PrivateCodeService.RF.JoinLobby


    --             local letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    --             local byte = string.byte
    --             local char = string.char
                
    --             local function generateRandomCode()
    --                 local code = {
    --                     char(byte(letters, math.random(1, 26))),
    --                     char(byte(letters, math.random(1, 26))),
    --                     char(byte(letters, math.random(1, 26))),
    --                     char(byte(letters, math.random(1, 26))),
    --                     char(byte(letters, math.random(1, 26))),
    --                     char(byte(letters, math.random(1, 26))),
    --                     char(byte(letters, math.random(1, 26))),
    --                     char(byte(letters, math.random(1, 26))),
    --                     char(byte(letters, math.random(1, 26))),
    --                     char(byte(letters, math.random(1, 26)))
    --                 }
                    
    --                 local pos1, pos2 = math.random(1, 10), math.random(1, 10)
    --                 while pos2 == pos1 do
    --                     pos2 = math.random(1, 10)
    --                 end
    --                 code[pos1] = tostring(math.random(1, 9))
    --                 code[pos2] = tostring(math.random(1, 9))
                    
    --                 return table.concat(code)
    --             end

    --             local function sendRequests()
    --                 while true do
    --                     local args = {
    --                         [1] = generateRandomCode()
    --                     }
    --                     psremote:InvokeServer(unpack(args))
    --                 end
    --             end

    --             for i = 1, 25 do
    --                 task.spawn(sendRequests)
    --             end
    --         else
    --             StarterGui:SetCore("SendNotification", {
    --                 Title = "North Hub Notifier";
    --                 Text = "You Need to be in the Menu";
    --                 Duration = 3;
    --             })
    --         end
    --     end
    -- })

    sections.miscleft:Toggle({
        Name = "BM ESP (Name Tag)",
        Default = false,
        Callback = function(state)
            bmesp = state
            if bmesp and game.PlaceId ~= 5130598377 and game.PlaceId ~= 8008202756 then
                while bmesp do task.wait()
                    local success, err = pcall(function()
                        local npc = workspace.NPCS:FindFirstChild("Black Market")

                        if npc and npc:FindFirstChild("Head") and not npc.Head:FindFirstChildOfClass("BillboardGui") then
                            local billboardGui = Instance.new("BillboardGui")
                            billboardGui.Adornee = npc.Head
                            billboardGui.Size = UDim2.new(0, 150, 0, 50)
                            billboardGui.StudsOffset = Vector3.new(0, 2, 0)
                            billboardGui.AlwaysOnTop = true
                            billboardGui.MaxDistance = 100000000

                            local textLabel = Instance.new("TextLabel")
                            textLabel.Size = UDim2.new(1, 0, 1, 0)
                            textLabel.BackgroundTransparency = 1
                            textLabel.Text = "Black Market"
                            textLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
                            textLabel.TextStrokeTransparency = 0.5
                            textLabel.TextScaled = true

                            textLabel.Parent = billboardGui

                            billboardGui.Parent = npc.Head
                        end
                    end)
                    if not success then warn(err) end
                end
            end
        end
    }, "BlackMarketEsp")

    sections.miscleft:Button({
        Name = "Reset Character",
        Callback = function()
            if game.PlaceId ~= 5130598377 and game.PlaceId ~= 8008202756 then
                humanoid.Health = 0
            end
        end
    })

    sections.miscleft:Divider()

    sections.miscleft:Header({
        Text = "Fps Boost"
    })

    local fpsboosterexecuted = false
    local descendantAddedConnection

    sections.miscleft:Toggle({
        Name = "FPS Booster",
        Default = false,
        Callback = function(state)
            boostfps = state
            while boostfps do task.wait(2)
                if not fpsboosterexecuted then
                    local Terrain = workspace:FindFirstChildOfClass('Terrain')
                    Terrain.WaterWaveSize = 0
                    Terrain.WaterWaveSpeed = 0
                    Terrain.WaterReflectance = 0
                    Terrain.WaterTransparency = 0
                    local Lighting = game.Lighting
                    Lighting.GlobalShadows = false
                    Lighting.FogEnd = 9e9
                    local userSettings = UserSettings():GetService("UserGameSettings")
                    userSettings.GraphicsQualityLevel = Enum.SavedQualitySetting.QualityLevel1

                    for i,v in pairs(game:GetDescendants()) do
                        if v:IsA("Part") or v:IsA("UnionOperation") or v:IsA("MeshPart") or v:IsA("CornerWedgePart") or v:IsA("TrussPart") then
                            v.Material = "Plastic"
                            v.Reflectance = 0
                        elseif v:IsA("Decal") then
                            v.Transparency = 1
                        elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
                            v.Lifetime = NumberRange.new(0)
                        elseif v:IsA("Explosion") then
                            v.BlastPressure = 1
                            v.BlastRadius = 1
                        end
                    end

                    for i,v in pairs(Lighting:GetDescendants()) do
                        if v:IsA("BlurEffect") or v:IsA("SunRaysEffect") or v:IsA("ColorCorrectionEffect") or v:IsA("BloomEffect") or v:IsA("DepthOfFieldEffect") then
                            v.Enabled = false
                        end
                    end

                    descendantAddedConnection = workspace.DescendantAdded:Connect(function(child)
                        task.spawn(function()
                            if child:IsA('ForceField') then
                                RunService.Heartbeat:Wait()
                                child:Destroy()
                            elseif child:IsA('Sparkles') then
                                RunService.Heartbeat:Wait()
                                child:Destroy()
                            elseif child:IsA('Smoke') or child:IsA('Fire') then
                                RunService.Heartbeat:Wait()
                                child:Destroy()
                            end
                        end)
                    end)
    
                    fpsboosterexecuted = true
                end
                if not boostfps then
                    if descendantAddedConnection then
                        descendantAddedConnection:Disconnect()
                    end
                    fpsboosterexecuted = false
                end
            end
        end
    }, "BoostFps")

    sections.miscleft:Label({
        Text = "Disabling 3D Rendering makes ur screen go white and doesn't effect autofarming"
    })

    local renderdisabled = false

    sections.miscleft:Toggle({
        Name = "Disable 3D Rendering",
        Default = false,
        Callback = function(state)
            disablerendering = state
            while disablerendering do task.wait(.5)
                if not renderdisabled then
                    RunService:Set3dRenderingEnabled(false)
                    renderdisabled = true
                end
                if not disablerendering then
                    renderdisabled = false
                    RunService:Set3dRenderingEnabled(true)
                end
            end
        end
    }, "Disable3dRendering")

    sections.miscleft:Toggle({
        Name = "Hide Name (Visual Only)",
        Default = false,
        Callback = function(state)
            hidename = state
            if hidename and game.PlaceId ~= 5130598377 and game.PlaceId ~= 8008202756 then
                while hidename do task.wait()
                    hidingname = true
                    updateLabelText()

                    label:GetPropertyChangedSignal("Text"):Connect(updateLabelText)
                    if label2 then
                        label2:GetPropertyChangedSignal("Text"):Connect(updateLabelText)
                    end
                end
            else
                hidingname = false
            end
        end
    }, "HideName")

    sections.menuleft:Header({
        Text = "Important Menus"
    })

    sections.menuleft:Button({
        Name = "Open Ability Banner",
        Callback = function()
            local gameplay = player.PlayerGui.UI.Gameplay
            gameplay.Banner.Visible = true
        end
    })

    sections.menuleft:Button({
        Name = "Open Crafting Menu",
        Callback = function()
            local gameplay = player.PlayerGui.UI.Gameplay
            gameplay.Crafting.Visible = true
        end
    })

    sections.menuleft:Button({
        Name = "Open Trait Reroll Menu",
        Callback = function()
            local gameplay = player.PlayerGui.UI.Gameplay
            gameplay.TraitReroll.Visible = true
        end
    })

    sections.menuleft:Button({
        Name = "Open Menu",
        Callback = function()
            local playerGui = player.PlayerGui
            local UI = playerGui.UI
            local menus = UI.Menus
            local buttons = UI.Buttons
            local gameplay = UI.Gameplay
            
            menus.Menu.Visible = true
            menus.ServerInfo.Visible = false
            menus.ServerInfo.Visible = true
            menus.Multipliers.Visible = false
            menus.Multipliers.Visible = true
            buttons.Gameplay.Visible = false
            gameplay.Visible = false
            menus.Visible = true
            menus.Currencies.Visible = true
            menus.BonusProducts.Visible = true
        end
    })

    sections.menuright:Header({
        Text = "To open any of the below you must click Open Menu First"
    })

    sections.menuright:Button({
        Name = "Open Ability Menu",
        Callback = function()
            local ui = player.PlayerGui.UI
            local menus = ui.Menus
            local content = menus.Ability.Tabs.Trait.TraitSection.CurrentTrait.Content
            local selfnoti = ui.Gameplay.SelfNotification
            
            menus.Menu.Visible = false
            menus.BonusProducts.Visible = false
            menus.ServerInfo.Visible = false
            menus.ServerInfo.Visible = true
            menus.Multipliers.Visible = false
            menus.Multipliers.Visible = true
            menus.Ability.Visible = true
            menus.Currencies.Visible = false
            
            content.ModifiersTitle.Visible = false
            content.Modifiers.Visible = false
            content.ModifiersTitle.Visible = true
            content.Modifiers.Visible = true
            
            selfnoti.Visible = true
            selfnoti.Visible = false
        end
    })

    sections.menuright:Button({
        Name = "Open Inventory",
        Callback = function()
            local ui = player.PlayerGui.UI
            local menus = ui.Menus
            menus.Menu.Visible = false
            menus.Inventory.Visible = true
        end
    })

    sections.menuright:Button({
        Name = "Open Shop",
        Callback = function()
            local ui = player.PlayerGui.UI
            local menus = ui.Menus
            menus.Menu.Visible = false
            menus.Products.Visible = true
        end
    })

    sections.menuright:Button({
        Name = "Open Trade",
        Callback = function()
            local ui = player.PlayerGui.UI
            local menus = ui.Menus
            menus.Menu.Visible = false
            menus.TradeList.Visible = true
        end
    })

    sections.menuright:Button({
        Name = "Open Quests",
        Callback = function()
            local ui = player.PlayerGui.UI
            local menus = ui.Menus
            menus.Menu.Visible = false
            menus.Quests.Visible = true
        end
    })

    sections.menuright:Button({
        Name = "Open Achievements",
        Callback = function()
            local ui = player.PlayerGui.UI
            local menus = ui.Menus
            menus.Menu.Visible = false
            menus.Achievements.Visible = true
        end
    })

    sections.menuright:Button({
        Name = "Open Rewards",
        Callback = function()
            local ui = player.PlayerGui.UI
            local menus = ui.Menus
            menus.Menu.Visible = false
            menus.Rewards.Visible = true
        end
    })

    sections.menuleft:Button({
        Name = "TP to Menu",
        Callback = function()
            TeleportService:Teleport(5130598377, player)
        end
    })

    sections.riskyright:Header({
        Text = "Risky Settings & Stats"
    })

    pcall(function()
        sections.riskyright:Label({
            Text = "Current UCoins:"
        })

        local UcoinsLabel = sections.riskyright:Label({
            Text = player.Data.UCoins.Value
        })
        
        sections.riskyright:Label({
            Text = "Current UShards:"
        })

        local UShardLabel = sections.riskyright:Label({
            Text = player.Data.Currency.Value
        })

        task.spawn(function()
            while true do task.wait(.1)
                if player:FindFirstChild("Data") then
                    UcoinsLabel:Refresh(player.Data.UCoins.Value)
                    UShardLabel:Refresh(player.Data.Currency.Value)
                else
                    task.wait()
                end
            end
        end)
    end)

    local Rarity_Table = {"Mythical", "Legendary", "Epic", "Rare", "Uncommon", "Common"}

    local raritylevelfarm = sections.riskyright:Dropdown({
        Name = "Select Rarity to Level Farm",
        Search = true,
        Multi = true,
        Required = false,
        Options = Rarity_Table,
        Default = nil,
        Callback = function(selectedValues)
            SelectedRarityDrop = {}
            for rarityName, isSelected in pairs(selectedValues) do
                if isSelected then
                    table.insert(SelectedRarityDrop, rarityName)
                end
            end
        end,
    }, "Select Rarity to Level")

    sections.riskyright:Button({
        Name = "Clear Rarity Selection",
        Callback = function()
            raritylevelfarm:UpdateSelection({})
        end
    })

    sections.riskyleft:Header({
        Text = "Risky Options"
    })

    sections.riskyleft:Toggle({
        Name = "Coin Burner",
        Default = false,
        Callback = function(state)
            burncoins = state
            while burncoins do task.wait()
                local args = {
                    [1] = 1
                }
                
                
                ReplicatedStorage:WaitForChild("ReplicatedModules"):WaitForChild("KnitPackage"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("StatService"):WaitForChild("RF"):WaitForChild("ResetStats"):InvokeServer(unpack(args))                
            end
        end
    },"CoinBurner")

    sections.riskyleft:Toggle({
        Name = "Level Farm",
        Default = false,
        Callback = function(state)
            levelfarm = state
            while levelfarm do
                task.wait()

                local RarityTable = {
                    Mythical = Color3.fromRGB(255, 85, 0),
                    Legendary = Color3.fromRGB(255, 150, 75),
                    Epic = Color3.fromRGB(175, 90, 255),
                    Rare = Color3.fromRGB(75, 150, 255),
                    Uncommon = Color3.fromRGB(125, 235, 150),
                    Common = Color3.fromRGB(225, 225, 225)
                }

                if #SelectedRarityDrop == 0 then
                    print("No rarities selected.")
                else
                    print("Processing selected rarities:")
                    for _, rarity in ipairs(SelectedRarityDrop) do
                        print(rarity)
                    end
                end

                for _, v in pairs(player.PlayerGui.UI.Menus["Black Market"].Frame.ShardConvert.Shards:GetDescendants()) do
                    if v:IsA("UIStroke") and v.Parent.Name == "Button" then
                        for _, selectedRarity in ipairs(SelectedRarityDrop) do
                            local rarityColor = RarityTable[selectedRarity]
                            if rarityColor and v.Color == rarityColor then
                                local amountText = tonumber(v.Parent.Amount.Text)
                                if amountText and amountText > 0 then
                                    local consumeArgs = {
                                        [1] = {
                                            [v.Parent.Parent.Name] = 10
                                        }
                                    }

                                    ReplicatedStorage:WaitForChild("ReplicatedModules"):WaitForChild("KnitPackage"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("LevelService"):WaitForChild("RF"):WaitForChild("ConsumeShardsForXP"):InvokeServer(unpack(consumeArgs))
                                end
                            end
                        end
                    end
                end
            end
        end
    },"OpLevelFarm")

    function HideScreen()
        local gui = Instance.new("ScreenGui")
        if syn and syn.protect_gui then
            syn.protect_gui(gui)
        elseif gethui then
            gui.Parent = gethui()
        else
            gui.Parent = coreGui
        end
    
        gui.IgnoreGuiInset = true
        gui.Name = "NorthHub"
    
        local frame = Instance.new("Frame")
        frame.Parent = gui
        frame.Size = UDim2.new(1, 0, 1, 0)
        frame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
        frame.BorderSizePixel = 0
    
        local title = Instance.new("TextLabel")
        title.Parent = frame
        title.Size = UDim2.new(0.6, 0, 0.2, 0)
        title.Position = UDim2.new(0.2, 0, 0.2, 0)
        title.BackgroundTransparency = 0.2
        title.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        title.Text = "North Hub!"
        title.Font = Enum.Font.GothamBold
        title.TextSize = 60
        title.TextColor3 = Color3.fromRGB(255, 255, 255)
        title.TextStrokeTransparency = 0.2
        title.TextScaled = true
        title.BorderSizePixel = 0
    

        local titleCorner = Instance.new("UICorner")
        titleCorner.CornerRadius = UDim.new(0.1, 0)
        titleCorner.Parent = title

        local ucoinsLabel = Instance.new("TextLabel")
        ucoinsLabel.Parent = frame
        ucoinsLabel.Size = UDim2.new(0.4, 0, 0.1, 0)
        ucoinsLabel.Position = UDim2.new(0.3, 0, 0.5, 0)
        ucoinsLabel.BackgroundTransparency = 0.2
        ucoinsLabel.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        ucoinsLabel.Text = "UCoins: ".. player.Data.UCoins.Value
        ucoinsLabel.Font = Enum.Font.GothamBold
        ucoinsLabel.TextSize = 40
        ucoinsLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        ucoinsLabel.TextScaled = true
        ucoinsLabel.BorderSizePixel = 0
    
        local ucoinsCorner = Instance.new("UICorner")
        ucoinsCorner.CornerRadius = UDim.new(0.1, 0)
        ucoinsCorner.Parent = ucoinsLabel
    
        local ushardsLabel = Instance.new("TextLabel")
        ushardsLabel.Parent = frame
        ushardsLabel.Size = UDim2.new(0.4, 0, 0.1, 0)
        ushardsLabel.Position = UDim2.new(0.3, 0, 0.64, 0)
        ushardsLabel.BackgroundTransparency = 0.2
        ushardsLabel.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        ushardsLabel.Text = "UShards: " .. player.Data.Currency.Value
        ushardsLabel.Font = Enum.Font.GothamBold
        ushardsLabel.TextSize = 40
        ushardsLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        ushardsLabel.TextScaled = true
        ushardsLabel.BorderSizePixel = 0
    
        local ushardsCorner = Instance.new("UICorner")
        ushardsCorner.CornerRadius = UDim.new(0.1, 0)
        ushardsCorner.Parent = ushardsLabel

        player.Data.UCoins.Changed:Connect(function(newValue)
            ucoinsLabel.Text = "UCoins: " .. tostring(newValue)
        end)
    
        player.Data.Currency.Changed:Connect(function(newValue)
            ushardsLabel.Text = "UShards: " .. tostring(newValue)
        end)
    
        gui.Enabled = true
    end

    sections.riskyleft:Toggle({
        Name = "OP Ushard Farm",
        Default = false,
        Callback = function(state)
            OPFarm = state
            if OPFarm then
                
                task.spawn(function()
                    if game.PlaceId == 8008202756 then
                        while task.wait(1) do
                            local gui = player.PlayerGui.MainMenu.Menus
                            if gui.LobbyMenu.Visible then
                                press(gui.LobbyMenu.Holder.Gamemodes)
                            elseif gui.Gamemodes.Visible and not gui.Gamemodes.Queue.Visible then
                                press(gui.Gamemodes.ModesHolder.Modes.ModesPage1:GetChildren()[5].BoundlessTower.Select)
                            elseif gui.Gamemodes.Queue.Visible then
                                press(gui.Gamemodes.Queue.Content.QueueButton)
                            end
                        end
                    end
                end)
                
                task.spawn(function()
                    if game.PlaceId == 8023712967 then
                        pcall(function()
                            local character = player.Character
                    
                            while not character do task.wait()
                                character = player.Character
                            end
                    
                            for _ = 1, 275 do
                                ReplicatedStorage.ReplicatedModules.KnitPackage.Knit.Services.DraftService.RE.Select:FireServer(game.Players.LocalPlayer.Data.Ability:GetAttribute("UUID"))
                                task.wait()
                            end

                            for _ = 1,275 do 
                                local ohTable1 = {
                                    ["Selection"] = "Metro",
                                    ["Action"] = "Vote",
                                    ["Handler"] = "BoundlessTower"
                                }
                        
                                ReplicatedStorage.ReplicatedModules.KnitPackage.Knit.Services.GameModeService.RE.Signal:FireServer(ohTable1)
                                task.wait()
                            end
                            
                            task.spawn(function()
                                local targetPosition = Vector3.new(-357, 308, -160)
                                while task.wait() do
                                    local character = player.Character
                                    if character and character:FindFirstChild("HumanoidRootPart") then
                                        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
                                    end
                                end
                            end)
                    
                            task.spawn(function()
                                while task.wait() do
                                    for _, v in pairs(workspace:GetChildren()) do
                                        if v.Name:find("Chest") then
                                            for _, x in pairs(v:GetDescendants()) do
                                                if x:IsA("ProximityPrompt") then
                                                    fireproximityprompt(x)
                                                    task.wait()
                                                end
                                            end
                                        end
                                    end
                                end
                            end) 
                            
                            task.spawn(function()
                                while task.wait() do
                                    local coreGuiTypeNames = {
                                        ["inventory"] = Enum.CoreGuiType.Backpack,
                                    }
                    
                                    local function enableCoreGui(guiName)
                                        local coreGuiType = coreGuiTypeNames[guiName:lower()]
                                        if coreGuiType then
                                            StarterGui:SetCoreGuiEnabled(coreGuiType, true)
                                        end
                                    end

                                    task.spawn(function()
                                        enableCoreGui("inventory")
                                    end)
                                end
                            end)
                    
                            task.spawn(function()
                                while task.wait() do
                                    local itemsToSell = {}
                    
                                    for _, tool in ipairs(player.Backpack:GetChildren()) do
                                        if tool:IsA("Tool") then
                                            local itemId = tool:GetAttribute("ItemId")
                                            local uuid = tool:GetAttribute("UUID")
                                            if itemId and uuid then
                                                table.insert(itemsToSell, {itemId, uuid, 1})
                                            end
                                        end
                                    end

                                    if #itemsToSell > 0 then
                                        ReplicatedStorage.ReplicatedModules.KnitPackage.Knit.Services.ShopService.RE.Signal:FireServer("BlackMarketBulkSellItems", itemsToSell)
                                    end
                                end
                            end)

                            task.spawn(function()
                                while task.wait() do
                                    for _, v in pairs(workspace.Map:GetDescendants()) do
                                        v:Destroy()
                                    end
                                end
                            end)   

                            task.spawn(function()
                                while task.wait() do
                                    if player:FindFirstChild("PlayerGui") then
                                        player.PlayerGui:Destroy()
                                    end
                                end
                            end)

                            task.spawn(function()
                                local foundcrate
                                while task.wait() do
                                    for i,v in pairs(workspace:GetChildren()) do
                                        if v.Name:find("Chest") then
                                            foundcrate = true
                                        else
                                            foundcrate = false
                                        end
                                    end

                                    for _, x in pairs(workspace.Living:GetChildren()) do
                                        if x.Name ~= player.Name and not foundcrate then
                                            TeleportService:Teleport(8008202756, player)
                                        end
                                    end
                                end
                            end)
                        end)
                    end
                end)

                task.spawn(function()
                    local character = player.Character
                    
                    while not character do task.wait()
                        character = player.Character
                    end

                   HideScreen()
                end)

                task.spawn(function()
                    if game.PlaceId ~= 8023712967 and game.PlaceId ~= 8008202756 then
                        TeleportService:Teleport(8008202756, player)
                    end
                end)
            end
        end
    },"OpUShardFarm")

    MacLib:SetFolder("NorthHubAUT")
    tabs.Settings:InsertConfigSection("Left")

    Window.onUnloaded(function()
        print("Unloaded!")
    end)

    tabs.Main:Select()
    MacLib:LoadAutoLoadConfig()


    task.spawn(function()
        local autohidetimer = os.clock() + 120
        local success = false
        if AutoHide then task.wait()

            UserInputService.InputBegan:Connect(function(input, gameProcessed)
                if not gameProcessed and input.KeyCode == Enum.KeyCode.RightControl then
                    macUI.Enabled = true
                end
            end)
            
            while os.clock() < autohidetimer do task.wait()
                while macUI and macUI.Enabled do
                    if togglemacUI() then
                        success = true
                        break
                    end
                    task.wait(.1)
                end
                if success then
                    print("auto hide successful")
                    break
                end
            end
        end
    end)
end

if game.GameId == 4658598196 and getgenv().AOTREVOLUTION == true then

    local character = player.Character or player.CharacterAdded:Wait()

    while not character do task.wait()
        character = player.Character
    end

    local hrp = character:FindFirstChild("HumanoidRootPart")

    while not hrp do task.wait()
        hrp = character:FindFirstChild("HumanoidRootPart")
    end

    local humanoid = character:FindFirstChildOfClass("Humanoid")

    while not humanoid do task.wait()
        humanoid = character:FindFirstChildOfClass("Humanoid")
    end

    character = player.Character or player.CharacterAdded:Wait()
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoid = character:FindFirstChildOfClass("Humanoid")

    player.CharacterAdded:Connect(function(newCharacter)
        character = newCharacter
        humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        humanoid = character:FindFirstChildOfClass("Humanoid")
    end)

    if not NetworkClient:FindFirstChild('ClientReplicator') then
        sendNotification("Error", "Current Server is Bugged, serverhopping..", 5)
        task.wait(3)
        serverhop()
    end

    if game.PlaceId ~= 14916516914 and game.PlaceId ~= 13379208636 then
        while player.PlayerGui:FindFirstChild("Loader") do
            task.wait()
        end
        if not player.PlayerGui:FindFirstChild("Loader") then
            task.wait(1)
        end
    end

    local function waitForPath(path)
        local segments = string.split(path, ".")
        local currentInstance = player
        for _, segment in ipairs(segments) do
            currentInstance = currentInstance:WaitForChild(segment)
        end
        return currentInstance
    end

    local executed = false

    local function readData()
        local success, result = pcall(function()
            return httpService:JSONDecode(readfile("data.json"))
        end)
        if success then
            return result
        else
            return {}
        end
    end

    local function writeData(playerName, playerData)
        local success, result = pcall(function()
            local data = readData()
            data[playerName] = playerData
            writefile("data.json", httpService:JSONEncode(data))
        end)
        if not success then warn(result) end
    end

    gemsfound = false

    local function storetotalgoldgemsmissions()
        local success, err = pcall(function()
            local data = readData()
            local playerData = data[player.Name] or {
                placeid = 0,
                current_total_gold = 0,
                current_total_gems = 0,
                total_gold = 0,
                total_gems = 0,
                MissionsCompleted = 0,
                Current_Prestige = 0,
                Drill_Thrust = false,
                Torrential_Steel = false,
                cheapestupgrade = 0
            }

            if playerData.placeid ~= game.PlaceId then
                playerData.placeid = game.PlaceId
                playerData.total_gold = 0
                playerData.total_gems = 0
                playerData.MissionsCompleted = 0
            end

            local goldEarned = player.PlayerGui:FindFirstChild("Interface") and player.PlayerGui.Interface:FindFirstChild("Rewards") and player.PlayerGui.Interface.Rewards.Visible and player.PlayerGui.Interface.Rewards.Main.Info.Main.Items.Gold.Main.Inner.Quantity.Text or nil
            if goldEarned then
                gold_text = stringToNumber(goldEarned)
            else
                gold_text = 0
            end

            local current_gold = gold_text
            playerData.total_gold = playerData.total_gold + current_gold
            playerData.current_total_gold = playerData.current_total_gold + current_gold

            local gemsEarned = 0
            if player.PlayerGui:FindFirstChild("Interface") and player.PlayerGui.Interface:FindFirstChild("Rewards") and player.PlayerGui.Interface.Rewards.Visible and player.PlayerGui.Interface.Rewards.Main.Info.Main.Items:FindFirstChild("Gems") then
                gemsEarned = player.PlayerGui.Interface.Rewards.Main.Info.Main.Items.Gems.Main.Inner.Quantity.Text
                local gems_text = stringToNumber(gemsEarned)
                local current_gems = gems_text or 0
                playerData.total_gems = playerData.total_gems + current_gems
                playerData.current_total_gems = playerData.current_total_gems + current_gems
            end

            if player.PlayerGui:FindFirstChild("Interface") and player.PlayerGui.Interface:FindFirstChild("Rewards") and player.PlayerGui.Interface.Rewards.Visible then
                playerData.MissionsCompleted = (playerData.MissionsCompleted or 0) + 1
            end

            writeData(player.Name, playerData)
        end)
        if not success then warn(err) end
    end

    storetotalgoldgemsmissions()

    if game.PlaceId == 14916516914 then
        local currentprestige
        local currentgold
        local currentgems
        task.spawn(function()
            local success, err = pcall(function()
                local data = readData()
                local playerData = data[player.Name] or {
                    placeid = 0,
                    current_total_gold = 0,
                    current_total_gems = 0,
                    total_gold = 0,
                    total_gems = 0,
                    MissionsCompleted = 0,
                    Current_Prestige = 0,
                    Drill_Thrust = false,
                    Torrential_Steel = false,
                    cheapestupgrade = 0
                }

                while task.wait(.5) do
                    if player:GetAttribute("Prestige") ~= currentprestige then
                        currentprestige = player:GetAttribute("Prestige")
                        playerData.Current_Prestige = currentprestige
                        writeData(player.Name, playerData)
                    end
                    local goldamount = stringToNumber(player.PlayerGui.Interface.Topbar.Main.Currencies.Gold.Amount.Text:gsub(",", ""))
                    if currentgold ~= goldamount then
                        -- print("setting gold to: ", goldamount)
                        currentgold = goldamount
                        playerData.current_total_gold = goldamount
                        writeData(player.Name, playerData)
                        -- print("current total gold: ", playerData.current_total_gold)
                    end
                    local gemsamount = stringToNumber(player.PlayerGui.Interface.Topbar.Main.Currencies.Gems.Amount.Text:gsub(",", ""))
                    if currentgems ~= gemsamount then
                        -- print("setting gems to: ", gemsamount)
                        currentgems = gemsamount
                        playerData.current_total_gems = gemsamount
                        writeData(player.Name, playerData)
                        -- print("current total gems: ", playerData.current_total_gems)
                    end
                end
            end)
            if not success then warn(err) end
        end)
    end

    --print("a")

    local function preventChange(obj)
        if obj.Parent and obj.Parent.Name == player.Name then
            if obj:IsA("BasePart") then
                obj.CFrame = obj.CFrame
                obj.Position = obj.Position
            end
        end
    end

    local function continuouslyPreventChange()
        while true do task.wait()
            if character then
                for _, descendant in ipairs(character:GetDescendants()) do
                    preventChange(descendant)
                end
            end
        end
    end

    task.spawn(continuouslyPreventChange)

    -- //NORMAL TWEEN\\

    local moveCancelled = false
    local moveInProgress = false

    local function moveTo(character, targetPosition)
        if not character or not targetPosition then return end

        if moveInProgress then
            moveCancelled = true
        end

        moveCancelled = false
        moveInProgress = true

        local rootpart = character:FindFirstChild("HumanoidRootPart")
        if not rootpart then return end

        local startPosition = rootpart.Position
        local direction = (targetPosition - startPosition).Unit
        local distance = (targetPosition - startPosition).Magnitude
        local duration = distance / 300

        local startTime = os.clock()
        local endTime = startTime + duration

        while os.clock() < endTime and not moveCancelled do 
            task.wait()

            local currentTime = os.clock()
            local timeRatio = (currentTime - startTime) / duration
            local currentPosition = startPosition + direction * (distance * timeRatio)

            rootpart.CFrame = CFrame.new(currentPosition)
            TweenService:Create(workspace.CurrentCamera, TweenInfo.new(0.1), {CFrame = CFrame.new(currentPosition, targetPosition)}):Play()
        end

        if not moveCancelled then
            rootpart.CFrame = CFrame.new(targetPosition)
        end

        moveInProgress = false
    end

    -- //FAST TWEEN\\

    local function fastmoveto(character, targetPosition)
        if not character or not targetPosition then return end

        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if not rootPart then return end

        local startPosition = rootPart.Position
        local direction = (targetPosition - startPosition).Unit
        local distance = (targetPosition - startPosition).Magnitude

        if startPosition.Y < targetPosition.Y then
            startPosition = Vector3.new(startPosition.X, targetPosition.Y, startPosition.Z)
        end

        local bodyVelocity = Instance.new("BodyVelocity")
        bodyVelocity.Velocity = direction * 2000
        bodyVelocity.MaxForce = Vector3.new(10000, 10000, 10000)
        bodyVelocity.Parent = rootPart

        local tweenInfo = TweenInfo.new(distance / 2000, Enum.EasingStyle.Linear)
        local tween = TweenService:Create(rootPart, tweenInfo, {CFrame = CFrame.new(targetPosition)})

        tween:Play()

        tween.Completed:Wait()

        bodyVelocity:Destroy()
    end

    -- //BASEPLATE\\

    pcall(function()
        baseplate = workspace:FindFirstChild("TeleportBaseplate") or Instance.new("Part", workspace)
        baseplate.Size = Vector3.new(50, 0.3, 50)
        baseplate.Anchored = true
        baseplate.Position = humanoidRootPart.Position + Vector3.new(0, 600, 0)
        baseplate.CanCollide = true
        baseplate.Name = "TeleportBaseplate"
        baseplate.Transparency = 0.5
    end)

    local function followPlayer()
        local playerPosition = humanoidRootPart.Position
        baseplate.Position = Vector3.new(playerPosition.X, playerPosition.Y - 3, playerPosition.Z)
    end

    task.wait(2)

    local MacLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/ImSa1f/dwadaw/refs/heads/main/vasst"))()

    local windowWidth = math.clamp(screenSize.X * 0.6, 350, 800)
    local windowHeight = math.clamp(screenSize.Y * 0.6, 200, 650)

    local Window = MacLib:Window({
        Title = "North Hub",
        Subtitle = "discord.gg/northhub",
        Size = UDim2.fromOffset(windowWidth, windowHeight),
        DragStyle = 1,
        DisabledWindowControls = {},
        ShowUserInfo = false,
        Keybind = Enum.KeyCode.RightControl,
        AcrylicBlur = true,
    })

    local macUI

    while not macUI do task.wait()
        for i,v in pairs(coreGui:GetDescendants()) do
            if v.Name == "ScreenGui" and v:FindFirstChild("Base") then
                macUI = v
            end
        end
        for i, x in ipairs(gethui():GetChildren()) do
            if x.Name == "ScreenGui" and x:FindFirstChild("Base") then 
                macUI = x
            end
        end
    end

    local function togglemacUI()
        if macUI then
            macUI.Enabled = not macUI.Enabled
            return true
        else
            return false
        end
    end

    local function createButtonUI()
        if not macUI or not macUI.Parent then
            error("macUI or macUI.Parent is not defined")
        end

        local buttonGui = Instance.new("ScreenGui")
        buttonGui.Name = "ButtonUI"
        buttonGui.Parent = macUI.Parent

        local backgroundFrame = Instance.new("Frame")
        backgroundFrame.Name = "BackgroundFrame"
        backgroundFrame.Size = UDim2.new(0, 60, 0, 60)
        backgroundFrame.Position = UDim2.new(1, -70, -0.03, -30)
        backgroundFrame.BackgroundColor3 = Color3.new(1, 0, 0)
        backgroundFrame.BorderSizePixel = 0
        backgroundFrame.BackgroundTransparency = 1 
        backgroundFrame.Parent = buttonGui

        local button = Instance.new("ImageButton")
        button.Name = "OpenButton"
        button.Image = "rbxassetid://107491175530182"
        button.Size = UDim2.new(0, 100, 0, 100)
        button.Position = UDim2.new(0.5, -45, 0.5, -45)
        button.BackgroundTransparency = 1
        button.Parent = backgroundFrame

        return button
    end


    if UserInputService.TouchEnabled then
        local button = createButtonUI()
        button.MouseButton1Click:Connect(togglemacUI)
    end

    local globalSettings = {
        UIBlurToggle = Window:GlobalSetting({
            Name = "UI Blur",
            Default = Window:GetAcrylicBlurState(),
            Callback = function(bool)
                Window:SetAcrylicBlurState(bool)
                Window:Notify({
                    Title = Window.Settings.Title,
                    Description = (bool and "Enabled" or "Disabled") .. " UI Blur",
                    Lifetime = 5
                })
            end,
        }),
        NotificationToggler = Window:GlobalSetting({
            Name = "Notifications",
            Default = Window:GetNotificationsState(),
            Callback = function(bool)
                Window:SetNotificationsState(bool)
                Window:Notify({
                    Title = Window.Settings.Title,
                    Description = (bool and "Enabled" or "Disabled") .. " Notifications",
                    Lifetime = 5
                })
            end,
        }),
        ShowUserInfo = Window:GlobalSetting({
            Name = "Show User Info",
            Default = Window:GetUserInfoState(),
            Callback = function(bool)
                Window:SetUserInfoState(bool)
                Window:Notify({
                    Title = Window.Settings.Title,
                    Description = (bool and "Showing" or "Redacted") .. " User Info",
                    Lifetime = 5
                })
            end,
        })
    }

    local tabGroups = {
        TabGroup1 = Window:TabGroup()
    }

    local tabs = {
        Joining = tabGroups.TabGroup1:Tab({ Name = "Auto Join", Image = "rbxassetid://77383832126311" }),
        Main = tabGroups.TabGroup1:Tab({ Name = "Main", Image = "rbxassetid://93139146814165" }),
        mainfarmsetts = tabGroups.TabGroup1:Tab({ Name = "Main Farming Settings", Image = "rbxassetid://18821914323" }),
        misc = tabGroups.TabGroup1:Tab({ Name = "Misc", Image = "rbxassetid://121157752745208" }),
        Risky = tabGroups.TabGroup1:Tab({ Name = "Risky", Image = "rbxassetid://113446708604407" }),
        Lobby = tabGroups.TabGroup1:Tab({ Name = "Lobby", Image = "rbxassetid://106804767297733" }),
        Family = tabGroups.TabGroup1:Tab({ Name = "Family", Image = "rbxassetid://116849336198422" }),
        Settings = tabGroups.TabGroup1:Tab({ Name = "Settings", Image = "rbxassetid://10734950309" })
    }

    local sections = {
        Joiningleft = tabs.Joining:Section({ Side = "Left" }),
        Joiningright = tabs.Joining:Section({ Side = "Right" }),
        mainleft = tabs.Main:Section({ Side = "Left" }),
        mainright = tabs.Main:Section({ Side = "Right" }),
        mainfarmsettingsleft = tabs.mainfarmsetts:Section({ Side = "Left" }),
        mainfarmsettingsright = tabs.mainfarmsetts:Section({ Side = "Right" }),
        miscleft = tabs.misc:Section({ Side = "Left" }),
        miscright = tabs.misc:Section({ Side = "Right" }),
        Riskyleft = tabs.Risky:Section({ Side = "Left" }),
        Riskyright = tabs.Risky:Section({ Side = "Right" }),
        Lobbyleft = tabs.Lobby:Section({ Side = "Left" }),
        Lobbyright = tabs.Lobby:Section({ Side = "Right" }),
        Familyleft = tabs.Family:Section({ Side = "Left" }),
        --Familyright = tabs.Family:Section({ Side = "Right" }),
    }

    local Joiningleft = sections.Joiningleft
    local Joiningright = sections.Joiningright
    local mainleft = sections.mainleft
    local mainright = sections.mainright
    local mainfarmsettingsleft  = sections.mainfarmsettingsleft
    local mainfarmsettingsright = sections.mainfarmsettingsright
    local miscleft = sections.miscleft
    local miscright = sections.miscright
    local Riskyleft = sections.Riskyleft
    local Riskyright = sections.Riskyright
    local Lobbyleft = sections.Lobbyleft
    local Lobbyright = sections.Lobbyright
    local Familyleft = sections.Familyleft
    --local Familyright = sections.Familyright
    
    local loadcount = 0

    --// LOBBY WAIT LOAD\\
    if game.PlaceId == 13379208636 or game.PlaceId == 14916516914 then
        while not player do task.wait()
            player = players.LocalPlayer
        end

        while not character do task.wait(.1)
            character = player.Character
            loadcount = loadcount + 1
            if loadcount > 200 then
                --print(loadcount)
                break
            end
        end

        --//MISSION OR RAID LOAD\\
    elseif game.PlaceId ~= 13379208636 and game.PlaceId ~= 14916516914 then
        local playergui = player:WaitForChild("PlayerGui")
        local Interface = playergui:WaitForChild("Interface")

        while not Interface:FindFirstChild("Soundtrack") do task.wait(.1)

            loadcount = loadcount + 1
            if loadcount > 200 then
                --print(loadcount)
                break 
            end

            if player.PlayerGui.Interface.Rewards and player.PlayerGui.Interface.Rewards.Visible then
                break
            end
        end
    end

    Joiningright:Header({
        Text = "Join Main Settings"
    })

    Joiningright:Slider({
        Name = "Start Delay",
        Default = 1.5,
        Minimum = 0,
        Maximum = 5,
        DisplayMethod = "Value",
        Precision = 1,
        Callback = function(state)
            startdelay = state
        end
    }, "StartDelay")

    upgrading = false
    prestiging = false
    kickingplayers = false
    healing = false
    unlockingskill = false

    Joiningright:Toggle({
        Name = "Auto Join",
        Default = autojoin,
        Callback = function(state)
            autojoin = state
        end
    }, "AutoJoin")

    Joiningright:Label({
        Text = "This will auto join the hardest difficulty you have unlocked"
    })

    Joiningright:Toggle({
        Name = "Auto Join Max Difficulty",
        Default = autojoinhardest,
        Callback = function(state)
            autojoinhardest = state
        end
    }, "AutoJoinHardest")

    Joiningright:Toggle({
        Name = "Kick Players From Lobby",
        Default = kickplayersfromlobby,
        Callback = function(state)
            kickplayersfromlobby = state
            if kickplayersfromlobby and game.PlaceId == 14916516914 then
                task.spawn(function()
                    while kickplayersfromlobby do task.wait()
                        local foundKickVisible = false
                        
                        if not player.PlayerGui.Interface.Missions.Info.Main.Info.Modifiers.Visible and player.PlayerGui.Interface.Missions.Info.Visible then

                            if not alreadyactivated then
                                task.spawn(autoscroll)
                                task.wait(.1)
                            end

                            for _, v in pairs(player.PlayerGui.Interface.Missions.Info.Main.Info.Main.Players:GetChildren()) do
                                if v.Name == "Slot" and v:FindFirstChild("Kick") and v.Kick.Visible then
                                    foundKickVisible = true
                                    kickingplayers = true
                                    
                                    press(v.Kick)
                                    task.wait(.05)
                                end
                            end

                            if foundKickVisible then
                                iterationsWithoutKick = 0
                            elseif not foundKickVisible then
                                iterationsWithoutKick = iterationsWithoutKick + 1
                                if iterationsWithoutKick >= 25 then
                                    kickingplayers = false
                                end
                            end
                        end
                    end
                end)
            end
        end
    }, "autokickplayers")

    Joiningright:Divider()

    Joiningright:Header({
        Text = "Auto Join Sub Settings"
    })

    Joiningright:Dropdown({
        Name = "Profile Slot",
        Options = {"A", "B", "C"},
        Default = "A",
        Callback = function(state)
            profileslot = state
        end
    }, "ProfileSlot")

    Joiningright:Dropdown({
        Name = "Gamemode",
        Options = {"Missions", "Raids"},
        Default = gamemode,
        Callback = function(state)
            gamemode = state
        end
    }, "Gamemode")

    Joiningright:Dropdown({
        Name = "Map",
        Search = true,
        Multi = false,
        Options = {"Shiganshina", "Trost", "Outskirts", "Giant Forest", "Utgard", "Loading Docks"},
        Default = map,
        Callback = function(state)
            map = state
        end
    }, "Map")

    Joiningright:Dropdown({
        Name = "Difficulty",
        Search = true,
        Multi = false,
        Options = {"Easy", "Normal", "Hard", "Severe", "Aberrant"},
        Default = difficulty,
        Callback = function(state)
            difficulty = state
        end
    }, "Difficulty")

    Joiningright:Dropdown({
        Name = "Objective",
        Options = {"1", "2", "3"},
        Default = objective,
        Callback = function(state)
            objective = state
        end
    }, "Objective")
    
    function GetCorner(sz, pos, anch)
        pos = typeof(pos) == 'UDim2' and Vector2.new(pos.X.Offset, pos.Y.Offset) or pos
        anch = anch or Vector2.new(0,0)
        return pos+(sz*anch)
    end

    -- Debug script that makes ur cursor red

    -- local player = game.Players.LocalPlayer
    -- local mouse = player:GetMouse()
    -- local runService = game:GetService("RunService")

    -- local screenGui = Instance.new("ScreenGui")
    -- screenGui.Parent = game:GetService("CoreGui")

    -- local square = Instance.new("Frame")
    -- square.Size = UDim2.new(0, 10, 0, 10)
    -- square.BackgroundColor3 = Color3.new(1, 0, 0)
    -- square.BorderSizePixel = 0
    -- square.AnchorPoint = Vector2.new(0.5, 0.5)
    -- square.Parent = screenGui

    -- local function updateGui()
    --     runService.RenderStepped:Connect(function()
    --         local mouseX = mouse.X
    --         local mouseY = mouse.Y
    --         square.Position = UDim2.new(0, mouseX, 0, mouseY)
    --     end)
    -- end

    -- updateGui()

    local modifiersSet = false
    local objectiveset = false
    local notalreadywaited4 = false

    task.spawn(function()
        while task.wait() do
            local success, err = pcall(function()
                if (autojoin or autojoinhardest) and not upgrading and not prestiging and not unlockingskill then

                    if game.PlaceId == 13379208636 then
                        local titleScreen = player.PlayerGui.Interface.Title_Screen
                        repeat task.wait() until titleScreen.Slots.A:FindFirstChild("Player")
                        while not titleScreen.Slots.A:FindFirstChild("Player") or not titleScreen.Slots.A.Player:FindFirstChild("Camera") and autojoin do
                            task.wait()
                        end

                        if titleScreen.Slots.Visible and titleScreen.ZIndex == -1 then
                            press(titleScreen.Slots[profileslot]["Select_" .. profileslot])
                            task.wait(.2)
                        end

                        if not titleScreen.Slots.Visible and titleScreen.ZIndex == 1 then
                            press(titleScreen.Buttons.Play)
                        end

                    elseif game.PlaceId == 14916516914 and not upgrading and not prestiging and not unlockingskill then
                        local gearUpMission = player.PlayerGui.Interface.Gear_Up.Mission.Main
                        local missionSelection = player.PlayerGui.Interface.Missions.Prompt.Main.Selection
                        local missionButton = missionSelection[gamemode]
                        local AccMission = player.PlayerGui.Interface.Missions[gamemode]
                        local missionMain = AccMission.Main
                        local missionInfo = player.PlayerGui.Interface.Missions.Info
                        local createbutton = AccMission.Main.Info.Main.Buttons["Creation_"..gamemode]
                        local mapframe
                        if gamemode ~= "Raids" then
                            mapframe = missionMain.Maps.Maps[map.."_"..gamemode]
                        end
                        local startbutton = missionInfo.Main.Info.Main.Info_Buttons.Begin
                        local objectivestuff

                        if gamemode == "Missions" then
                            objectivestuff = missionMain.Info.Objectives
                        end

                        while player.PlayerGui:FindFirstChild("Loader") do
                            task.wait()
                        end

                        if not notalreadywaited4 then
                            local goldPath = "PlayerGui.Interface.Topbar.Main.Currencies.Gold"
                            local skillsPath = "PlayerGui.Interface.Equipment.Tree.Skills"

                            local gold = waitForPath(goldPath)

                            local skills = waitForPath(skillsPath)
                            notalreadywaited4 = true
                            task.wait(8)
                        end

                        while upgrading or player.PlayerGui:FindFirstChild("Loader") or prestiging or unlockingskill do
                            task.wait()
                        end

                        while not upgrading and not player.PlayerGui:FindFirstChild("Loader") and not prestiging and not unlockingskill and not player.PlayerGui.Interface.Gear_Up.Visible do task.wait(.2)
                            realClick(player.PlayerGui.Interface.Topbar.Main.Categories.Gear_Up.Interact)
                        end

                        while not player.PlayerGui.Interface.Missions.Visible and not missionInfo.Visible and (autojoin or autojoinhardest) and not upgrading and not prestiging and not unlockingskill do task.wait(.1)
                            press(gearUpMission)
                        end

                        while upgrading or player.PlayerGui:FindFirstChild("Loader") or prestiging or unlockingskill do
                            task.wait()
                        end

                        while player.PlayerGui.Interface.Missions.Prompt.Visible and (autojoin or autojoinhardest) and not upgrading and not prestiging and not unlockingskill do task.wait(.1)
                            press(missionButton)
                        end

                        if autojoin and not autojoinhardest then
                            while not missionMain.Info.Main.Difficulty.Difficulties[difficulty].Visible and not missionInfo.Visible and AccMission.Visible and autojoin do
                                press(missionMain.Info.Main.Difficulty["Forward_"..gamemode])
                                task.wait(.3)
                            end
                        elseif autojoinhardest and not autojoin then
                            local difficultyOrder = {"Aberrant", "Severe", "Hard", "Normal", "Easy"}
                            local currentDifficultyIndex = 1
                        
                            while autojoinhardest and not missionMain.Info.Main.Difficulty.Difficulties.Aberrant.Visible and not missionInfo.Visible and AccMission.Visible do
                                press(missionMain.Info.Main.Difficulty["Forward_" .. gamemode])
                                task.wait(.3)
                            end

                            while autojoinhardest and not missionInfo.Visible and AccMission.Visible do
                                local currentDifficulty = difficultyOrder[currentDifficultyIndex]

                                if createbutton.Visible then
                                    break
                                end

                                if currentDifficultyIndex < #difficultyOrder then
                                    press(missionMain.Info.Main.Difficulty["Backward_" .. gamemode])
                                    currentDifficultyIndex += 1
                                else
                                    currentDifficultyIndex = 1
                                end

                                task.wait(.3)
                            end
                        end

                        if gamemode ~= "Raids" and mapframe and (map == "Utgard" or map == "Giant Forest" or map == "Loading Docks") and AccMission.Visible then
                            player.PlayerGui.Interface.Missions.Missions.Main.Maps.Maps.CanvasPosition = Vector2.new(0, 400)
                        end

                        while gamemode ~= "Raids" and mapframe and mapframe.Icon.Stroke.Transparency ~= 0 and AccMission.Visible and (autojoin or autojoinhardest) and not upgrading and not prestiging and not unlockingskill do task.wait()
                            press(mapframe.Icon)
                            task.wait(.3)
                        end

                        if objective ~= "1" and gamemode ~= "Raids" and AccMission.Visible and objectivestuff and not objectivestuff.Visible and not objectiveset then
                            press(AccMission.Main.Info.Main.Buttons["Objectives_"..gamemode])
                            task.wait(.3)
                        end

                        if objective ~= "1" and gamemode ~= "Raids" and AccMission.Visible and objectivestuff and objectivestuff.Visible and not objectiveset then
                            for _,v in pairs(objectivestuff:GetChildren()) do
                                if v:IsA("Frame") then
                                    if objective == "3" and v.Name == "Random" and v.Size ~= Vector2.new(0.314999998, 0.89200002) then
                                        press(v)
                                        task.wait(.3)
                                        objectiveset = true
                                    elseif objective == "2" and v.Name ~= "Random" and v.Name ~= "Skirmish" and v.Size ~= Vector2.new(0.314999998, 0.89200002) then
                                        press(v)
                                        task.wait(.3)
                                        objectiveset = true
                                    end
                                end
                            end
                        end

                        if gamemode ~= "Raids" and objectivestuff and objectivestuff.Visible then
                            press(objectivestuff.Objectives_Buttons.Objectives_Return)
                            task.wait(.3)
                        end

                        while createbutton and AccMission.Visible and (autojoin or autojoinhardest) do task.wait()
                            press(createbutton)
                            task.wait(.3)
                        end

                        while missionInfo.Visible and not missionInfo.Main.Info.Modifiers.Visible and (autojoin or autojoinhardest) and not modifiersSet do task.wait()
                            press(missionInfo.Main.Info.Main.Info_Buttons.Modify)
                            task.wait(.3)
                        end
                    end
                end
            end)
            if not success then warn(err) end
        end
    end)

    local modop
    local obj10
    local obj11
    local obj12
    local obj13
    local obj14
    local obj15
    local obj16
    local obj17
    local obj18
    local obj19

    if game.PlaceId == 14916516914 then
        pcall(function()
            modopt = player.PlayerGui.Interface.Missions.Info.Main.Info.Modifiers.Options
            obj20 = player.PlayerGui.Interface.Missions.Info.Main.Info.Modifiers.Modifiers_Buttons.Return
            obj21 = player.PlayerGui.Interface.Missions.Info.Main.Info.Main.Info_Buttons.Begin
        end)
    end

    local alreadyScrolled = false

    local function processModifier(obj, dependency)
        local success, err = pcall(function()
            if dependency then
                while dependency.Checkmark.ImageTransparency == 1 do
                    task.wait()
                end
            end

            if obj and obj.Checkmark.ImageTransparency == 1 then
                while obj and obj.Checkmark.ImageTransparency == 1 do task.wait()
                    press(obj)
                    task.wait(.5)
                end
            end
        end)
        if not success then warn(err) end
    end

    local function scrollIfNeeded()
        local interface = player.PlayerGui.Interface
        local missions = interface.Missions
        local info = missions.Info.Main.Info.Modifiers.Options

        local canvasHeight = info.CanvasSize.Y.Offset
        local viewHeight = info.AbsoluteWindowSize.Y

        local targetPosition = (canvasHeight - viewHeight) * -1.1

        info.CanvasPosition = Vector2.new(0, targetPosition)
        task.wait(1)
    end

    local function runModifiers()
        while true do
            task.wait(.1)
            if (autojoin or autojoinhardest) and player.PlayerGui.Interface.Missions.Info.Main.Info.Modifiers.Visible then
                obj10 = modopt["No Perks"].Selected
                obj11 = modopt["No Skills"].Selected
                obj12 = modopt["No Talents"].Selected
                obj13 = modopt["Nightmare"].Selected
                obj14 = modopt["Oddball"].Selected
                obj15 = modopt["Injury Prone"].Selected
                obj16 = modopt["Chronic Injuries"].Selected
                obj17 = modopt["Fog"].Selected
                obj18 = modopt["Glass Cannon"].Selected
                obj19 = modopt["Time Trial"].Selected

                if noperks then
                    processModifier(obj10, nil)
                end
                if noskills then
                    processModifier(obj11, noperks and obj10 or nil)
                end
                if notalents then
                    processModifier(obj12, noskills and obj11 or nil)
                end
                if nightmare then
                    processModifier(obj13, notalents and obj12 or nil)
                end
                if oddball then
                    processModifier(obj14, nightmare and obj13 or nil)
                end
                if injuryprone or chronicinjuries or fog or glasscannon or timetrial then
                    scrollIfNeeded()
                end
                if injuryprone then
                    processModifier(obj15, oddball and obj14 or nil)
                end
                if chronicinjuries then
                    processModifier(obj16, injuryprone and obj15 or nil)
                end
                if fog then
                    processModifier(obj17, chronicinjuries and obj16 or nil)
                end
                if glasscannon then
                    processModifier(obj18, fog and obj17 or nil)
                end
                if timetrial then
                    processModifier(obj19, glasscannon and obj18 or nil)
                end

                modifiersSet = true
                local obj20 = player.PlayerGui.Interface.Missions.Info.Main.Info.Modifiers.Modifiers_Buttons.Modifiers_Return
                local obj21 = player.PlayerGui.Interface.Missions.Info.Main.Info.Main.Info_Buttons.Begin

                for _ = 1,10 do
                    while kickingplayers do
                        task.wait()
                    end
                    if player.PlayerGui.Interface.Missions.Info.Main.Info.Modifiers.Visible then
                        press(obj20)
                        task.wait(.5)
                    end
                    while kickingplayers do
                        task.wait()
                    end
                    if not player.PlayerGui.Interface.Missions.Info.Main.Info.Modifiers.Visible and player.PlayerGui.Interface.Missions.Info.Visible and not kickingplayers then
                        press(obj21)
                        task.wait(.5)
                    end
                    while kickingplayers do
                        task.wait()
                    end
                end

                break
            end
        end
    end

    Joiningleft:Header({
        Text = "Modifier Settings"
    })

    Joiningleft:Toggle({
        Name = "No Perks",
        Default = noperks,
        Callback = function(state)
            noperks = state
            if noperks and game.PlaceId == 14916516914 then
                task.spawn(runModifiers)
            end
        end
    }, "noperks")
    
    Joiningleft:Toggle({
        Name = "No Skills",
        Default = noskills,
        Callback = function(state)
            noskills = state
            if noskills and game.PlaceId == 14916516914 then
                task.spawn(runModifiers)
            end
        end
    }, "noskills")
    
    Joiningleft:Toggle({
        Name = "No Talents",
        Default = notalents,
        Callback = function(state)
            notalents = state
            if notalents and game.PlaceId == 14916516914 then
                task.spawn(runModifiers)
            end
        end
    }, "notalents")

    Joiningleft:Toggle({
        Name = "Nightmare",
        Default = nightmare,
        Callback = function(state)
            nightmare = state
            if nightmare and game.PlaceId == 14916516914 then
                task.spawn(runModifiers)
            end
        end
    }, "nightmare")

    Joiningleft:Toggle({
        Name = "Oddball",
        Default = oddball,
        Callback = function(state)
            oddball = state
            if oddball and game.PlaceId == 14916516914 then
                task.spawn(runModifiers)
            end
        end
    }, "oddball")
    
    Joiningleft:Toggle({
        Name = "Injury Prone", 
        Default = injuryprone,
        Callback = function(state)
            injuryprone = state
            if injuryprone and game.PlaceId == 14916516914 then
                task.spawn(runModifiers)
            end
        end
    }, "injuryprone")
    
    Joiningleft:Toggle({
        Name = "Chronic Injuries", 
        Default = chronicinjuries,
        Callback = function(state)
            chronicinjuries = state
            if chronicinjuries and game.PlaceId == 14916516914 then
                task.spawn(runModifiers)
            end
        end
    }, "chronicinjuries")

    Joiningleft:Toggle({
        Name = "Fog",
        Default = fog,
        Callback = function(state)
            fog = state
            if fog and game.PlaceId == 14916516914 then
                task.spawn(runModifiers)
            end
        end
    }, "fog")

    Joiningleft:Toggle({
        Name = "Glass Cannon",
        Default = glasscannon,
        Callback = function(state)
            glasscannon = state
            if glasscannon and game.PlaceId == 14916516914 then
                task.spawn(runModifiers)
            end
        end
    }, "glasscannon")

    Joiningleft:Toggle({
        Name = "Time Trial",
        Default = timetrial,
        Callback = function(state)
            timetrial = state
            if glasscannon and game.PlaceId == 14916516914 then
                task.spawn(runModifiers)
            end
        end
    }, "timetrial")

    iterationsWithoutKick = 0
    local initialscrollalreadydone = false
    local alreadyactivated = false

    local function autoscroll()
        alreadyactivated = true
        while task.wait() do
            if kickplayersfromlobby then
                if not player.PlayerGui.Interface.Missions.Info.Main.Info.Modifiers.Visible and player.PlayerGui.Interface.Missions.Info.Visible then
                    local playerstokickscroll = player.PlayerGui.Interface.Missions.Info.Main.Info.Main.Players

                    local canvasHeight = playerstokickscroll.CanvasSize.Y.Offset
                    local viewHeight = playerstokickscroll.AbsoluteWindowSize.Y

                    if not initialscrollalreadydone then
                        playerstokickscroll.CanvasPosition = Vector2.new(0, (canvasHeight - viewHeight) * -0.25)
                        initialscrollalreadydone = true
                    end

                    task.wait(3)
                    playerstokickscroll.CanvasPosition = Vector2.new(0, (canvasHeight - viewHeight) * -1.1)
                    task.wait(3)
                    playerstokickscroll.CanvasPosition = Vector2.new(0, (canvasHeight - viewHeight) * -0.25)
                end
            end
        end
    end

    local function clickCenterScreen()
        local clickX = math.floor(screenWidth * 0.5)
        local clickY = math.floor(screenHeight * 0.0001)
        vim:SendMouseButtonEvent(clickX, clickY, 0, true, game, 1)
        vim:SendMouseButtonEvent(clickX, clickY, 0, false, game, 0)
    end

    -- //AUTOFARM\\

    sigmaskibidi = false
    skibidirefill = false
    moveCancelled = false
    sigmarefill = nil
    tplow = false
    foundtitanyes = false
    norefills_noblades = false
    refillingblades = false
    refillinggas = false

    mainleft:Header({
        Text = "Main Farming Toggles"
    })

    mainleft:Toggle({
        Name = "Autofarm Titans",
        Default = autofarmtitansold,
        Callback = function(state)
            autofarmtitansold = state
    
            if autofarmtitansold and game.PlaceId ~= 13379208636 and game.PlaceId ~= 14916516914 and not damagefarm and Workspace:GetAttribute("Type") == "Missions" then
                task.spawn(function()
                    oldKillCount = 0
                    local currentTitan = nil
                    local titanStartTime = os.clock()
                    local idlespot

                    -- Delete Objects
                    pcall(function()
                        Workspace.Climbable.Buildings:Destroy()
                        for _, deleted in pairs(Workspace.Unclimbable:GetChildren()) do
                            if deleted.Name ~= "Reloads" and deleted.Name ~= "Cutscene" and deleted.Name ~= "Plane" and deleted.Name ~= "Objective" then
                                deleted:Destroy()
                            end
                        end
                    end)

                    -- Auto Use Gas
                    local function AutoUseGas()
                        while autofarmtitansold do task.wait()
                            if not skibidirefill and foundtitanyes and not sigmarefill then
                                vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
                                task.wait(4)
                            end
                        end
                    end

                    -- M1 Check
                    local function M1Check()
                        local attacktimer = os.clock()
                        local animationIds = {
                            "rbxassetid://14518641514", "rbxassetid://14518654101",
                            "rbxassetid://14518651360", "rbxassetid://14518648320"
                        }
                        while autofarmtitansold do task.wait()
                            if skibidirefill or player.PlayerGui.Interface.Rewards.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and tplow or norefills_noblades then
                                attacktimer = os.clock()
                            end
                            local tracks = humanoid:GetPlayingAnimationTracks()
                            for _, track in ipairs(tracks) do
                                if table.find(animationIds, track.Animation.AnimationId) then
                                    attacktimer = os.clock()
                                    break
                                end
                            end
                            if os.clock() - attacktimer >= 30 then
                                humanoid.Health = 0
                                break
                            end
                        end
                    end

                    local function autoresetnoblades_orrefills()
                        while autofarmtitansold do task.wait()
                            local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                            local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
                            if player:GetAttribute("Refills") == 0 and bladeSetsText == "0 / 3" and character["Rig_"..player.Name].LeftHand.Blade_1.Transparency == 1 and gradientOffset.X == 0 and not sigmarefill then
                                norefills_noblades = true
                                if player.PlayerGui.Interface.Warning.TextTransparency == 1 and player.PlayerGui.Interface.Warning.TextStrokeTransparency == 1 then
                                    humanoid.Health = 0
                                else
                                    moveTo(character, teleportBaseplate.Position + Vector3.new(0, 3, 0))
                                end
                            end
                        end
                    end

                    task.spawn(AutoUseGas)
                    task.spawn(M1Check)
                    task.spawn(autoresetnoblades_orrefills)

                    -- Start of Auto Farm
                    while autofarmtitansold do task.wait()
                        if norefills_noblades then return end
                        while sigmarefill do
                            task.wait()
                        end
                        foundtitanyes = false
                        -- Remove Shiganshina Walls
                        task.spawn(function()
                            pcall(function()
                                task.wait(.5)
                                if workspace:FindFirstChild("Climbable") and workspace.Climbable:FindFirstChild("Walls") then
                                    game.Workspace.Climbable.Walls:Destroy()
                                end
                            end)
                        end)

                        while player:GetAttribute("Cutscene") == true do
                            task.wait()
                        end

                        local success, err = pcall(function()
                            local closestTitan = nil
                            local closestDistance = math.huge
                            for _, titan in pairs(workspace.Titans:GetChildren()) do
                                if titan:IsA("Model") and titan:FindFirstChild("Hitboxes") and titan.Hitboxes:FindFirstChild("Hit") and titan.Hitboxes.Hit:FindFirstChild("Nape") and titan:FindFirstChild("Humanoid") and titan:FindFirstChild("Head") and not humanoid.PlatformStand then
                                    if titan:GetAttribute("Type") == "Colossal" and titan:GetAttribute("State") ~= "Idle" or titan:GetAttribute("Type") ~= "Colossal" then
                                        if workspace:GetAttribute("Objective") == "Stall" then
                                            distance = (titan.Head.Position - Vector3.new(-734, 18, 641)).magnitude
                                        elseif workspace:GetAttribute("Objective") == "Protect" then
                                            distance = (titan.Head.Position - workspace.Unclimbable.Objective.Protect.Objective.Position).magnitude
                                        elseif workspace:GetAttribute("Objective") == "Escort" then
                                            distance = (titan.Head.Position - workspace.Unclimbable.Objective.Escort.Objective.Position).magnitude
                                        elseif workspace:GetAttribute("Objective") == "Guard" then
                                            if not idlespot then
                                                idlespot = workspace.Unclimbable.Objective.Guard.Objective.Position
                                            end
                                            distance = (titan.Head.Position - workspace.Unclimbable.Objective.Guard.Objective.Position).magnitude
                                            if distance > 700 then
                                                continue
                                            end
                                        elseif workspace:GetAttribute("Objective") == "Defend" then
                                            distance = (titan.Head.Position - workspace.Unclimbable.Objective.Defend.Objective.Position).magnitude
                                        else
                                            distance = (titan.Head.Position - humanoidRootPart.Position).magnitude
                                        end
                                        if distance < closestDistance then
                                            closestDistance = distance
                                            closestTitan = titan
                                        end
                                    end
                                end
                            end

                            if closestTitan then
                                foundtitanyes = true
                                if currentTitan ~= closestTitan then
                                    currentTitan = closestTitan
                                    titanStartTime = os.clock()
                                end

                                local nape = currentTitan.Hitboxes.Hit.Nape
                                local currentTitanHead = currentTitan:FindFirstChild("Head") or currentTitan:GetPivot()
                                local startTime = os.clock()
                                local moveCancelled = false
                                local notfirsttp = false
                                local notsecondtp = false

                                repeat task.wait()
                                    if norefills_noblades then return end
                                    while sigmarefill do
                                        task.wait()
                                    end
                                    -- Blade variables
                                    local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                                    local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
                                    -- Gas variables
                                    local gradientOffsett = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset
                                    local gaspercentage = player.PlayerGui.Interface.HUD.Main.Top.Gas.Percentage
                                    local gaspercentagetext = gaspercentage.Text:match("%d+%.?%d*")
                                    local gaspercentageNumber = stringToNumber(gaspercentagetext)
    
                                    nape.Size, nape.CanCollide, nape.Anchored = Vector3.new(300, 300, 300), false, false

                                    -- Refill Section
                                    while (bladeSetsText == "0 / 3" and gradientOffset.X == 0 and not humanoid.PlatformStand) or (gaspercentageNumber <= 2 and gradientOffsett.Y <= 0 and not humanoid.PlatformStand) do task.wait()
                                        if norefills_noblades then return end
                                        while sigmarefill do
                                            task.wait()
                                        end
                                        bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                                        gaspercentagetext = gaspercentage.Text:match("%d+%.?%d*")
                                        gaspercentageNumber = stringToNumber(gaspercentagetext)
                                        gradientOffsett = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset

                                        while skibidirefill do task.wait()
                                            if not moveInProgress and not moveCancelled and not sigmarefill then
                                                moveTo(character, currentTitanHead.Position + Vector3.new(0, 300, 0))
                                            end
                                        end

                                        if not moveInProgress and not moveCancelled and not sigmarefill then
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 300, 0))
                                        elseif bladeSetsText == "3 / 3" or gaspercentageNumber > 95 then
                                            break
                                        end

                                        if bladeSetsText == "3 / 3" or not autofarmtitansold or gaspercentageNumber > 95 then
                                            break
                                        end
                                    end

                                    -- Teleport to Titan
                                    local distance = (humanoidRootPart.Position - currentTitanHead.Position).magnitude
                                    if not notfirsttp then
                                        if norefills_noblades then return end
                                        while sigmarefill do
                                            task.wait()
                                        end
                                        if distance < 800 then
                                            notfirsttp = true
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 150, 0))
                                        end

                                        if distance > 1200 then
                                            notfirsttp = true
                                            moveTo(character, humanoidRootPart.Position + Vector3.new(0, 50, 0))
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 150, 0))
                                        end

                                        if distance < 2000 and not notfirsttp then
                                            notfirsttp = true
                                            moveTo(character, humanoidRootPart.Position + Vector3.new(0, 50, 0))
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 150, 0))
                                        end

                                        if not notsecondtp then
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 130, 0))
                                            notsecondtp = true
                                        end

                                        -- Attack Titan
                                    elseif notfirsttp and notsecondtp then
                                        local tp_time = os.clock() + 0.5
                                        -- local printed = false

                                        while os.clock() < tp_time do task.wait()
                                            -- if not printed then
                                            --     print("Waiting Above Titan...")
                                            --     printed = true
                                            -- end
                                            while sigmarefill do
                                                task.wait()
                                            end
                                            fastmoveto(character, currentTitanHead.Position + Vector3.new(0, 400, 0))
                                            if not currentTitan:FindFirstChild("Head") then
                                                break
                                            end
                                            if norefills_noblades then return end
                                        end

                                        clickCenterScreen()
                                        clickCenterScreen()
                                        fastmoveto(character, currentTitanHead.Position + Vector3.new(0, distancey, 0))
                                        --print("finished attacking")
                                    end

                                    -- Check if refill
                                    if (bladeSetsText == "0 / 3" and gradientOffset.X == 0 and not humanoid.PlatformStand) or (gaspercentageNumber <= 2 and gradientOffsett.Y <= 0 and not humanoid.PlatformStand) then
                                        break
                                    end

                                    -- Failsafe
                                    local elapsedTime = os.clock() - titanStartTime
                                    if elapsedTime >= 60 and currentTitan:FindFirstChild("Humanoid") then
                                        sigmaskibidi = true
                                        for _ = 1, 8 do
                                            if not currentTitan:FindFirstChild("Humanoid") then
                                                sigmaskibidi = false
                                                break
                                            end

                                            while humanoid.PlatformStand do
                                                task.wait()
                                            end

                                            while player:GetAttribute("Cutscene") == true do
                                                task.wait()
                                            end

                                            local teleportEndTime = os.clock() + 3
                                            while os.clock() < teleportEndTime do
                                                task.wait()
                                                fastmoveto(character, currentTitanHead.Position + Vector3.new(0, 500, 0))
                                            end

                                            while skibidirefill do
                                                task.wait()
                                            end

                                            if not currentTitan:FindFirstChild("Nape") then
                                                while autofarmtitansrisky do task.wait()
                                                    local teleportBaseplate = workspace:FindFirstChild("TeleportBaseplate")
                                                    if player.PlayerGui.Interface.Warning.TextTransparency == 1 and player.PlayerGui.Interface.Warning.TextStrokeTransparency == 1 then
                                                        humanoid.Health = 0
                                                    else
                                                        moveTo(character, teleportBaseplate.Position + Vector3.new(0,3,0))
                                                    end
                                                end
                                            end

                                            clickCenterScreen()
                                            clickCenterScreen()
                                            task.wait(.1)
                                            fastmoveto(character, currentTitan.Nape.CFrame)
                                        end

                                        for _ = 1, 1000 do
                                            if not currentTitan:FindFirstChild("Humanoid") then
                                                sigmaskibidi = false
                                                break
                                            end

                                            humanoid.Health = 0
                                            task.wait(.1)
                                        end
                                    end

                                    -- Time Out after 15 seconds
                                    if os.clock() - startTime >= 15 then
                                        moveCancelled = true
                                        break
                                    end
                                until moveCancelled and not skibidirefill or (humanoid.Health / humanoid.MaxHealth) * 100 < healthtpat and tplow or not autofarmtitansold or not currentTitan:FindFirstChild("Humanoid") or player.PlayerGui.Interface.Buttons:FindFirstChildOfClass("CanvasGroup") or humanoid.PlatformStand or not currentTitan:FindFirstChild("Head") or currentTitan:GetAttribute("Type") == "Colossal" and currentTitan:GetAttribute("State") == "Idle" or skibidirefill or sigmarefill

                                -- Timeout Loop
                                if moveCancelled and not humanoid.PlatformStand then
                                    local cancelStartTime = os.clock()
                                    while os.clock() - cancelStartTime < 2 do task.wait()
                                        moveTo(character, currentTitanHead.Position + Vector3.new(0, 300, 0))
                                    end
                                end
                            else
                                if idlespot then
                                    moveTo(character, idlespot + Vector3.new(0, 200, 0))
                                end
                            end

                            -- Health Recovery Loop
                            while (humanoid.Health / humanoid.MaxHealth) * 100 <= healthstop and autofarmtitansold and tplow do
                                task.wait()
                            end
                        end)
                        if not success then warn(err) end
                    end
                end)
            end
        end
    }, "autofarm all titans")

    -- \\EMD OF AUTOFARM//

    mainleft:Toggle({
        Name = "Autofarm Titans ALT",
        Default = autofarmtitansalt,
        Callback = function(state)
            autofarmtitansalt = state
            if autofarmtitansalt and game.PlaceId ~= 13379208636 and game.PlaceId ~= 14916516914 and not autofarmtitansold and not damagefarm and Workspace:GetAttribute("Type") == "Missions" then
                task.spawn(function()
                    oldKillCount = 0
                    local currentTitan = nil
                    local titanStartTime = os.clock()
                    local idlespot

                    -- Delete Objects
                    pcall(function()
                        Workspace.Climbable.Buildings:Destroy()
                        for _, deleted in pairs(Workspace.Unclimbable:GetChildren()) do
                            if deleted.Name ~= "Reloads" and deleted.Name ~= "Cutscene" and deleted.Name ~= "Plane" and deleted.Name ~= "Objective" then
                                deleted:Destroy()
                            end
                        end
                    end)

                    -- Auto Use Gas
                    local function AutoUseGas()
                        while autofarmtitansalt do task.wait()
                            if not skibidirefill and foundtitanyes and not sigmarefill then
                                vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
                                task.wait(4)
                            end
                        end
                    end

                    -- M1 Check
                    local function M1Check()
                        local attacktimer = os.clock()
                        local animationIds = {
                            "rbxassetid://14518641514", "rbxassetid://14518654101",
                            "rbxassetid://14518651360", "rbxassetid://14518648320"
                        }
                        while autofarmtitansalt do task.wait()
                            if skibidirefill or player.PlayerGui.Interface.Rewards.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and tplow or norefills_noblades then
                                attacktimer = os.clock()
                            end
                            local tracks = humanoid:GetPlayingAnimationTracks()
                            for _, track in ipairs(tracks) do
                                if table.find(animationIds, track.Animation.AnimationId) then
                                    attacktimer = os.clock()
                                    break
                                end
                            end
                            if os.clock() - attacktimer >= 30 then
                                humanoid.Health = 0
                                break
                            end
                        end
                    end

                    local function autoresetnoblades_orrefills()
                        while autofarmtitansalt do task.wait()
                            local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                            local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
                            if player:GetAttribute("Refills") == 0 and bladeSetsText == "0 / 3" and character["Rig_"..player.Name].LeftHand.Blade_1.Transparency == 1 and gradientOffset.X == 0 then
                                norefills_noblades = true
                                if player.PlayerGui.Interface.Warning.TextTransparency == 1 and player.PlayerGui.Interface.Warning.TextStrokeTransparency == 1 then
                                    humanoid.Health = 0
                                else
                                    moveTo(character, teleportBaseplate.Position + Vector3.new(0, 3, 0))
                                end
                            end
                        end
                    end

                    task.spawn(AutoUseGas)
                    task.spawn(M1Check)
                    task.spawn(autoresetnoblades_orrefills)

                    -- Start of Auto Farm
                    while autofarmtitansalt do task.wait()
                        if norefills_noblades then return end
                        while sigmarefill do
                            task.wait()
                        end
                        foundtitanyes = false
                        -- Remove Shiganshina Walls
                        task.spawn(function()
                            pcall(function()
                                task.wait(.5)
                                if workspace:FindFirstChild("Climbable") and workspace.Climbable:FindFirstChild("Walls") then
                                    game.Workspace.Climbable.Walls:Destroy()
                                end
                            end)
                        end)

                        while player:GetAttribute("Cutscene") == true do
                            task.wait()
                        end

                        local success, err = pcall(function()
                            local closestTitan = nil
                            local closestDistance = math.huge
                            for _, titan in pairs(workspace.Titans:GetChildren()) do
                                if titan:IsA("Model") and titan:FindFirstChild("Hitboxes") and titan.Hitboxes:FindFirstChild("Hit") and titan.Hitboxes.Hit:FindFirstChild("Nape") and titan:FindFirstChild("Humanoid") and titan:FindFirstChild("Head") and not humanoid.PlatformStand then
                                    if titan:GetAttribute("Type") == "Colossal" and titan:GetAttribute("State") ~= "Idle" or titan:GetAttribute("Type") ~= "Colossal" then
                                        if workspace:GetAttribute("Objective") == "Stall" then
                                            distance = (titan.Head.Position - Vector3.new(-734, 18, 641)).magnitude
                                        elseif workspace:GetAttribute("Objective") == "Protect" then
                                            distance = (titan.Head.Position - workspace.Unclimbable.Objective.Protect.Objective.Position).magnitude
                                        elseif workspace:GetAttribute("Objective") == "Escort" then
                                            distance = (titan.Head.Position - workspace.Unclimbable.Objective.Escort.Objective.Position).magnitude
                                        elseif workspace:GetAttribute("Objective") == "Guard" then
                                            if not idlespot then
                                                idlespot = workspace.Unclimbable.Objective.Guard.Objective.Position
                                            end
                                            distance = (titan.Head.Position - workspace.Unclimbable.Objective.Guard.Objective.Position).magnitude
                                            if distance > 700 then
                                                continue
                                            end
                                        elseif workspace:GetAttribute("Objective") == "Defend" then
                                            distance = (titan.Head.Position - workspace.Unclimbable.Objective.Defend.Objective.Position).magnitude
                                        else
                                            distance = (titan.Head.Position - humanoidRootPart.Position).magnitude
                                        end
                                        if distance < closestDistance then
                                            closestDistance = distance
                                            closestTitan = titan
                                        end
                                    end
                                end
                            end

                            if closestTitan then
                                foundtitanyes = true
                                if currentTitan ~= closestTitan then
                                    currentTitan = closestTitan
                                    titanStartTime = os.clock()
                                end

                                local nape = currentTitan.Hitboxes.Hit.Nape
                                local currentTitanHead = currentTitan:FindFirstChild("Head") or currentTitan:GetPivot()
                                local startTime = os.clock()
                                local moveCancelled = false
                                local notfirsttp = false
                                local notsecondtp = false

                                repeat task.wait()
                                    if norefills_noblades then return end
                                    while sigmarefill do
                                        task.wait()
                                    end
                                    -- Blade variables
                                    local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                                    local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
                                    -- Gas variables
                                    local gradientOffsett = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset
                                    local gaspercentage = player.PlayerGui.Interface.HUD.Main.Top.Gas.Percentage
                                    local gaspercentagetext = gaspercentage.Text:match("%d+%.?%d*")
                                    local gaspercentageNumber = stringToNumber(gaspercentagetext)

                                    nape.Size, nape.CanCollide, nape.Anchored = Vector3.new(300, 300, 300), false, false

                                    -- Refill Section
                                    while (bladeSetsText == "0 / 3" and gradientOffset.X == 0 and not humanoid.PlatformStand) or (gaspercentageNumber <= 2 and gradientOffsett.Y <= 0 and not humanoid.PlatformStand) do task.wait()
                                        if norefills_noblades then return end
                                        while sigmarefill do
                                            task.wait()
                                        end
                                        bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                                        gaspercentagetext = gaspercentage.Text:match("%d+%.?%d*")
                                        gaspercentageNumber = stringToNumber(gaspercentagetext)
                                        gradientOffsett = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset

                                        while skibidirefill do task.wait()
                                            if not moveInProgress and not moveCancelled and not sigmarefill then
                                                moveTo(character, currentTitanHead.Position + Vector3.new(0, 300, 0))
                                            end
                                        end

                                        if not moveInProgress and not moveCancelled and not sigmarefill then
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 300, 0))
                                        elseif bladeSetsText == "3 / 3" or gaspercentageNumber > 95 then
                                            break
                                        end

                                        if bladeSetsText == "3 / 3" or not autofarmtitansalt or gaspercentageNumber > 95 then
                                            break
                                        end
                                    end

                                    -- Teleport to Titan
                                    local distance = (humanoidRootPart.Position - currentTitanHead.Position).magnitude
                                    if not notfirsttp then
                                        if norefills_noblades then return end
                                        while sigmarefill do
                                            task.wait()
                                        end
                                        if distance < 800 then
                                            notfirsttp = true
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 150, 0))
                                        end

                                        if distance > 1200 then
                                            notfirsttp = true
                                            moveTo(character, humanoidRootPart.Position + Vector3.new(0, 50, 0))
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 150, 0))
                                        end

                                        if distance < 2000 and not notfirsttp then
                                            notfirsttp = true
                                            moveTo(character, humanoidRootPart.Position + Vector3.new(0, 50, 0))
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 150, 0))
                                        end

                                        if not notsecondtp then
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 130, 0))
                                            notsecondtp = true
                                        end

                                        -- Attack Titan
                                    elseif notfirsttp and notsecondtp then
                                        local tp_time = os.clock() + 0.5
                                        --local printed = false

                                        while os.clock() < tp_time do task.wait()
                                            fastmoveto(character, currentTitanHead.Position + Vector3.new(0, 400, 0))
                                            if not currentTitan:FindFirstChild("Head") then
                                                break
                                            end
                                            if norefills_noblades then return end
                                            while sigmarefill do
                                                task.wait()
                                            end
                                        end

                                            --[[
                                            if not printed then
                                                print("Waiting Above Titan...")
                                                printed = true
                                            end
                                        end
                                        ]]

                                        clickCenterScreen()
                                        clickCenterScreen()
                                        --print("attacking titan")
                                        fastmoveto(character, currentTitanHead.Position + Vector3.new(0, distancey, 0))
                                        --print("finished attacking")
                                    end

                                    -- Check if refill
                                    if (bladeSetsText == "0 / 3" and gradientOffset.X == 0 and not humanoid.PlatformStand) or (gaspercentageNumber <= 2 and gradientOffsett.Y <= 0 and not humanoid.PlatformStand) then
                                        break
                                    end

                                    -- Failsafe
                                    local elapsedTime = os.clock() - titanStartTime
                                    if elapsedTime >= 60 and currentTitan:FindFirstChild("Humanoid") then
                                        sigmaskibidi = true
                                        for _ = 1, 8 do
                                            if not currentTitan:FindFirstChild("Humanoid") then
                                                sigmaskibidi = false
                                                break
                                            end

                                            while humanoid.PlatformStand do
                                                task.wait()
                                            end

                                            while player:GetAttribute("Cutscene") == true do
                                                task.wait()
                                            end

                                            local teleportEndTime = os.clock() + 3
                                            while os.clock() < teleportEndTime do
                                                task.wait()
                                                fastmoveto(character, currentTitanHead.Position + Vector3.new(0, 500, 0))
                                            end

                                            while skibidirefill do
                                                task.wait()
                                            end

                                            if not currentTitan:FindFirstChild("Nape") then
                                                while autofarmtitansrisky do task.wait()
                                                    local teleportBaseplate = workspace:FindFirstChild("TeleportBaseplate")
                                                    if player.PlayerGui.Interface.Warning.TextTransparency == 1 and player.PlayerGui.Interface.Warning.TextStrokeTransparency == 1 then
                                                        humanoid.Health = 0
                                                    else
                                                        moveTo(character, teleportBaseplate.Position + Vector3.new(0,3,0))
                                                    end
                                                end
                                            end

                                            clickCenterScreen()
                                            clickCenterScreen()
                                            task.wait(.1)
                                            fastmoveto(character, currentTitan.Nape.CFrame)
                                        end

                                        for _ = 1, 1000 do
                                            if not currentTitan:FindFirstChild("Humanoid") then
                                                sigmaskibidi = false
                                                break
                                            end

                                            humanoid.Health = 0
                                            task.wait(.1)
                                        end
                                    end

                                    -- Time Out after 15 seconds
                                    if os.clock() - startTime >= 15 then
                                        moveCancelled = true
                                        break
                                    end
                                until moveCancelled and not skibidirefill or (humanoid.Health / humanoid.MaxHealth) * 100 < healthtpat and tplow or not autofarmtitansalt or not currentTitan:FindFirstChild("Humanoid") or player.PlayerGui.Interface.Buttons:FindFirstChildOfClass("CanvasGroup") or humanoid.PlatformStand or not currentTitan:FindFirstChild("Head") or currentTitan:GetAttribute("Type") == "Colossal" and currentTitan:GetAttribute("State") == "Idle" or skibidirefill or sigmarefill

                                -- Timeout Loop
                                if moveCancelled and not humanoid.PlatformStand then
                                    local cancelStartTime = os.clock()
                                    while os.clock() - cancelStartTime < 2 do
                                        task.wait()
                                        moveTo(character, currentTitanHead.Position + Vector3.new(0, 300, 0))
                                    end
                                end
                            else
                                if idlespot then
                                    moveTo(character, idlespot + Vector3.new(0, 200, 0))
                                end
                            end

                            -- Health Recovery Loop
                            while (humanoid.Health / humanoid.MaxHealth) * 100 <= healthstop and autofarmtitansalt and tplow do
                                task.wait()
                            end
                        end)
                        if not success then warn(err) end
                    end
                end)
            end
        end
    }, "autofarmtitansalt")

    mainleft:Toggle({
        Name = "Auto Refill Blades",
        Default = autorefill,
        Callback = function(state)
            autorefill = state
            if autorefill and game.PlaceId ~= 13379208636 and game.PlaceId ~= 14916516914 then
                task.spawn(function()
                    local refill_count = 0

                    local function getAnimationTrack()
                        local tracks = humanoid:GetPlayingAnimationTracks()
                        for _, track in ipairs(tracks) do
                            if track.Animation.AnimationId == "rbxassetid://15406891131" then
                                return track
                            end
                        end
                        return nil
                    end

                    local positions = {
                        [3] = Vector3.new(0,0,2),
                        [6] = Vector3.new(0,0,4),
                        [8] = Vector3.new(0,0,6),
                        [10] = Vector3.new(0,0,8),
                        [13] = Vector3.new(0,0,-2),
                        [16] = Vector3.new(0,0,-4),
                        [20] = Vector3.new(0,0,-6)
                    }

                    RefillStation = nil

                    while autorefill do task.wait()
                        if norefills_noblades then return end
                        refillingblades = false
                        if not refillinggas then
                            skibidirefill = false
                            sigmarefill = false
                        end
                        local success, err = pcall(function()
                            local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                            local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
                            local teleportBaseplate = workspace:FindFirstChild("TeleportBaseplate")

                            if workspace.Unclimbable.Reloads:FindFirstChild("GasTanks") and not RefillStation then
                                RefillStation = workspace.Unclimbable.Reloads.GasTanks.Refill.CFrame
                            end

                            while player:GetAttribute("Cutscene") == true do
                                task.wait()
                            end

                            while bladeSetsText == "0 / 3" and character["Rig_"..player.Name].LeftHand.Blade_1.Transparency == 1 and humanoid.PlatformStand == false and gradientOffset.X == 0 and not tplow do task.wait()
                                if norefills_noblades then return end
                                skibidirefill = true
                                --print("Refilling Status:", skibidirefill)

                                while humanoid.PlatformStand do
                                    task.wait()
                                end

                                while player:GetAttribute("Cutscene") == true do
                                    task.wait()
                                end

                                while player.PlayerGui.Interface.HUD.Visible == false do
                                    task.wait()
                                end

                                moveCancelled = true
                                refillingblades = true
                                sigmarefill = true

                                while moveInProgress do
                                    task.wait()
                                end

                                -- //TP REFILL\\

                                moveTo(character, RefillStation.Position + Vector3.new(0, 300, 0))
                                moveCancelled = true
                                moveTo(character, RefillStation.Position + positions[6])

                                -- //PRESS R\\

                                local animationTrack = getAnimationTrack()

                                while not animationTrack do
                                    if norefills_noblades then return end
                                    vim:SendKeyEvent(true, Enum.KeyCode.R, false, game)
                                    vim:SendKeyEvent(false, Enum.KeyCode.R, false, game)
                                    task.wait(0.05)
                                    animationTrack = getAnimationTrack()
                                    refill_count = refill_count + 1

                                    while player.PlayerGui.Interface.HUD.Visible == false do
                                        task.wait()
                                    end

                                    while player:GetAttribute("Cutscene") == true do
                                        task.wait()
                                    end

                                    if positions[refill_count] then
                                        moveTo(character, RefillStation.Position + positions[refill_count])
                                    end

                                    if refill_count >= 25 then
                                        break
                                    end
                                end

                                if animationTrack then
                                    local finishedPlaying = false
                                    animationTrack.Stopped:Connect(function()
                                        finishedPlaying = true
                                    end)

                                    local tp_away_refill = os.clock() + 7
                                    while os.clock() < tp_away_refill do task.wait()
                                        while humanoid.PlatformStand do
                                            task.wait()
                                        end

                                        while player:GetAttribute("Cutscene") == true do
                                            task.wait()
                                        end

                                        -- //TP FAR AWAY FROM REFILL SO TITANS GO AWAY FROM REFILL INCASE FIRST REFILL DOESNT WORK\\

                                        moveCancelled = true
                                        --print("moving above refill")
                                        moveTo(character, RefillStation.Position + Vector3.new(0, 300, 0))
                                        if finishedPlaying then
                                            break
                                        end
                                    end
                                end

                                if not animationTrack then
                                    local tp_away_refill = os.clock() + 6
                                    while os.clock() < tp_away_refill do task.wait()
                                        if norefills_noblades then return end
                                        while humanoid.PlatformStand do
                                            task.wait()
                                        end

                                        while player:GetAttribute("Cutscene") == true do
                                            task.wait()
                                        end

                                        -- //TP FAR AWAY FROM REFILL SO TITANS GO AWAY FROM REFILL INCASE FIRST REFILL DOESNT WORK\\
    
                                        moveCancelled = true
                                        --print("moving above refill")
                                        moveTo(character, RefillStation.Position + Vector3.new(0, 300, 800))
                                        refill_count = 0
                                        if finishedPlaying then
                                            break
                                        end
                                    end
                                end

                                moveCancelled = false
                                --print("Refilling Status:", skibidirefill)
                            end
                            if not refillinggas then
                                skibidirefill = false
                                sigmarefill = false
                                refill_count = 0
                            end
                        end)
                        if not success then warn(err) end
                    end
                end)
            end
        end
    }, "autorefillblades")

    mainleft:Toggle({
        Name = "Auto Refill Gas",
        Default = autorefillgas,
        Callback = function(state)
            autorefillgas = state
            if autorefillgas and game.PlaceId ~= 13379208636 and game.PlaceId ~= 14916516914 then
                task.spawn(function()
                    local refill_count = 0

                    local function getAnimationTrack()
                        local tracks = humanoid:GetPlayingAnimationTracks()
                        for _, track in ipairs(tracks) do
                            if track.Animation.AnimationId == "rbxassetid://15406891131" then
                                return track
                            end
                        end
                        return nil
                    end

                    local positions = {
                        [3] = Vector3.new(0,0,2),
                        [6] = Vector3.new(0,0,4),
                        [8] = Vector3.new(0,0,6),
                        [10] = Vector3.new(0,0,8),
                        [13] = Vector3.new(0,0,-2),
                        [16] = Vector3.new(0,0,-4),
                        [20] = Vector3.new(0,0,-6)
                    }

                    RefillStation = nil

                    while autorefillgas do task.wait()
                        if norefills_noblades then return end
                        refillinggas = false
                        if not refillingblades then
                            skibidirefill = false
                            sigmarefill = false
                        end
                        local success, err = pcall(function()
                            local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset
                            local teleportBaseplate = workspace:FindFirstChild("TeleportBaseplate")
                            local gaspercentage = player.PlayerGui.Interface.HUD.Main.Top.Gas.Percentage
                            local gaspercentagetext = tonumber(gaspercentage.Text:match("%d+"))

                            if workspace.Unclimbable.Reloads:FindFirstChild("GasTanks") and not RefillStation then
                                RefillStation = workspace.Unclimbable.Reloads.GasTanks.Refill.CFrame
                            end

                            while player:GetAttribute("Cutscene") == true do
                                task.wait()
                            end

                            while gaspercentagetext <= 2 and humanoid.PlatformStand == false and gradientOffset.Y == 0 and not tplow do task.wait()
                                if norefills_noblades then return end
                                --print("1 gradientOffset:", gradientOffset.Y, "gaspercentagetext:", gaspercentagetext)
                                skibidirefill = true

                                gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset
                                gaspercentagetext = tonumber(gaspercentage.Text:match("%d+"))

                                while humanoid.PlatformStand do
                                    task.wait()
                                end

                                while player:GetAttribute("Cutscene") == true do
                                    task.wait()
                                end

                                moveCancelled = true
                                refillinggas = true
                                sigmarefill = true

                                while moveInProgress do
                                    task.wait()
                                end

                                -- //TP REFILL\\

                                moveTo(character, RefillStation.Position + Vector3.new(0, 300, 0))
                                moveCancelled = true
                                moveTo(character, RefillStation.Position + positions[6])
                                --task.wait(.4)

                                -- //PRESS R\\

                                local animationTrack = getAnimationTrack()

                                while not animationTrack and gaspercentagetext <= 2 do
                                    if norefills_noblades then return end
                                    vim:SendKeyEvent(true, Enum.KeyCode.R, false, game)
                                    vim:SendKeyEvent(false, Enum.KeyCode.R, false, game)
                                    task.wait(0.05)
                                    animationTrack = getAnimationTrack()
                                    refill_count = refill_count + 1
                                    while player.PlayerGui.Interface.HUD.Visible == false do
                                        task.wait()
                                    end

                                    while player:GetAttribute("Cutscene") == true do
                                        task.wait()
                                    end

                                    if positions[refill_count] then
                                        humanoidRootPart.CFrame = RefillStation * positions[refill_count]
                                    end

                                    if refill_count >= 25 then
                                        break
                                    end
                                end

                                if animationTrack then
                                    local finishedPlaying = false
                                    animationTrack.Stopped:Connect(function()
                                        finishedPlaying = true
                                    end)

                                    local tp_away_gas = os.clock() + 7
                                    while os.clock() < tp_away_gas do task.wait()
                                        gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset
                                        gaspercentagetext = tonumber(gaspercentage.Text:match("%d+"))
                                        while humanoid.PlatformStand do
                                            task.wait()
                                        end

                                        while player:GetAttribute("Cutscene") == true do
                                            task.wait()
                                        end

                                        -- //TP FAR AWAY FROM REFILL SO TITANS GO AWAY FROM REFILL INCASE FIRST REFILL DOESNT WORK\\

                                        moveCancelled = true
                                        --print("moving above refill")
                                        moveTo(character, RefillStation.Position + Vector3.new(0, 300, 0))
                                        task.wait(.1)
                                        if finishedPlaying or gaspercentagetext > 90 or gradientOffset.Y == 1 then
                                            break
                                        end
                                    end
                                end

                                if not animationTrack then
                                    local tp_away_gas = os.clock() + 6
                                    while os.clock() < tp_away_gas do task.wait()
                                        if norefills_noblades then return end
                                        while humanoid.PlatformStand do
                                            task.wait()
                                        end

                                        while player:GetAttribute("Cutscene") == true do
                                            task.wait()
                                        end

                                        -- //TP FAR AWAY FROM REFILL SO TITANS GO AWAY FROM REFILL INCASE FIRST REFILL DOESNT WORK\\

                                        moveCancelled = true
                                        --print("moving above refill")
                                        moveTo(character, RefillStation.Position + Vector3.new(0, 300, 800))
                                        refill_count = 0
                                        if finishedPlaying then
                                            break
                                        end
                                    end
                                end

                                moveCancelled = false
                                --print("2 gradientOffset:", gradientOffset.Y, "gaspercentagetext:", gaspercentagetext)
                            end
                            if not refillinggas then
                                skibidirefill = false
                                sigmarefill = false
                                refill_count = 0
                            end
                        end)
                        if not success then warn(err) end
                    end
                end)
            end
        end
    }, "autorefillgas")

    mainleft:Toggle({
        Name = "Autofarm Raid",
        Default = autofarmraid,
        Callback = function(state)
            autofarmraid = state
            if autofarmraid and game.PlaceId == 14012874501 and not damagefarm and Workspace:GetAttribute("Type") == "Raids" then
                task.spawn(function()
                    local roar = false
                    oldKillCount = 0
                    local TP_Count = 0
                    local currentTitan = nil
                    local titanStartTime = os.clock()

                    local function getAnimationTrack()
                        local tracks = workspace.Titans.Attack_Titan.Fake.Controller.Animator:GetPlayingAnimationTracks()
                        for _, track in ipairs(tracks) do
                            if track.Animation.AnimationId == "rbxassetid://17395738065" then
                                return track
                            end
                        end
                        return nil
                    end

                    -- // CHECK WHEN EREN ROARS TO TP ABOVE TO NOT GET HIT \\
                    local function RoarCheck()
                        while autofarmraid do task.wait()

                            while skibidirefill or player.PlayerGui.Interface.Rewards.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and tplow do
                                task.wait()
                            end

                            if workspace.Titans:FindFirstChild("Attack_Titan") and player.PlayerGui.Interface.HUD.Visible then
                                local currentTitanHead = workspace.Titans.Attack_Titan:FindFirstChild("Head") or workspace.Titans.Attack_Titan:GetPivot()

                                local finishedPlaying = false
                                local animationTrack = getAnimationTrack()

                                if animationTrack then
                                    local function checkAnimationTrack()
                                        while animationTrack and animationTrack.IsPlaying do task.wait(.1)
                                            roar = true
                                            fastmoveto(character, currentTitanHead.Position + Vector3.new(0, 400, 0))
                                            while not player.PlayerGui.Interface.HUD.Visible or skibidirefill or player.PlayerGui.Interface.Rewards.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and tplow or humanoid.PlatformStand do
                                                task.wait()
                                                roar = false
                                            end
                                            if not animationTrack.IsPlaying then
                                                finishedPlaying = true
                                                roar = false
                                            end
                                        end
                                    end
                                    task.spawn(checkAnimationTrack)
                                end
                            end
                        end
                    end

                    -- //AUTO USE GAS\\
                    local function AutoUseGas()
                        while autofarmraid do task.wait()
                            if not skibidirefill and foundtitanyes and not sigmarefill then
                                vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
                                task.wait(4)
                            end
                        end
                    end

                    -- //M1 CHECK\\
                    local function M1Check()
                        local attacktimer = os.clock()
                        local animationIds = {
                            "rbxassetid://14518641514", "rbxassetid://14518654101",
                            "rbxassetid://14518651360", "rbxassetid://14518648320"
                        }
                        while autofarmraid do task.wait()
                            if skibidirefill or player.PlayerGui.Interface.Chests.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and tplow or norefills_noblades then
                                attacktimer = os.clock()
                            end
                            local tracks = humanoid:GetPlayingAnimationTracks()
                            for _, track in ipairs(tracks) do
                                if table.find(animationIds, track.Animation.AnimationId) then
                                    attacktimer = os.clock()
                                    break
                                end
                            end
                            if os.clock() - attacktimer >= 30 then
                                humanoid.Health = 0
                                break
                            end
                        end
                    end

                    local function autoresetnoblades_orrefills()
                        while autofarmraid do task.wait()
                            local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                            local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
                            if player:GetAttribute("Refills") == 0 and bladeSetsText == "0 / 3" and character["Rig_"..player.Name].LeftHand.Blade_1.Transparency == 1 and gradientOffset.X == 0 then
                                norefills_noblades = true
                                if player.PlayerGui.Interface.Warning.TextTransparency == 1 and player.PlayerGui.Interface.Warning.TextStrokeTransparency == 1 then
                                    humanoid.Health = 0
                                else
                                    moveTo(character, teleportBaseplate.Position + Vector3.new(0, 3, 0))
                                end
                            end
                        end
                    end

                    task.spawn(AutoUseGas)
                    task.spawn(M1Check)
                    task.spawn(RoarCheck)
                    task.spawn(autoresetnoblades_orrefills)

                    -- //START OF AUTO FARM\\
                    while autofarmraid do task.wait()
                        if norefills_noblades then return end
                        foundtitanyes = false
                        local success, err = pcall(function()

                            while player.PlayerGui.Interface.HUD.Visible == false do
                                task.wait()
                            end

                            while player:GetAttribute("Cutscene") == true do
                                task.wait()
                            end

                            task.spawn(function()
                                pcall(function()
                                    task.wait(.5)
                                    if workspace:FindFirstChild("Climbable") then
                                        for _, v in pairs(workspace.Climbable.Buildings:GetChildren()) do
                                            if v.Name ~= "Trost_House6" then
                                                v:Destroy()
                                            end
                                        end
                                    end
                                end)
                            end)

                            -- //REMOVE SHIGANSHINA WALLS\\ 
                            task.spawn(function()
                                pcall(function()
                                    task.wait(.5)
                                    if workspace:FindFirstChild("Climbable") and workspace.Climbable:FindFirstChild("Walls") then
                                        game.Workspace.Climbable.Walls:Destroy()
                                    end
                                end)
                            end)

                            -- //GET CLOSEST TITAN TO ROCK OR EREN\\
                            local a = workspace.Unclimbable:FindFirstChild("Objective")
                            local b = a:FindFirstChild("Defend_Eren")
                            local c
                            local objectivePart
                            if b:FindFirstChild("Attack_Titan") then
                                c = b:FindFirstChild("Attack_Titan")
                                objectivePart = c:FindFirstChild("HumanoidRootPart")
                            elseif not b:FindFirstChild("Attack_Titan") then
                                c = b:FindFirstChild("BigRock")
                                objectivePart = c
                            end

                            local closestTitan = nil
                            local closestDistance = math.huge

                            for _, titan in pairs(workspace.Titans:GetChildren()) do
                                if titan:IsA("Model") and titan.Hitboxes:FindFirstChild("Hit"):FindFirstChild("Nape") and titan:FindFirstChild("Humanoid") and not humanoid.PlatformStand then
                                    local titanPosition = titan.Head.Position
                                    local objectivePosition = objectivePart.Position
                                    local distance = (titanPosition - objectivePosition).magnitude
                            
                                    if titan.Name == "Attack_Titan" then
                                        closestTitan = titan
                                        break
                                    elseif distance < closestDistance then
                                        closestDistance = distance
                                        closestTitan = titan
                                    end
                                end
                            end

                            if closestTitan then
                                foundtitanyes = true
                                if currentTitan ~= closestTitan then
                                    currentTitan = closestTitan
                                    titanStartTime = os.clock()
                                end

                                function Store_Original_Hitbox(closestTitan)
                                    local properties = {}

                                    if closestTitan.Name == "Attack_Titan" then
                                        local hitboxnames = {"Eyes", "LeftArm", "LeftLeg", "Nape", "RightArm", "RightLeg"}

                                        for _, hitboxname in ipairs(hitboxnames) do
                                            local hitbox = closestTitan.Hitboxes.Hit:FindFirstChild(hitboxname)

                                            if hitbox then
                                                local size = hitbox.Size
                                                if size ~= Vector3.new(300, 300, 300) then
                                                    properties[hitboxname] = {
                                                        Size = size,
                                                        Anchored = hitbox.Anchored,
                                                        CanCollide = hitbox.CanCollide
                                                    }
                                                end
                                            end
                                        end
                                    end

                                    return properties
                                end

                                local storedProperties = Store_Original_Hitbox(closestTitan)

                                function restoreProperties(closestTitan, properties)
                                    if closestTitan.Name == "Attack_Titan" then
                                        local marker = closestTitan:WaitForChild("Marker")
                                        local currentAdornee = marker.Adornee

                                        marker:GetPropertyChangedSignal("Adornee"):Connect(function()
                                            if marker.Adornee ~= currentAdornee then
                                                currentAdornee = marker.Adornee

                                                local hitboxnames = {"Eyes", "LeftArm", "LeftLeg", "Nape", "RightArm", "RightLeg"}

                                                for _, hitboxname in ipairs(hitboxnames) do
                                                    local hitbox = closestTitan.Hitboxes.Hit:FindFirstChild(hitboxname)

                                                    if hitbox and properties[hitboxname] then
                                                        hitbox.Size = properties[hitboxname].Size
                                                        hitbox.Anchored = properties[hitboxname].Anchored
                                                        hitbox.CanCollide = properties[hitboxname].CanCollide
                                                    end
                                                end
                                            end
                                        end)
                                    end
                                end

                                local function Expand_Hitbox(closestTitan)
                                    local napeObject

                                    if closestTitan.Name == "Attack_Titan" and closestTitan.Hitboxes:FindFirstChild("Hit") then
                                        local hitboxname = tostring(closestTitan.Marker.Adornee)
                                        for _, hitbox in ipairs(closestTitan.Hitboxes.Hit:GetChildren()) do
                                            if hitbox.Name == hitboxname then
                                                napeObject = hitbox
                                                break
                                            end
                                        end
                                    elseif closestTitan.Name ~= "Attack_Titan" then
                                        napeObject = closestTitan.Hitboxes.Hit.Nape
                                    end

                                    if napeObject then
                                        napeObject.Size = Vector3.new(300, 300, 300)
                                        napeObject.CanCollide = false
                                        napeObject.Anchored = false
                                    end
                                end

                                local nape = currentTitan.Hitboxes.Hit.Nape
                                local currentTitanHead = currentTitan:FindFirstChild("Head") or currentTitan:GetPivot()

                                local startTime = os.clock()
                                local moveCancelled = false
                                local notfirsttp = false
                                local notsecondtp = false

                                repeat task.wait()
                                    if norefills_noblades then return end
                                    while sigmarefill do
                                        task.wait()
                                    end
                                    local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                                    local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
                                    -- gas variables
                                    local gradientOffsett = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset
                                    local gaspercentage = player.PlayerGui.Interface.HUD.Main.Top.Gas.Percentage
                                    local gaspercentagetext = gaspercentage.Text:match("%d+%.?%d*")
                                    local gaspercentageNumber = stringToNumber(gaspercentagetext)

                                    Store_Original_Hitbox(closestTitan)

                                    Expand_Hitbox(closestTitan)

                                        -- Refill Section
                                        while bladeSetsText == "0 / 3" and gradientOffset.X == 0 and not humanoid.PlatformStand or gaspercentageNumber <= 2 and gradientOffsett.Y <= 0 and not humanoid.PlatformStand do task.wait()
                                            if norefills_noblades then return end
                                            while sigmarefill do
                                                task.wait()
                                            end
                                            bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                                            gaspercentagetext = gaspercentage.Text:match("%d+%.?%d*")
                                            gaspercentageNumber = stringToNumber(gaspercentagetext)
                                            gradientOffsett = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset

                                            while skibidirefill do task.wait()
                                                --print("skibidirefill status:", skibidirefill)
                                                if not moveInProgress and not moveCancelled and not sigmarefill then
                                                    --print("skibidirefill status:", skibidirefill, "moveCancelled Status:", moveCancelled)
                                                    moveTo(character, currentTitanHead.Position + Vector3.new(0, 300, 0))--, 1)
                                                end
                                            end

                                            if not moveInProgress and not moveCancelled and not sigmarefill then
                                                --print("bladeSetsText status:", bladeSetsText, "moveCancelled Status:", moveCancelled)
                                                moveTo(character, currentTitanHead.Position + Vector3.new(0, 300, 0))--, 1)
                                            elseif bladeSetsText == "3 / 3" or gaspercentageNumber > 95 then
                                                break
                                            end

                                            --print("bladeSetsText status:", bladeSetsText, "2")
                                            if bladeSetsText == "3 / 3" or not autofarmraid or gaspercentageNumber > 95 then
                                                break
                                            end
                                        end

                                    -- //Teleport to Titan\\
                                    local distance = (humanoidRootPart.Position - currentTitanHead.Position).magnitude
                                    if not notfirsttp or not notsecondtp then
                                        if norefills_noblades then return end
                                        while sigmarefill do
                                            task.wait()
                                        end
                                        if distance < 800 then
                                            notfirsttp = true
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 130, 0))
                                        end

                                        if distance > 1200 then
                                            notfirsttp = true
                                            --moveTo(character, humanoidRootPart.Position + Vector3.new(0, 75, 0))
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 130, 0))
                                        end

                                        if distance < 2000 then
                                            notfirsttp = true
                                            --moveTo(character, humanoidRootPart.Position + Vector3.new(0, 75, 0))
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 130, 0))
                                        end

                                        distance = (humanoidRootPart.Position - currentTitanHead.Position).magnitude

                                        if not notsecondtp and distance > 700 then
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 130, 0))
                                            notsecondtp = true
                                        elseif distance < 700 and not notsecondtp then
                                            notsecondtp = true
                                        end

                                        -- \\Attack Titan//
                                    elseif notfirsttp and notsecondtp and not roar then
                                        --print("roar chest status 3:", roar)
                                        local tp_time = os.clock() + 0.5
                                        while os.clock() < tp_time do task.wait()
                                            fastmoveto(character, currentTitanHead.Position + Vector3.new(0, 400, 0))
                                            if not currentTitan:FindFirstChild("Head") then
                                                break
                                            end
                                            if norefills_noblades then return end
                                            while sigmarefill do
                                                task.wait()
                                            end
                                        end
                                        clickCenterScreen()
                                        clickCenterScreen()
                                        fastmoveto(character, currentTitanHead.Position + Vector3.new(0, distancey, 0))
                                        TP_Count = TP_Count + 1
                                        if TP_Count == 3 then
                                            restoreProperties(closestTitan, storedProperties)
                                            Expand_Hitbox(closestTitan)
                                            TP_Count = 0
                                        end
                                    end

                                    -- Check if refill
                                    if bladeSetsText == "0 / 3" and gradientOffset.X == 0 and not humanoid.PlatformStand or gaspercentageNumber <= 2 and gradientOffsett.Y <= 0 and not humanoid.PlatformStand then
                                        break
                                    end

                                    -- Time Out after 15 seconds
                                    if os.clock() - startTime >= 15 then
                                        moveCancelled = true
                                        break
                                    end

                                until moveCancelled and not skibidirefill or (humanoid.Health / humanoid.MaxHealth) * 100 < healthtpat and tplow or not autofarmraid or not currentTitan:FindFirstChild("Humanoid") or not currentTitan:FindFirstChild("Head") or player.PlayerGui.Interface.Buttons:FindFirstChildOfClass("CanvasGroup") or humanoid.PlatformStand or skibidirefill or sigmarefill

                                -- TIMEOUT LOOP
                                if moveCancelled and not humanoid.PlatformStand then
                                    local cancelStartTime = os.clock()
                                    repeat task.wait()
                                        moveTo(character, currentTitanHead.Position + Vector3.new(0, 300, 0))
                                    until os.clock() - cancelStartTime >= 2
                                end
                            end

                            -- Health recovery loop
                            if (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and tplow then
                                repeat task.wait(5)
                                until (humanoid.Health / humanoid.MaxHealth) * 100 >= healthstop or not autofarmraid or not tplow
                            end
                        end)
                        if not success then warn(err) end
                    end
                end)
            end
        end
    }, "autofarmraid")

    mainleft:Toggle({
        Name = "Autofarm Raid ALT",
        Default = autofarmraidalt,
        Callback = function(state)
            autofarmraidalt = state
            if autofarmraidalt and game.PlaceId == 14012874501 and not autofarmraid and not damagefarm and Workspace:GetAttribute("Type") == "Raids" then
                task.spawn(function()
                    oldKillCount = 0
                    local TP_Count = 0
                    local currentTitan = nil
                    local titanStartTime = os.clock()

                    -- //AUTO USE GAS\\
                    local function AutoUseGas()
                        while autofarmraidalt do task.wait()
                            if not skibidirefill and foundtitanyes and not sigmarefill then
                                vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
                                task.wait(4)
                            end
                        end
                    end

                    local function getAnimationTrack()
                        local tracks = workspace.Titans.Attack_Titan.Fake.Controller.Animator:GetPlayingAnimationTracks()
                        for _, track in ipairs(tracks) do
                            if track.Animation.AnimationId == "rbxassetid://17395738065" then
                                return track
                            end
                        end
                        return nil
                    end

                    -- // CHECK WHEN EREN ROARS TO TP ABOVE TO NOT GET HIT \\
                    local function RoarCheck()
                        while autofarmraidalt do task.wait()
                            while skibidirefill or player.PlayerGui.Interface.Rewards.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and tplow do
                                task.wait()
                            end

                            if workspace.Titans:FindFirstChild("Attack_Titan") and player.PlayerGui.Interface.HUD.Visible then
                                local currentTitanHead = workspace.Titans.Attack_Titan:FindFirstChild("Head") or workspace.Titans.Attack_Titan:GetPivot()

                                local finishedPlaying = false
                                local animationTrack = getAnimationTrack()

                                if animationTrack then
                                    local function checkAnimationTrack()
                                        while animationTrack and animationTrack.IsPlaying do task.wait(0.1)
                                            roar = true
                                            fastmoveto(character, currentTitanHead.Position + Vector3.new(0, 400, 0))
                                            while not player.PlayerGui.Interface.HUD.Visible or skibidirefill or player.PlayerGui.Interface.Rewards.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and tplow or humanoid.PlatformStand do
                                                task.wait()
                                                roar = false
                                            end
                                            if not animationTrack.IsPlaying then
                                                finishedPlaying = true
                                                roar = false
                                            end
                                        end
                                    end
                                    task.spawn(checkAnimationTrack)
                                end
                            end
                        end
                    end

                    -- //M1 CHECK\\
                    local function M1Check()
                        local attacktimer = os.clock()
                        local animationIds = {
                            "rbxassetid://14518641514", "rbxassetid://14518654101",
                            "rbxassetid://14518651360", "rbxassetid://14518648320"
                        }
                        while autofarmraidalt do task.wait()
                            if skibidirefill or player.PlayerGui.Interface.Chests.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and tplow or norefills_noblades then
                                attacktimer = os.clock()
                            end
                            local tracks = humanoid:GetPlayingAnimationTracks()
                            for _, track in ipairs(tracks) do
                                if table.find(animationIds, track.Animation.AnimationId) then
                                    attacktimer = os.clock()
                                    break
                                end
                            end
                            if os.clock() - attacktimer >= 30 then
                                humanoid.Health = 0
                                break
                            end
                        end
                    end

                    local function autoresetnoblades_orrefills()
                        while autofarmraidalt do task.wait()
                            local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                            local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
                            if player:GetAttribute("Refills") == 0 and bladeSetsText == "0 / 3" and character["Rig_"..player.Name].LeftHand.Blade_1.Transparency == 1 and gradientOffset.X == 0 then
                                norefills_noblades = true
                                if player.PlayerGui.Interface.Warning.TextTransparency == 1 and player.PlayerGui.Interface.Warning.TextStrokeTransparency == 1 then
                                    humanoid.Health = 0
                                else
                                    moveTo(character, teleportBaseplate.Position + Vector3.new(0, 3, 0))
                                end
                            end
                        end
                    end

                    task.spawn(AutoUseGas)
                    task.spawn(M1Check)
                    task.spawn(RoarCheck)
                    task.spawn(autoresetnoblades_orrefills)

                    -- //START OF AUTO FARM\\
                    while autofarmraidalt do task.wait()
                        if norefills_noblades then return end
                        while sigmarefill do
                            task.wait()
                        end
                        foundtitanyes = false
                        local success, err = pcall(function()
                            while player.PlayerGui.Interface.HUD.Visible == false do
                                task.wait()
                            end

                            while player:GetAttribute("Cutscene") == true do
                                task.wait()
                            end

                            task.spawn(function()
                                pcall(function()
                                    task.wait(.5)
                                    if workspace:FindFirstChild("Climbable") then
                                        for _, v in pairs(workspace.Climbable.Buildings:GetChildren()) do
                                            if v.Name ~= "Trost_House6" then
                                                v:Destroy()
                                            end
                                        end
                                    end
                                end)
                            end)

                            -- //REMOVE SHIGANSHINA WALLS\\ 
                            task.spawn(function()
                                pcall(function()
                                    task.wait(.5)
                                    if workspace:FindFirstChild("Climbable") and workspace.Climbable:FindFirstChild("Walls") then
                                        game.Workspace.Climbable.Walls:Destroy()
                                    end
                                end)
                            end)

                            -- //GET CLOSEST TITAN TO ROCK OR EREN\\
                            local a = workspace.Unclimbable:FindFirstChild("Objective")
                            local b = a:FindFirstChild("Defend_Eren")
                            local c
                            local objectivePart
                            if b:FindFirstChild("Attack_Titan") then
                                c = b:FindFirstChild("Attack_Titan")
                                objectivePart = c:FindFirstChild("HumanoidRootPart")
                            elseif not b:FindFirstChild("Attack_Titan") then
                                c = b:FindFirstChild("BigRock")
                                objectivePart = c
                            end

                            local closestTitan = nil
                            local secondClosestTitan = nil
                            local closestDistance = math.huge
                            local secondClosestDistance = math.huge

                            for _, titan in pairs(workspace.Titans:GetChildren()) do
                                if titan:IsA("Model") and titan.Hitboxes:FindFirstChild("Hit"):FindFirstChild("Nape") and titan:FindFirstChild("Humanoid") and not humanoid.PlatformStand then
                                    local titanPosition = titan.Head.Position
                                    local objectivePosition = objectivePart.Position
                                    local distance = (titanPosition - objectivePosition).magnitude

                                    if titan.Name == "Attack_Titan" then
                                        closestTitan = titan
                                        secondClosestTitan = titan
                                        break
                                    elseif distance < closestDistance then
                                        secondClosestDistance = closestDistance
                                        secondClosestTitan = closestTitan

                                        closestDistance = distance
                                        closestTitan = titan
                                    elseif distance < secondClosestDistance then
                                        secondClosestDistance = distance
                                        secondClosestTitan = titan
                                    end
                                end
                            end

                            if secondClosestTitan then
                                foundtitanyes = true
                                if currentTitan ~= secondClosestTitan then
                                    currentTitan = secondClosestTitan
                                    titanStartTime = os.clock()
                                end

                                function Store_Original_Hitbox(closestTitan)
                                    local properties = {}

                                    if closestTitan.Name == "Attack_Titan" then
                                        local hitboxnames = {"Eyes", "LeftArm", "LeftLeg", "Nape", "RightArm", "RightLeg"}

                                        for _, hitboxname in ipairs(hitboxnames) do
                                            local hitbox = closestTitan.Hitboxes.Hit:FindFirstChild(hitboxname)

                                            if hitbox then
                                                local size = hitbox.Size
                                                if size ~= Vector3.new(300, 300, 300) then
                                                    properties[hitboxname] = {
                                                        Size = size,
                                                        Anchored = hitbox.Anchored,
                                                        CanCollide = hitbox.CanCollide
                                                    }
                                                end
                                            end
                                        end
                                    end

                                    return properties
                                end

                                local storedProperties = Store_Original_Hitbox(closestTitan)

                                function restoreProperties(closestTitan, properties)
                                    if closestTitan.Name == "Attack_Titan" then
                                        local marker = closestTitan:WaitForChild("Marker")
                                        local currentAdornee = marker.Adornee

                                        marker:GetPropertyChangedSignal("Adornee"):Connect(function()
                                            if marker.Adornee ~= currentAdornee then
                                                currentAdornee = marker.Adornee

                                                local hitboxnames = {"Eyes", "LeftArm", "LeftLeg", "Nape", "RightArm", "RightLeg"}

                                                for _, hitboxname in ipairs(hitboxnames) do
                                                    local hitbox = closestTitan.Hitboxes.Hit:FindFirstChild(hitboxname)

                                                    if hitbox and properties[hitboxname] then
                                                        hitbox.Size = properties[hitboxname].Size
                                                        hitbox.Anchored = properties[hitboxname].Anchored
                                                        hitbox.CanCollide = properties[hitboxname].CanCollide
                                                    end
                                                end
                                            end
                                        end)
                                    end
                                end

                                local function Expand_Hitbox(closestTitan)
                                    local napeObject

                                    if closestTitan.Name == "Attack_Titan" and closestTitan.Hitboxes:FindFirstChild("Hit") then
                                        local hitboxname = tostring(closestTitan.Marker.Adornee)
                                        for _, hitbox in ipairs(closestTitan.Hitboxes.Hit:GetChildren()) do
                                            if hitbox.Name == hitboxname then
                                                napeObject = hitbox
                                                break
                                            end
                                        end
                                    elseif closestTitan.Name ~= "Attack_Titan" then
                                        napeObject = closestTitan.Hitboxes.Hit.Nape
                                    end

                                    if napeObject then
                                        napeObject.Size = Vector3.new(300, 300, 300)
                                        napeObject.CanCollide = false
                                        napeObject.Anchored = false
                                    end
                                end

                                local nape = currentTitan.Hitboxes.Hit.Nape
                                local currentTitanHead = currentTitan:FindFirstChild("Head") or currentTitan:GetPivot()

                                local startTime = os.clock()
                                local moveCancelled = false
                                local notfirsttp = false
                                local notsecondtp = false

                                repeat task.wait()
                                    if norefills_noblades then return end
                                    while sigmarefill do
                                        task.wait()
                                    end
                                    local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                                    local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
                                    -- gas variables
                                    local gradientOffsett = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset
                                    local gaspercentage = player.PlayerGui.Interface.HUD.Main.Top.Gas.Percentage
                                    local gaspercentagetext = gaspercentage.Text:match("%d+%.?%d*")
                                    local gaspercentageNumber = stringToNumber(gaspercentagetext)

                                    Store_Original_Hitbox(closestTitan)

                                    Expand_Hitbox(closestTitan)

                                    -- Refill Section
                                    while bladeSetsText == "0 / 3" and gradientOffset.X == 0 and not humanoid.PlatformStand or gaspercentageNumber <= 2 and gradientOffsett.Y <= 0 and not humanoid.PlatformStand do task.wait()
                                        if norefills_noblades then return end
                                        while sigmarefill do
                                            task.wait()
                                        end
                                        bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                                        gaspercentagetext = gaspercentage.Text:match("%d+%.?%d*")
                                        gaspercentageNumber = stringToNumber(gaspercentagetext)
                                        gradientOffsett = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset

                                        while skibidirefill do task.wait()
                                            --print("skibidirefill status:", skibidirefill)
                                            if not moveInProgress and not moveCancelled and not sigmarefill then
                                                --print("skibidirefill status:", skibidirefill, "moveCancelled Status:", moveCancelled)
                                                moveTo(character, currentTitanHead.Position + Vector3.new(0, 300, 0))
                                            end
                                        end

                                        if not moveInProgress and not moveCancelled and not sigmarefill then
                                            --print("bladeSetsText status:", bladeSetsText, "moveCancelled Status:", moveCancelled)
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 300, 0))
                                        elseif bladeSetsText == "3 / 3" or gaspercentageNumber > 95 then
                                            break
                                        end

                                        --print("bladeSetsText status:", bladeSetsText, "2")
                                        if bladeSetsText == "3 / 3" or not autofarmraidalt or gaspercentageNumber > 95 then
                                            break
                                        end
                                    end

                                    -- //Teleport to Titan\\
                                    local distance = (humanoidRootPart.Position - currentTitanHead.Position).magnitude
                                    if not notfirsttp or not notsecondtp then
                                        if norefills_noblades then return end
                                        while sigmarefill do
                                            task.wait()
                                        end
                                        if distance < 800 then
                                            notfirsttp = true
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 130, 0))
                                        end

                                        if distance > 1200 then
                                            notfirsttp = true
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 130, 0))
                                        end

                                        if distance < 2000 then
                                            notfirsttp = true
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 130, 0))
                                        end

                                        distance = (humanoidRootPart.Position - currentTitanHead.Position).magnitude

                                        if not notsecondtp and distance > 700 then
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 130, 0))
                                            notsecondtp = true
                                        elseif distance < 700 and not notsecondtp then
                                            notsecondtp = true
                                        end

                                        -- \\Attack Titan//
                                    elseif notfirsttp and notsecondtp then
                                        local tp_time = os.clock() + 0.5
                                        while os.clock() < tp_time do task.wait()
                                            fastmoveto(character, currentTitanHead.Position + Vector3.new(0, 400, 0))
                                            if not currentTitan:FindFirstChild("Head") then
                                                break
                                            end
                                            if norefills_noblades then return end
                                            while sigmarefill do
                                                task.wait()
                                            end
                                        end
                                        clickCenterScreen()
                                        clickCenterScreen()
                                        fastmoveto(character, currentTitanHead.Position + Vector3.new(0, distancey, 0))
                                        TP_Count = TP_Count + 1
                                        if TP_Count == 3 then
                                            restoreProperties(closestTitan, storedProperties)
                                            Expand_Hitbox(closestTitan)
                                            TP_Count = 0
                                        end
                                    end

                                    -- Check if refill
                                    if bladeSetsText == "0 / 3" and gradientOffset.X == 0 and not humanoid.PlatformStand or gaspercentageNumber <= 2 and gradientOffsett.Y <= 0 and not humanoid.PlatformStand then
                                        break
                                    end

                                    -- Time Out after 15 seconds
                                    if os.clock() - startTime >= 15 then
                                        moveCancelled = true
                                        break
                                    end

                                until moveCancelled and not skibidirefill or (humanoid.Health / humanoid.MaxHealth) * 100 < healthtpat and tplow or not autofarmraidalt or not currentTitan:FindFirstChild("Humanoid") or not currentTitan:FindFirstChild("Head") or player.PlayerGui.Interface.Buttons:FindFirstChildOfClass("CanvasGroup") or humanoid.PlatformStand or skibidirefill or sigmarefill

                                -- TIMEOUT LOOP
                                if moveCancelled and not humanoid.PlatformStand then
                                    local cancelStartTime = os.clock()
                                    repeat task.wait()
                                        moveTo(character, currentTitanHead.Position + Vector3.new(0, 300, 0))
                                        if norefills_noblades then return end
                                    until os.clock() - cancelStartTime >= 2
                                end
                            end

                            -- Health recovery loop
                            if (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and tplow then
                                repeat task.wait(5)
                                until (humanoid.Health / humanoid.MaxHealth) * 100 >= healthstop or not autofarmraidalt or not tplow
                            end
                        end)
                        if not success then warn(err) end
                    end
                end)
            end
        end
    }, "autofarmraidalt")

    mainleft:Toggle({
        Name = "Tp SafeSpot at low Health",
        Default = autotp,
        Callback = function(state)
            autotp = state
            if autotp then
                task.spawn(function()
                    while autotp do task.wait()
                        local success, err = pcall(function()
                            tplow = false
                            local teleportBaseplate = workspace:FindFirstChild("TeleportBaseplate")
    
                            if teleportBaseplate and humanoid and humanoid.MaxHealth > 0 then
                                local currentHealthPercent = (humanoid.Health / humanoid.MaxHealth) * 100
                                if currentHealthPercent <= healthtpat and humanoid.PlatformStand == false then
                                    tplow = true
                                    repeat task.wait(.2)
                                        moveTo(character, teleportBaseplate.Position + Vector3.new(0, 3, 0))
                                        currentHealthPercent = (humanoid.Health / humanoid.MaxHealth) * 100
                                    until currentHealthPercent >= healthstop or not autotp
                                end
                            end
                            if not autotp then
                                tplow = false
                            end
                        end)
                        if not success then
                            warn(err)
                        end
                    end
                end)
            end
        end
    }, "autotptosafeatlowhealth")

    local kickOnDeath = false

    mainleft:Label({
        Text = "Use below to help save streak"
    })

    mainleft:Toggle({
        Name = "Kick on Death",
        Default = false,
        Callback = function(state)
            kickOnDeath = state
            if kickOnDeath then
                humanoid.Died:Connect(function()
                    player:Kick("KICKED YOU TO SAVE YOUR STREAK")
                end)
            end
        end
    }, "kickondeath")

    mainleft:Toggle({
        Name = "Auto Deaths/ Damage Farm",
        Default = damagefarm,
        Callback = function(state)
            damagefarm = state
            if damagefarm and game.PlaceId ~= 13379208636 and game.PlaceId ~= 14916516914 then
                task.spawn(function()
                    local currentTitan = nil
                    while damagefarm do task.wait()
                        local success, err = pcall(function()
                            local closestTitan = nil
                            local closestDistance = math.huge

                            for _, titan in pairs(workspace.Titans:GetChildren()) do
                                if titan:IsA("Model") and titan.Hitboxes:FindFirstChild("Hit"):FindFirstChild("Nape") and titan:FindFirstChild("Humanoid") and titan:FindFirstChild("Head") and not humanoid.PlatformStand then
                                    local distance = (titan.Head.Position - humanoidRootPart.Position).magnitude
                                    if distance < closestDistance then
                                        closestDistance = distance
                                        closestTitan = titan
                                    end
                                end
                            end

                            if closestTitan then
                                if currentTitan ~= closestTitan then
                                    currentTitan = closestTitan
                                end

                                while humanoid.PlatformStand do
                                    task.wait()
                                end

                                while player:GetAttribute("Cutscene") == true do
                                    task.wait()
                                end

                                local currentTitanHead = currentTitan:FindFirstChild("Head") or currentTitan:GetPivot()
                                moveTo(character, currentTitanHead.Position)
                            end
                        end)
                        if not success then warn(err) end
                    end
                end)
            end
        end
    }, "deathsanddamagefarm")

    mainright:Header({
        Text = "Important Farming Settings"
    })

    mainright:Slider({
        Name = "Health to TP At",
        Minimum = 1,
        Maximum = 80,
        Default = 40,
        DisplayMethod = "Percent",
        Precision = 0,
        Callback = function(value)
            healthtpat = value
        end
    }, "healthtotopat")

    mainright:Slider({
        Name = "Wait Until Health is",
        Minimum = 60,
        Maximum = 100,
        Default = 100,
        DisplayMethod = "Percent",
        Precision = 0,
        Callback = function(value)
            healthstop = value
        end
    }, "waituntilhealthis")

    mainright:Slider({
        Name = "Reset Character Timer",
        Minimum = 10,
        Maximum = 1000,
        Default = 120,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(value)
            resettimer = value
        end
    }, "resettimer")

    mainright:Slider({
        Name = "Distance",
        Minimum = 60,
        Maximum = 400,
        Default = 120,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(value)
            distancey = value
        end
    }, "distance")

    mainright:Toggle({
        Name = "Reset On Timer",
        Default = resetontimer,
        Callback = function(state)
            resetontimer = state
            if resetontimer and game.PlaceId ~= 13379208636 and game.PlaceId ~= 14916516914 then
                task.spawn(function()
                    while resetontimer do task.wait()
                        pcall(function()
                            for _, titan in pairs(workspace.Titans:GetChildren()) do
                                if titan:IsA("Model")  and titan.Hitboxes:FindFirstChild("Hit"):FindFirstChild("Nape") and titan:FindFirstChild("Humanoid") and humanoid.PlatformStand == false then
                                    task.wait(resettimer)
                                    if titan:FindFirstChild("Humanoid") then
                                        sigmaskibidi = true
                                        repeat task.wait(.1)

                                            while humanoid.PlatformStand == true do
                                                task.wait()
                                            end

                                            humanoid.Health = 0
                                            --moveTo(character, titan.Head.Position, 1)

                                        until humanoid.PlatformStand == true or resetontimer == false
                                    end
                                end
                            end
                        end)
                    end
                end)
            end
        end
    }, "resetontimer")

    mainright:Divider()

    mainright:Header({
        Text = "Skills"
    })

    local keyHealthThresholds = {
        ["One"] = 100,
        ["Two"] = 100,
        ["Three"] = 100,
        ["Four"] = 100,
        ["Five"] = 100
    }

    mainright:Dropdown({
        Name = "Select Keys to Spam",
        Multi = true,
        Options = {"One", "Two", "Three", "Four", "Five"},
        Callback = function(selectedValues)
            SelectedKeys = {}
            for key, isSelected in pairs(selectedValues) do
                if isSelected then
                    table.insert(SelectedKeys, key)
                end
            end
        end
    }, "SelectedKeysToSpam")

    mainright:Slider({
        Name = "Health Threshold for Key 1",
        Default = 100,
        Minimum = 0,
        Maximum = 100,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(value)
            keyHealthThresholds["One"] = value
        end
    }, "KeyOneHealthThreshold")

    mainright:Slider({
        Name = "Health Threshold for Key 2",
        Default = 100,
        Minimum = 0,
        Maximum = 100,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(value)
            keyHealthThresholds["Two"] = value
        end
    }, "KeyTwoHealthThreshold")

    mainright:Slider({
        Name = "Health Threshold for Key 3",
        Default = 100,
        Minimum = 0,
        Maximum = 100,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(value)
            keyHealthThresholds["Three"] = value
        end
    }, "KeyThreeHealthThreshold")

    mainright:Slider({
        Name = "Health Threshold for Key 4",
        Default = 100,
        Minimum = 0,
        Maximum = 100,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(value)
            keyHealthThresholds["Four"] = value
        end
    }, "KeyFourHealthThreshold")

    mainright:Slider({
        Name = "Health Threshold for Key 5",
        Default = 100,
        Minimum = 0,
        Maximum = 100,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(value)
            keyHealthThresholds["Five"] = value
        end
    }, "KeyFiveHealthThreshold")

    mainright:Toggle({
        Name = "Spam Chosen Keys",
        Default = spamkeys,
        Callback = function(state)
            spamkeys = state
            if spamkeys then
                task.spawn(function()
                    while spamkeys do task.wait(.1)
                        local healthPercentage = getHealthPercentage()

                        for _, key in ipairs(SelectedKeys) do
                            local threshold = keyHealthThresholds[key]
                            if healthPercentage <= threshold then
                                pcall(function()
                                    local keyCode = Enum.KeyCode[key]
                                    vim:SendKeyEvent(true, keyCode, false, game)
                                    task.wait(.1)
                                    vim:SendKeyEvent(false, keyCode, false, game)
                                end)
                            end
                        end
                    end
                end)
            end
        end
    }, "SpamChosenKeys")

    mainright:Toggle({
        Name = "Auto Rejoin if dc or kick",
        Default = autorejoin,
        Callback = function(state)
            autorejoin = state
            if autorejoin then
                task.spawn(function()
                    local success, err = pcall(function()
                        GuiService.ErrorMessageChanged:Connect(function()
                            local httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
                            if httprequest then
                                local servers = {}
                                local req = httprequest({
                                    Url = string.format(
                                        "https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true",
                                        13379208636
                                    )
                                })
                                local body = httpService:JSONDecode(req.Body)

                                if body and body.data then
                                    for _, server in next, body.data do
                                        if type(server) == "table" and server.playing and server.maxPlayers and server.playing < server.maxPlayers and server.id ~= JobId then
                                            table.insert(servers, server.id)
                                        end
                                    end
                                end

                                if #servers > 0 then
                                    local targetServer = servers[math.random(1, #servers)]
                                    TeleportService:TeleportToPlaceInstance(13379208636, targetServer, player)
                                else
                                    sendNotification("Auto Rejoin", "No suitable servers found. Retrying...", 5)
                                end
                            else
                                sendNotification("Incompatible Exploit", "Your exploit does not support Auto Rejoin", 10)
                            end
                        end)
                    end)
                    if not success then warn(err) end
                end)
            end
        end
    }, "autorejoin")

    -- Tab5:Toggle({
    --     Name = "Autofarm Streak (Raid)",
    --     Default = autofarmraidstreak,
    --     Callback = function(state)
    --         autofarmraidstreak = state
    --         settings.AutoFarmRaidStreak = state
    --         saveSettings(settings)
    --         if autofarmraidstreak and game.PlaceId == 14012874501 and not damagefarm and Workspace:GetAttribute("Type") == "Raids" then
    --             task.spawn(function()
    --                 local roar = false
    --                 oldKillCount = 0
    --                 local TP_Count = 0
    --                 local currentTitan = nil
    --                 local titanStartTime = os.clock()

    --                 local function getAnimationTrack()
    --                     local tracks = workspace.Titans.Attack_Titan.Fake.Controller.Animator:GetPlayingAnimationTracks()
    --                     for _, track in ipairs(tracks) do
    --                         if track.Animation.AnimationId == "rbxassetid://17395738065" then
    --                             return track
    --                         end
    --                     end
    --                     return nil
    --                 end

    --                 -- // CHECK WHEN EREN ROARS TO TP ABOVE TO NOT GET HIT \\
    --                 local function RoarCheck()
    --                     while autofarmraidstreak do task.wait()

    --                         while skibidirefill or player.PlayerGui.Interface.Rewards.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and tplow do
    --                             task.wait()
    --                         end

    --                         if workspace.Titans:FindFirstChild("Attack_Titan") and player.PlayerGui.Interface.HUD.Visible then
    --                             local currentTitanHead = workspace.Titans.Attack_Titan:FindFirstChild("Head") or workspace.Titans.Attack_Titan:GetPivot()

    --                             local finishedPlaying = false
    --                             local animationTrack = getAnimationTrack()

    --                             if animationTrack then
    --                                 local function checkAnimationTrack()
    --                                     while animationTrack and animationTrack.IsPlaying do task.wait(.1)
    --                                         roar = true
    --                                         fastmoveto(character, currentTitanHead.Position + Vector3.new(0, 400, 0))
    --                                         while not player.PlayerGui.Interface.HUD.Visible or skibidirefill or player.PlayerGui.Interface.Rewards.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and tplow or humanoid.PlatformStand do
    --                                             task.wait()
    --                                             roar = false
    --                                         end
    --                                         if not animationTrack.IsPlaying then
    --                                             finishedPlaying = true
    --                                             roar = false
    --                                         end
    --                                     end
    --                                 end
    --                                 task.spawn(checkAnimationTrack)
    --                             end
    --                         end
    --                     end
    --                 end

    --                 -- //AUTO USE GAS\\
    --                 local function AutoUseGas()
    --                     while autofarmraidstreak do task.wait()
    --                         if not skibidirefill and foundtitanyes then
    --                             vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
    --                             task.wait(.1)
    --                             vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
    --                             task.wait(.1)
    --                             vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
    --                             task.wait(.1)
    --                             vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
    --                             task.wait(4)
    --                         end
    --                     end
    --                 end

    --                 -- //M1 CHECK\\
    --                 local function M1Check()
    --                     local attacktimer = os.clock()
    --                     local animationIds = {
    --                         "rbxassetid://14518641514", "rbxassetid://14518654101",
    --                         "rbxassetid://14518651360", "rbxassetid://14518648320"
    --                     }
    --                     while autofarmraidstreak do task.wait()
    --                         if skibidirefill or player.PlayerGui.Interface.Chests.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and tplow then
    --                             attacktimer = os.clock()
    --                         end
    --                         local tracks = humanoid:GetPlayingAnimationTracks()
    --                         for _, track in ipairs(tracks) do
    --                             if table.find(animationIds, track.Animation.AnimationId) then
    --                                 attacktimer = os.clock()
    --                                 break
    --                             end
    --                         end
    --                         if os.clock() - attacktimer >= 30 then
    --                             humanoid.Health = 0
    --                             break
    --                         end
    --                     end
    --                 end

    --                 local function autoresetnoblades_orrefills()
    --                     while autofarmraidstreak do task.wait()
    --                         local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
    --                         local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
    --                         if player:GetAttribute("Refills") == 0 and bladeSetsText == "0 / 3" and character["Rig_"..player.Name].LeftHand.Blade_1.Transparency == 1 and gradientOffset.X == 0 and player.PlayerGui.Interface.Warning.TextTransparency == 1 and player.PlayerGui.Interface.Warning.TextStrokeTransparency == 1 then
    --                             humanoid.Health = 0
    --                         end
    --                     end
    --                 end

    --                 task.spawn(AutoUseGas)
    --                 task.spawn(M1Check)
    --                 task.spawn(RoarCheck)
    --                 task.spawn(autoresetnoblades_orrefills)

    --                 -- //START OF AUTO FARM\\
    --                 while autofarmraidstreak do task.wait()
    --                     foundtitanyes = false
    --                     local success, err = pcall(function()

    --                         while player.PlayerGui.Interface.HUD.Visible == false do
    --                             task.wait()
    --                         end

    --                         while player:GetAttribute("Cutscene") == true do
    --                             task.wait()
    --                         end

    --                         task.spawn(function()
    --                             pcall(function()
    --                                 task.wait(.5)
    --                                 if workspace:FindFirstChild("Climbable") then
    --                                     for _, v in pairs(workspace.Climbable.Buildings:GetChildren()) do
    --                                         if v.Name ~= "Trost_House6" then
    --                                             v:Destroy()
    --                                         end
    --                                     end
    --                                 end
    --                             end)
    --                         end)

    --                         -- //REMOVE SHIGANSHINA WALLS\\ 
    --                         task.spawn(function()
    --                             pcall(function()
    --                                 task.wait(.5)
    --                                 if workspace:FindFirstChild("Climbable") and workspace.Climbable:FindFirstChild("Walls") then
    --                                     game.Workspace.Climbable.Walls:Destroy()
    --                                 end
    --                             end)
    --                         end)

    --                         -- //GET CLOSEST TITAN TO ROCK OR EREN\\
    --                         local a = workspace.Unclimbable:FindFirstChild("Objective")
    --                         local b = a:FindFirstChild("Defend_Eren")
    --                         local c
    --                         local objectivePart
    --                         if b:FindFirstChild("Attack_Titan") then
    --                             c = b:FindFirstChild("Attack_Titan")
    --                             objectivePart = c:FindFirstChild("HumanoidRootPart")
    --                         elseif not b:FindFirstChild("Attack_Titan") then
    --                             c = b:FindFirstChild("BigRock")
    --                             objectivePart = c
    --                         end

    --                         local closestTitan = nil
    --                         local closestDistance = math.huge

    --                         for _, titan in pairs(workspace.Titans:GetChildren()) do
    --                             if titan:IsA("Model") and titan.Name ~= "Attack_Titan" and titan.Hitboxes:FindFirstChild("Hit"):FindFirstChild("Nape") and titan:FindFirstChild("Humanoid") and not humanoid.PlatformStand then
    --                                 local titanPosition = titan.Head.Position
    --                                 local objectivePosition = objectivePart.Position
    --                                 local distance = (titanPosition - objectivePosition).magnitude

    --                                 if distance < closestDistance then
    --                                     closestDistance = distance
    --                                     closestTitan = titan
    --                                 end
    --                             end
    --                         end

    --                         if closestTitan then
    --                             foundtitanyes = true
    --                             if currentTitan ~= closestTitan then
    --                                 currentTitan = closestTitan
    --                                 titanStartTime = os.clock()
    --                             end

    --                             local nape = currentTitan.Hitboxes.Hit.Nape
    --                             local currentTitanHead = currentTitan:FindFirstChild("Head") or currentTitan:GetPivot()

    --                             local startTime = os.clock()
    --                             local moveCancelled = false
    --                             local notfirsttp = false
    --                             local notsecondtp = false

    --                             repeat task.wait()

    --                                 local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
    --                                 local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
    --                                 -- gas variables
    --                                 local gradientOffsett = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset
    --                                 local gaspercentage = player.PlayerGui.Interface.HUD.Main.Top.Gas.Percentage
    --                                 local gaspercentagetext = gaspercentage.Text:match("%d+%.?%d*")
    --                                 local gaspercentageNumber = stringToNumber(gaspercentagetext)

    --                                 nape.Size, nape.CanCollide, nape.Anchored = Vector3.new(300, 300, 300), false, false

    --                                 -- Refill Section
    --                                 while bladeSetsText == "0 / 3" and gradientOffset.X == 0 and not humanoid.PlatformStand or gaspercentageNumber <= 2 and gradientOffsett.Y <= 0 and not humanoid.PlatformStand do task.wait()

    --                                     bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
    --                                     gaspercentagetext = gaspercentage.Text:match("%d+%.?%d*")
    --                                     gaspercentageNumber = stringToNumber(gaspercentagetext)
    --                                     gradientOffsett = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset

    --                                     while skibidirefill do task.wait()
    --                                         --print("skibidirefill status:", skibidirefill)
    --                                         if not moveInProgress and not moveCancelled and not sigmarefill then
    --                                             --print("skibidirefill status:", skibidirefill, "moveCancelled Status:", moveCancelled)
    --                                             moveTo(character, currentTitanHead.Position + Vector3.new(0, 300, 0))--, 1)
    --                                         end
    --                                     end

    --                                     if not moveInProgress and not moveCancelled and not sigmarefill then
    --                                         --print("bladeSetsText status:", bladeSetsText, "moveCancelled Status:", moveCancelled)
    --                                         moveTo(character, currentTitanHead.Position + Vector3.new(0, 300, 0))--, 1)
    --                                     elseif bladeSetsText == "3 / 3" or gaspercentageNumber > 95 then
    --                                         break
    --                                     end

    --                                     --print("bladeSetsText status:", bladeSetsText, "2")
    --                                     if bladeSetsText == "3 / 3" or not autofarmraidstreak or gaspercentageNumber > 95 then
    --                                         break
    --                                     end
    --                                 end

    --                                 -- //Teleport to Titan\\
    --                                 local distance = (humanoidRootPart.Position - currentTitanHead.Position).magnitude
    --                                 if not notfirsttp or not notsecondtp then
    --                                     if distance < 800 then
    --                                         notfirsttp = true
    --                                         moveTo(character, currentTitanHead.Position + Vector3.new(0, 130, 0))
    --                                     end

    --                                     if distance > 1200 then
    --                                         notfirsttp = true
    --                                         --moveTo(character, humanoidRootPart.Position + Vector3.new(0, 75, 0))
    --                                         moveTo(character, currentTitanHead.Position + Vector3.new(0, 130, 0))
    --                                     end

    --                                     if distance < 2000 then
    --                                         notfirsttp = true
    --                                         --moveTo(character, humanoidRootPart.Position + Vector3.new(0, 75, 0))
    --                                         moveTo(character, currentTitanHead.Position + Vector3.new(0, 130, 0))
    --                                     end

    --                                     distance = (humanoidRootPart.Position - currentTitanHead.Position).magnitude

    --                                     if not notsecondtp and distance > 700 then
    --                                         moveTo(character, currentTitanHead.Position + Vector3.new(0, 130, 0))
    --                                         notsecondtp = true
    --                                     elseif distance < 700 and not notsecondtp then
    --                                         notsecondtp = true
    --                                     end

    --                                     -- \\Attack Titan//
    --                                 elseif notfirsttp and notsecondtp and not roar then
    --                                     --print("roar chest status 3:", roar)
    --                                     local tp_time = os.clock() + 0.5
    --                                     while os.clock() < tp_time do task.wait()
    --                                         fastmoveto(character, currentTitanHead.Position + Vector3.new(0, 400, 0))
    --                                         if not currentTitan:FindFirstChild("Head") then
    --                                             break
    --                                         end
    --                                     end
    --                                     clickCenterScreen()
    --                                     fastmoveto(character, currentTitanHead.Position + Vector3.new(0, distancey, 0))
    --                                 end

    --                                 -- Check if refill
    --                                 if bladeSetsText == "0 / 3" and gradientOffset.X == 0 and not humanoid.PlatformStand or gaspercentageNumber <= 2 and gradientOffsett.Y <= 0 and not humanoid.PlatformStand then
    --                                     break
    --                                 end

    --                                 -- Time Out after 15 seconds
    --                                 if os.clock() - startTime >= 15 then
    --                                     moveCancelled = true
    --                                     break
    --                                 end

    --                             until moveCancelled and not skibidirefill or (humanoid.Health / humanoid.MaxHealth) * 100 < healthtpat and tplow or not autofarmraidstreak or not currentTitan:FindFirstChild("Humanoid") or not currentTitan:FindFirstChild("Head") or player.PlayerGui.Interface.Buttons:FindFirstChildOfClass("CanvasGroup") or humanoid.PlatformStand

    --                             -- TIMEOUT LOOP
    --                             if moveCancelled and not humanoid.PlatformStand then
    --                                 local cancelStartTime = os.clock()
    --                                 repeat task.wait()
    --                                     moveTo(character, currentTitanHead.Position + Vector3.new(0, 300, 0))
    --                                 until os.clock() - cancelStartTime >= 2
    --                             end
    --                         end

    --                         -- Health recovery loop
    --                         if (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and tplow then
    --                             repeat task.wait(5)
    --                             until (humanoid.Health / humanoid.MaxHealth) * 100 >= healthstop or not autofarmraidstreak or not tplow
    --                         end
    --                     end)
    --                     if not success then warn(err) end
    --                 end
    --             end)
    --         end
    --     end
    -- })

    mainfarmsettingsleft:Header({
        Text = "Main Farm Settings"
    })

    mainfarmsettingsleft:Toggle({
        Name = "Auto Hit",
        Default = autohit,
        Callback = function(state)
            autohit = state
            if autohit and game.PlaceId ~= 13379208636 and game.PlaceId ~= 14916516914 and not damagefarm then
                task.spawn(function()
                    while autohit do task.wait()
                        pcall(function()
                            local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                            local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset

                            local clickX = math.floor(screenWidth * 0.5)
                            local clickY = math.floor(screenHeight * 0.0001)


                            for _, titan in pairs(workspace.Titans:GetChildren()) do
                                if titan:IsA("Model") and titan.Hitboxes:FindFirstChild("Hit"):FindFirstChild("Nape") and titan:FindFirstChild("Humanoid") and humanoid.PlatformStand == false and character["Rig_"..player.Name].LeftHand.Blade_1.Transparency ~= 1 and sigmaskibidi == false then
                                    local distance = (humanoidRootPart.Position - titan.Head.Position).Magnitude
                                    if distance < 300 then
                                        vim:SendMouseButtonEvent(clickX, clickY, 0, true, game, 1)
                                        vim:SendMouseButtonEvent(clickX, clickY, 0, false, game, 0)
                                        task.wait(.2)
                                    end
                                end
                            end
                        end)
                    end
                end)
            end
        end
    }, "autohit")

    mainfarmsettingsleft:Toggle({
        Name = "Auto Reload Blades",
        Default = autorel,
        Callback = function(state)
            autorel = state
            if autorel and game.PlaceId ~= 13379208636 and game.PlaceId ~= 14916516914 then
                task.spawn(function()
                    while autorel do task.wait(1)
                        pcall(function()
                            local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
                            local teleportBaseplate = workspace:FindFirstChild("TeleportBaseplate")
                            local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
    
                            if gradientOffset.X == 0 and bladeSetsText ~= "0 / 3" and not humanoid.PlatformStand then
                                --print("Reloading", gradientOffset.X, bladeSetsText)

                                vim:SendKeyEvent(true, Enum.KeyCode.R, false, game)

                                for i = 1,50 do

                                    while humanoid.PlatformStand == true do
                                        task.wait()
                                    end

                                    -- //TP ABOVE TITAN WHILE RELOAD\\

                                    moveTo(character, titan.Head.Position + Vector3.new(0, 300, 0))
                                    task.wait(.1)

                                end
                                --print("Finished Reloading", gradientOffset.X, bladeSetsText)                               
                            end
                        end)
                    end
                end)
            end
        end
    }, "autoreloadblades")

    mainfarmsettingsleft:Toggle({
        Name = "Auto Escape Grab",
        Default = escape,
        Callback = function(state)
            escape = state
            if escape and not damagefarm then
                task.spawn(function()
                    while escape do task.wait(math.random(0.1, 0.7))
                        pcall(function()
                            local buttons = player.PlayerGui.Interface.Buttons
                            for i, v in pairs(buttons:GetChildren()) do
                                if v:IsA("CanvasGroup") and not sigmaskibidi then
                                    local skibidi = v.Name
                                    vim:SendKeyEvent(true, Enum.KeyCode[skibidi], false, game)
                                    wait(.1)
                                    vim:SendKeyEvent(false, Enum.KeyCode[skibidi], false, game)
                                    wait(.1)
                                end
                            end
                        end)
                    end
                end)
            end
        end
    }, "autoescapegrab")

    mainfarmsettingsleft:Toggle({
        Name = "Auto Retry",
        Default = retry,
        Callback = function(state)
            retry = state
            if retry and game.PlaceId ~= 14916516914 and game.PlaceId ~= 13379208636 then
                task.spawn(function()

                    local function getRewards()
                        local playerGui = player.PlayerGui
                        while not playerGui.Interface or not playerGui.Interface.Rewards do
                            task.wait()
                        end
                        return playerGui.Interface.Rewards
                    end

                    while retry do task.wait(.1)
                        local rewards = getRewards()
                        local button = rewards.Main.Info.Main.Buttons.Retry

                        if rewards.Visible and not player.PlayerGui.Interface.Chests.Visible and (button.Title.TextColor3 == Color3.fromRGB(0, 0, 0) or button.Title.TextColor3 == Color3.fromRGB(255, 255, 255)) then
                            if not healing then
                                press(button)
                                task.wait(.1)
                            end
                        end
                    end
                end)
            end
        end
    }, "autoretry")

    mainfarmsettingsright:Header({
        Text = "Sub Farm Settings"
    })

    mainfarmsettingsright:Label({
        Text = "Only use below if the other retry doesn't work for your device"
    })

    mainfarmsettingsright:Toggle({
        Name = "Auto Retry Alternate",
        Default = retryalt,
        Callback = function(state)
            retryalt = state
            if retryalt and game.PlaceId ~= 14916516914 and game.PlaceId ~= 13379208636 then
                task.spawn(function()

                    local clickX = math.floor(screenWidth * 0.63)
                    local clickY = math.floor(screenHeight * 0.5)

                    local function getRewards()
                        local playerGui = player.PlayerGui
                        while not playerGui.Interface or not playerGui.Interface.Rewards do
                            task.wait()
                        end
                        return playerGui.Interface.Rewards
                    end

                    local function calculateButtonSize(button)
                        local absoluteSize = Vector2.new(192000, -5919.2002)
                        local parent = button.Parent
                        local scaleX = absoluteSize.X / parent.AbsoluteSize.X
                        local scaleY = absoluteSize.Y / parent.AbsoluteSize.Y
                        return UDim2.new(scaleX, 0, scaleY, 0)
                    end

                    while retryalt do task.wait(.1)
                        local rewards = getRewards()
                        local button = rewards.Main.Info.Main.Buttons.Retry

                        if rewards.Visible and not player.PlayerGui.Interface.Chests.Visible then
                            if not healing then
                                button.Size = UDim2.new(0, 100, 0, 0)
                                button.Size = calculateButtonSize(button)

                                local originalSize = button.Size
                                button.Size = originalSize + UDim2.new(0, 1, 0, 1)
                                task.wait(.05)
                                button.Size = originalSize

                                vim:SendMouseButtonEvent(clickX, clickY, 0, true, game, 1)
                                task.wait(.1)
                                vim:SendMouseButtonEvent(clickX, clickY, 0, false, game, 0)
                            end
                        end
                    end
                end)
            end
        end
    }, "autoretryalt")

    mainfarmsettingsright:Toggle({
        Name = "Auto Retry Other Alternate",
        Default = retryotheralt,
        Callback = function(state)
            retryotheralt = state
            if retryotheralt and game.PlaceId ~= 14916516914 and game.PlaceId ~= 13379208636 then
                task.spawn(function()

                    local function getRewards()
                        local playerGui = player.PlayerGui
                        while not playerGui.Interface or not playerGui.Interface.Rewards do
                            task.wait()
                        end
                        return playerGui.Interface.Rewards
                    end

                    while retryotheralt do task.wait(.1)
                        local rewards = getRewards()
                        local button = rewards.Main.Info.Main.Buttons.Retry

                        if rewards.Visible and not player.PlayerGui.Interface.Chests.Visible then
                            if not healing then
                                realClick(button)
                            end
                        end
                    end
                end)
            end
        end
    }, "retryotheralt")

    nokey = false

    mainfarmsettingsright:Toggle({
        Name = "Open Raid Chests",
        Default = raidchest,
        Callback = function(state)
            raidchest = state
            if raidchest and game.PlaceId == 14012874501 then
                local loopcount = 0
                task.spawn(function()
                    local success, err = pcall(function()

                        local Chests = player.PlayerGui.Interface.Chests
                        while raidchest do task.wait()
                            if Chests.Visible then
                                if player.PlayerGui.Interface.Notify.Prompt.Visible and player.PlayerGui.Interface.Notify.Prompt.Main.Title.ContentText:lower() == "you're keyless." then
                                    nokey = true
                                end

                                if not nokey and not player.PlayerGui.Interface.Notify.Prompt.Visible then
                                    press(Chests.Premium)
                                    task.wait(.5)
                                end

                                if player.PlayerGui.Interface.Notify.Prompt.Visible and player.PlayerGui.Interface.Notify.Prompt.Main.Title.ContentText:lower() == "you're keyless." then
                                    nokey = true
                                end

                                if not player.PlayerGui.Interface.Notify.Prompt.Visible then
                                    press(Chests.Free)
                                    task.wait(.5)
                                end

                                if player.PlayerGui.Interface.Notify.Prompt.Visible and player.PlayerGui.Interface.Notify.Prompt.Main.Title.ContentText:lower() == "you're keyless." then
                                    nokey = true
                                end

                                loopcount = loopcount + 1
                                Chests = player.PlayerGui.Interface.Chests

                                if not Chests.Free.Visible and Chests.Finish.Visible then
                                    press(Chests.Finish)
                                    task.wait(.5)
                                    loopcount = 0
                                elseif not Chests.Free.Visible and not Chests.Finish.Visible or not Chests.Premium.Visible and not Chests.Finish.Visible then
                                    loopcount = 0
                                    while not Chests.Free.Visible and not Chests.Finish.Visible do
                                        task.wait(.1)
                                        Chests = player.PlayerGui.Interface.Chests
                                        loopcount = loopcount + 1
                                        if loopcount >= 100 then
                                            break
                                        end
                                        if Chests.Free.Visible and Chests.Finish.Visible or Chests.Finish.Visible and Chests.Premium.Visible then
                                            loopcount = 0
                                        end
                                    end
                                end
                            end
                        end
                    end)
                    if not success then warn(err) end
                end)
            end
        end
    }, "autoopenraidchest")

    
    mainfarmsettingsright:Toggle({
        Name = "Open Free Raid Chest Only",
        Default = raidchestfree,
        Callback = function(state)
            raidchestfree = state
            if raidchestfree and game.PlaceId == 14012874501 then
                local loopcount = 0
                task.spawn(function()
                    local success, err = pcall(function()

                        local Chests = player.PlayerGui.Interface.Chests
                        while raidchestfree do task.wait()
                            if Chests.Visible then

                                press(Chests.Free, yOffset)
                                task.wait(.1)

                                loopcount = loopcount + 1
                                Chests = player.PlayerGui.Interface.Chests

                                if not Chests.Free.Visible and Chests.Finish.Visible then
                                    press(Chests.Finish, yOffset)
                                    task.wait(.1)

                                    loopcount = 0
                                elseif not Chests.Free.Visible and not Chests.Finish.Visible then
                                    loopcount = 0
                                    while not Chests.Free.Visible and not Chests.Finish.Visible do task.wait(.1)
                                        Chests = player.PlayerGui.Interface.Chests
                                        loopcount = loopcount + 1
                                        if loopcount >= 100 then
                                            break
                                        end
                                        if Chests.Free.Visible and Chests.Finish.Visible or Chests.Finish.Visible and Chests.Premium.Visible then
                                            loopcount = 0
                                        end
                                    end
                                end
                            end
                        end
                    end)
                    if not success then warn(err) end
                end)
            end
        end
    }, "raidchestfreeonly")

    onikirifound = false

    mainfarmsettingsright:Toggle({
        Name = "Auto Reset if no onikiri eren",
        Default = resetnoonikiri,
        Callback = function(state)
            resetnoonikiri = state
            if resetnoonikiri and game.PlaceId ~= 13379208636 and game.PlaceId ~= 14916516914 and workspace:GetAttribute("Type") == "Raids" and not onikirifound then
                task.spawn(function()
                    while resetnoonikiri and not onikirifound do task.wait(1)
                        pcall(function()
                            if workspace.Unclimbable.Objective.Defend_Eren.Attack_Titan:FindFirstChild("Fake") then
                                if not workspace.Unclimbable.Objective.Defend_Eren.Attack_Titan.Fake:FindFirstChild("LLL_Spike_3") and not onikirifound then
                                    print("resetting, no onikiri found phase 1")
                                    humanoid.Health = 0
                                else
                                    print("onikiri found phase 1")
                                    onikirifound = true
                                    while task.wait() do end
                                    while onikirifound do
                                        task.wait()
                                    end
                                    task.wait(999999)
                                end
                            elseif workspace.Titans.Attack_Titan:FindFirstChild("Fake") and not onikirifound then
                                if not workspace.Titans.Attack_Titan.Fake:FindFirstChild("Horns") and not onikirifound then
                                    print("resetting, no onikiri found phase 2")
                                    humanoid.Health = 0
                                else
                                    print("onikiri found phase 2")
                                    onikirifound = true
                                    while task.wait() do end
                                    while onikirifound do
                                        task.wait()
                                    end
                                    task.wait(999999)
                                end
                            end
                        end)
                    end
                end)
            end
        end
    }, "resetnoonikiri")

    miscleft:Header({
        Text = "Redeem All Codes"
    })

    miscleft:Label({
        Text = "This requires you to be in the menu where you would usually redeem codes. if you want to stop it quickly press P (will notify you when finished however)"
    })

    local alreadygatheredcodes = false

    local foundCodes = {}
    local codes_table = {}

    miscleft:Toggle({
        Name = "Redeem All Codes",
        Default = redeemcodes,
        Callback = function(state)
            redeemcodes = state
            if redeemcodes and game.PlaceId == 13379208636 then
                task.spawn(function()
                    while redeemcodes do task.wait()
                        local success, err = pcall(function()
                            if player.PlayerGui.Interface.Title_Screen.ZIndex == -1 then
                                if profileslot ~= "" and profileslot ~= nil then
                                    press(player.PlayerGui.Interface.Title_Screen.Slots[profileslot]["Select_" .. profileslot])
                                    task.wait(.2)
                                else
                                    press(player.PlayerGui.Interface.Title_Screen.Slots.A["Select_" .. "A"])
                                    task.wait(.2)
                                end
                            end
                            if player.PlayerGui.Interface.Title_Screen.Visible and player.PlayerGui.Interface.Title_Screen.ZIndex == 1 then
                                if not player.PlayerGui.Interface.Title_Screen.Codes.Visible then
                                    press(player.PlayerGui.Interface.Title_Screen.Buttons.Codes.Interact)
                                    task.wait(1)
                                end
                                if player.PlayerGui.Interface.Title_Screen.Codes.Visible then
                                    if player.PlayerGui.Interface.Title_Screen.Codes.Main.Code.Interact.CursorPosition == -1 then
                                        press(player.PlayerGui.Interface.Title_Screen.Codes.Main.Code.Interact)
                                        task.wait(1)
                                    elseif player.PlayerGui.Interface.Title_Screen.Codes.Main.Code.Interact.CursorPosition == 1 then
                                        if not alreadygatheredcodes then
                                            local url = "https://www.ign.com/articles/attack-on-titan-revolution-codes"

                                            local websiteContent = game:HttpGet(url)

                                            local plainText = websiteContent:gsub("<[^>]+>", "")

                                            plainText = plainText:gsub("\\u003e", ">"):gsub("\\u003c", "<"):gsub("\\u0026", "&")

                                            local startExtracting = false
                                            local foundExpiredSection = false

                                            local chunkSize = 80
                                            local currentPosition = 1
                                            
                                            while currentPosition <= #plainText do
                                                local chunk = plainText:sub(currentPosition, currentPosition + chunkSize - 1)
                                            
                                                chunk = chunk:gsub("\\u003e", ">"):gsub("\\u003c", "<"):gsub("\\u0026", "&")
                                            
                                                if startExtracting or chunk:find("Active Attack on Titan Revolution Codes") then
                                                    local code = chunk:match("<strong>([%u%d]+)</strong>%s?%-")
                                            
                                                    if code then
                                                        if not foundCodes[code] then
                                                            foundCodes[code] = true
                                                            table.insert(codes_table, code)
                                                        end
                                                    end
                                                end
                                            
                                                if chunk:find("Active Attack on Titan Revolution Codes") then
                                                    startExtracting = true
                                                end
                                            
                                                if chunk:find("Expired Attack on Titan Revolution Codes") then
                                                    foundExpiredSection = true
                                                    alreadygatheredcodes = true
                                                    break
                                                end

                                                currentPosition = currentPosition + chunkSize
                                            end
                                        end
                                        for _,v in pairs(codes_table) do
                                            if redeemcodes then
                                                local codeinteract = player.PlayerGui.Interface.Title_Screen.Codes.Main.Code.Interact
                                                while codeinteract.TextEditable == false do
                                                    task.wait()
                                                end
                                                if codeinteract.CursorPosition == 1 and codeinteract.TextEditable == true then
                                                    codeinteract.Text = v
                                                    task.wait(.25)
                                                    press(player.PlayerGui.Interface.Title_Screen.Codes.Main.Redeem)
                                                    task.wait(.25)
                                                    while codeinteract.TextEditable == false do
                                                        task.wait()
                                                    end
                                                    codeinteract.Text = ""
                                                end
                                                if player.PlayerGui.Interface.Title_Screen.Codes.Main.Code.Interact.CursorPosition == -1 then
                                                    press(player.PlayerGui.Interface.Title_Screen.Codes.Main.Code.Interact)
                                                    codeinteract.Text = ""
                                                    task.wait(.1)
                                                end
                                            end
                                        end
                                        Window:Notify({
                                            Title = "North Hub",
                                            Description = "Finished Redeeming All Codes",
                                            Lifetime = 10
                                        })
                                        redeemcodes = false
                                    end
                                end
                            end
                        end)
                        if not success then warn(err) end
                    end
                end)
            end
        end
    })

    miscleft:Header({
        Text = "Injury Misc"
    })

    miscleft:Toggle({
        Name = "Hide All Injuries",
        Default = spamkeyinj,
        Callback = function(state)
            spamkeyinj = state
            if spamkeyinj then
                task.spawn(function()
                    while spamkeyinj do task.wait()
                        pcall(function()
                            local injuriesFolder = character:FindFirstChild("Injuries")
                            if injuriesFolder then
                                for _, injury in pairs(injuriesFolder:GetChildren()) do
                                    injury:Destroy()
                                end
                            end
                        end)
                    end
                end)
            end
        end
    }, "hideallinjuries")

    miscleft:Toggle({
        Name = "Auto Heal After Mission",
        Default = healinjury,
        Callback = function(state)
            healinjury = state
            if healinjury and game.PlaceId ~= 14916516914 and game.PlaceId ~= 13379208636 then
                task.spawn(function()
                    local Interface = player.PlayerGui.Interface
                    local injuryview = Interface.Rewards.Main.Injuries
                    local Injuries = Interface.Injury
                    local loopcount = 0

                    -- //Click Heal Button to Open Injuries\\

                    while healinjury do task.wait()
                        local success, err = pcall(function()
                            if injuryview.Visible and Interface.Rewards.Visible and not Injuries.Visible then
                                healing = true
                                press(injuryview.Heal)
                                task.wait(.2)
                            end

                            -- //Click Heal Injury\\

                            task.wait(3)
                            if Injuries.Visible then
                                for _, heal in pairs(Injuries.Main.Injuries:GetDescendants()) do
                                    while string.match(heal.Name, "Heal") and heal.Parent.Visible and not Injuries.Main.Injuries.Empty.Visible do
                                        press(heal)
                                        task.wait(.1)
                                        loopcount = loopcount + 1
                                    end
                                end

                                -- //Close Injuries\\

                                if Injuries.Main.Injuries.Empty.Visible or loopcount == 12 then
                                    press(Injuries.Injury_Close)
                                    task.wait(.1)
                                end
                                healing = false
                            end
                        end)
                        if not success then warn(err) end
                    end
                end)
            end
        end
    }, "autohealinjury")

    local fpsboosterexecuted = false

    miscleft:Divider()

    miscleft:Header({
        Text = "Performance Enhancers"
    })

    local fpsboosterexecuted = false
    local descendantAddedConnection

    miscleft:Toggle({
        Name = "FPS Booster",
        Default = false,
        Callback = function(state)
            boostfps = state
            while boostfps do task.wait(2)
                if not fpsboosterexecuted then
                    local Terrain = workspace:FindFirstChildOfClass('Terrain')
                    Terrain.WaterWaveSize = 0
                    Terrain.WaterWaveSpeed = 0
                    Terrain.WaterReflectance = 0
                    Terrain.WaterTransparency = 0
                    local Lighting = game.Lighting
                    Lighting.GlobalShadows = false
                    Lighting.FogEnd = 9e9
                    local userSettings = UserSettings():GetService("UserGameSettings")
                    userSettings.GraphicsQualityLevel = Enum.SavedQualitySetting.QualityLevel1

                    for i,v in pairs(game:GetDescendants()) do
                        if v:IsA("Part") or v:IsA("UnionOperation") or v:IsA("MeshPart") or v:IsA("CornerWedgePart") or v:IsA("TrussPart") then
                            v.Material = "Plastic"
                            v.Reflectance = 0
                        elseif v:IsA("Decal") then
                            v.Transparency = 1
                        elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
                            v.Lifetime = NumberRange.new(0)
                        elseif v:IsA("Explosion") then
                            v.BlastPressure = 1
                            v.BlastRadius = 1
                        end
                    end

                    for i,v in pairs(Lighting:GetDescendants()) do
                        if v:IsA("BlurEffect") or v:IsA("SunRaysEffect") or v:IsA("ColorCorrectionEffect") or v:IsA("BloomEffect") or v:IsA("DepthOfFieldEffect") then
                            v.Enabled = false
                        end
                    end

                    descendantAddedConnection = workspace.DescendantAdded:Connect(function(child)
                        task.spawn(function()
                            if child:IsA('ForceField') then
                                RunService.Heartbeat:Wait()
                                child:Destroy()
                            elseif child:IsA('Sparkles') then
                                RunService.Heartbeat:Wait()
                                child:Destroy()
                            elseif child:IsA('Smoke') or child:IsA('Fire') then
                                RunService.Heartbeat:Wait()
                                child:Destroy()
                            end
                        end)
                    end)
    
                    fpsboosterexecuted = true
                end
                if not boostfps then
                    if descendantAddedConnection then
                        descendantAddedConnection:Disconnect()
                    end
                    fpsboosterexecuted = false
                end
            end
        end
    }, "BoostFps")

    miscleft:Label({
        Text = "Disabling 3D Rendering makes ur screen go white and doesn't effect autofarming"
    })

    local renderdisabled = false

    miscleft:Toggle({
        Name = "Disable 3D Rendering",
        Default = false,
        Callback = function(state)
            disablerendering = state
            if disablerendering then
                task.spawn(function()
                    while disablerendering do task.wait(.5)
                        if not renderdisabled then
                            RunService:Set3dRenderingEnabled(false)
                            renderdisabled = true
                        end
                        if not disablerendering then
                            renderdisabled = false
                            RunService:Set3dRenderingEnabled(true)
                        end
                    end
                end)
            end
        end
    })

    miscright:Header({
        Text = "Other Sub Misc"
    })

    miscright:Button({
        Name = "Reset Character",
        Callback = function()
            humanoid.Health = 0
        end
    })

    miscright:Toggle({
        Name = "Hide Name (Visual Only)",
        Default = semihidename,
        Callback = function(state)
            semihidename = state
            if semihidename then
                task.spawn(function()
                    while semihidename do task.wait()
                        pcall(function()
                            for _, descendant in ipairs(player.PlayerGui.Interface.Missions.Info.Main.Info.Main.Players:GetDescendants()) do
                                if descendant:IsA("TextLabel") and descendant.Name == "Username" then
                                    descendant.Text = ".gg/northhub"
                                end
                            end
                            for _, descendant in ipairs(player.PlayerGui.Interface.Missions.Info.Main.Info.Main.Players:GetDescendants()) do
                                if descendant:IsA("ImageLabel") then
                                    descendant.Image = ""
                                end
                            end
                        end)
                    end
                end)
            end
        end
    }, "semihidename")

    -- miscright:Label({
    --     Text = "may cause lag depending on executor"
    -- })

    -- miscright:Toggle({
    --     Name = "Hide Name (in everything (visual only))",
    --     Default = hidename,
    --     Callback = function(t)
    --         hidename = t
    --         if hidename then
    --             task.spawn(function()
    --                 oldUserId = tostring(player.UserId)
    --                 oldName = player.Name
    --                 oldDisplayName = player.DisplayName
    --                 local function processtext(text)
    --                     if string.gsub(text,oldName,".gg/Northhub") ~= text then
    --                         return string.gsub(text,oldName,".gg/Northhub")
    --                     elseif string.gsub(text,oldUserId,13886182) ~= text then
    --                         return string.gsub(text,oldUserId,13886182)
    --                     elseif string.gsub(text,oldDisplayName,".gg/Northhub") ~= text then
    --                         return string.gsub(text,oldDisplayName,".gg/Northhub")
    --                     end
    --                     if text ~= nil then
    --                         return text
    --                     end
    --                     return ''
    --                 end

    --                 for i,v in next, game:GetDescendants() do
    --                     if v:IsA("TextBox") or v:IsA("TextLabel") or v:IsA("TextButton") then
    --                         v.Text = processtext(v.Text)
    --                         v.Name = processtext(v.Name)
    --                         v.Changed:Connect(function(property)
    --                             v.Text = processtext(v.Text)
    --                             v.Name = processtext(v.Name)
    --                         end)
    --                     end
    --                 end

    --                 while hidename do task.wait()
    --                     pcall(function()
    --                         for _, descendant in ipairs(player.PlayerGui.Interface.Missions.Info.Main.Info.Main.Players:GetDescendants()) do
    --                             if descendant:IsA("TextLabel") and descendant.Name == "Username" then
    --                                 descendant.Text = ".gg/northhub"
    --                             end
    --                         end
    --                         for _, descendant in ipairs(player.PlayerGui.Interface.Missions.Info.Main.Info.Main.Players:GetDescendants()) do
    --                             if descendant:IsA("ImageLabel") then
    --                                 descendant.Image = ""
    --                             end
    --                         end
    --                     end)
    --                 end
    --             end)
    --         end
    --     end
    -- }, "fullhidenamelaggy")

    

    -- Tab4:Toggle({
    --     Name = "Reset if stuck (Buggy)",
    --     Default = resetstuck,
    --     Callback = function(state)
    --         resetstuck = state
    --         settings.ResetStuck = state
    --         saveSettings(settings)

    --         if resetstuck and game.PlaceId ~= 13379208636 and game.PlaceId ~= 14916516914 then
    --             task.spawn(function()

    --                 if not character or not character:FindFirstChild("HumanoidRootPart") then
    --                     return
    --                 end

    --                 local initialPosition = humanoidRootPart.Position
    --                 local initialTime = tick()

    --                 while resetstuck do task.wait()
    --                     local success, err = pcall(function()

    --                         if not character or not character:FindFirstChild("HumanoidRootPart") then
    --                             resetstuck = false
    --                             return
    --                         end

    --                         local currentPosition = humanoidRootPart.Position
    --                         local currentTime = tick()

    --                         -- //Reset Character if in same spot for too long\\

    --                         if (currentPosition - initialPosition).Magnitude <= 15 and (currentPosition - workspace.TeleportBaseplate.Position).Magnitude > 50 then
    --                             if currentTime - initialTime >= 30 and (currentPosition - workspace.TeleportBaseplate.Position).Magnitude > 50 then
    --                                 --print("resetting on stationary position")
    --                                 humanoid.Health = 0
    --                                 task.wait(1)
    --                             end
    --                         else
    --                             initialPosition = currentPosition
    --                             initialTime = currentTime
    --                         end

    --                         -- //Reset character if voided (doesnt work currently)\\

    --                         if character:FindFirstChild("HumanoidRootPart") == nil or character:FindFirstChild("Humanoid") == nil or character.WorldPivot.Position.Y == -1000000 then
    --                             --print("resetting, no Humanoid..")
    --                             humanoid.Health = 0
    --                             task.wait(1)
    --                             resetstuck = false
    --                         end
    --                     end)
    --                     if not success then warn(err) end
    --                 end
    --             end)
    --         end
    --     end
    -- })

    Riskyleft:Header({
        Text = "Main Risky Features"
    })

    Riskyleft:Label({
        Text = "All features in this tab are risky"
    })

    Riskyleft:Label({
        Text = "OP Farm requires DrillThrust & TorrentialSteel"
    })

    Riskyleft:Label({
        Text = "Thrust 1st skill, TorrentialSteel 2nd skill"
    })

    Riskyleft:Toggle({
        Name = "OP Farm",
        Default = opfarm,
        Callback = function(state)
            opfarm = state

            if opfarm and game.PlaceId ~= 13379208636 and game.PlaceId ~= 14916516914 and not damagefarm then
                pcall(function()
                    task.spawn(function()
                        local teleportBaseplate = workspace:FindFirstChild("TeleportBaseplate")
                        if Workspace:GetAttribute("Type") == "Missions" then
                            while opfarm and not autofarmtitansrisky and not autofarmtitansold and not autofarmtitansalt do task.wait()
                                while player:GetAttribute("Cutscene") == true do
                                    task.wait()
                                end
                                if norefills_noblades then return end
                                humanoidRootPart.CFrame = teleportBaseplate.CFrame * CFrame.new(0, 3, 0)
                            end
                        elseif Workspace:GetAttribute("Type") ~= "Missions" then
                            while opfarm and not autofarmraidrisky and not autofarmraidalt and not autofarmraid do task.wait()
                                while player:GetAttribute("Cutscene") == true do
                                    task.wait()
                                end
                                if norefills_noblades then return end
                                humanoidRootPart.CFrame = teleportBaseplate.CFrame * CFrame.new(0, 3, 0)
                            end
                        end
                    end)
                    task.spawn(function()
                        while opfarm do task.wait()
                            if norefills_noblades then return end
                            local user = player.Name

                            local allTitansReady = false
                            while not allTitansReady do
                                allTitansReady = true
                                local titanCount = 0
                                for _, titan in ipairs(workspace.Titans:GetChildren()) do
                                    local hitbox = titan:FindFirstChild("Hitboxes") and titan.Hitboxes:FindFirstChild("Hit")
                                    local targetPoint = (titan.Name == "Attack_Titan" and hitbox and hitbox:FindFirstChild(tostring(titan.Marker.Adornee))) or
                                        (hitbox and hitbox:FindFirstChild("Nape"))
                                    if not targetPoint or not targetPoint:IsA("BasePart") then
                                        allTitansReady = false
                                    else
                                        titanCount += 1
                                        if titan.Name == "Attack_Titan" then
                                            allTitansReady = true
                                            break
                                        end
                                    end

                                    if titan.Name == "Attack_Titan" then
                                        allTitansReady = true
                                        break
                                    end

                                    if titanCount >= 8 then
                                        allTitansReady = true
                                        break
                                    end
                                end

                                if allTitansReady and titanCount >= 8 then
                                    break
                                end

                                task.wait(.1)
                            end                            

                            vim:SendKeyEvent(true, Enum.KeyCode.One, false, nil)
                            task.wait(.1)
                            vim:SendKeyEvent(false, Enum.KeyCode.One, false, nil)

                            repeat task.wait()
                                if norefills_noblades then return end
                                local thrust = workspace:FindFirstChild(user .. "_Thrust")
                                if thrust then
                                    for _, titan in ipairs(workspace.Titans:GetChildren()) do
                                        local hitbox = titan:FindFirstChild("Hitboxes") and titan.Hitboxes:FindFirstChild("Hit")
                                        local targetPoint = (titan.Name == "Attack_Titan" and hitbox and hitbox:FindFirstChild(tostring(titan.Marker.Adornee))) or
                                            (hitbox and hitbox:FindFirstChild("Nape"))
                                        if targetPoint and targetPoint:IsA("BasePart") then
                                            firetouchinterest(thrust, targetPoint, 0)
                                            firetouchinterest(thrust, targetPoint, 1)
                                        end
                                    end
                                end
                            until not workspace:FindFirstChild(user .. "_Thrust")

                            vim:SendKeyEvent(true, Enum.KeyCode.Two, false, nil)
                            task.wait(.1)
                            vim:SendKeyEvent(false, Enum.KeyCode.Two, false, nil)

                            repeat task.wait()
                                if norefills_noblades then return end
                                local thrust2 = workspace:FindFirstChild(user .. "_Steel")
                                if thrust2 then
                                    for _, titan in ipairs(workspace.Titans:GetChildren()) do
                                        local hitbox = titan:FindFirstChild("Hitboxes") and titan.Hitboxes:FindFirstChild("Hit")
                                        local targetPoint = (titan.Name == "Attack_Titan" and hitbox and hitbox:FindFirstChild(tostring(titan.Marker.Adornee))) or
                                            (hitbox and hitbox:FindFirstChild("Nape"))
                                        if targetPoint and targetPoint:IsA("BasePart") then
                                            firetouchinterest(thrust2, targetPoint, 0)
                                            firetouchinterest(thrust2, targetPoint, 1)
                                        end
                                    end
                                end
                            until not workspace:FindFirstChild(user .. "_Steel")
                        end
                    end)
                end)
            end
        end
    }, "opfarm")

    Riskyleft:Toggle({
        Name = "Autofarm Titans Risky",
        Default = autofarmtitansrisky,
        Callback = function(state)
            autofarmtitansrisky = state

            if autofarmtitansrisky and game.PlaceId ~= 13379208636 and game.PlaceId ~= 14916516914 and not damagefarm and Workspace:GetAttribute("Type") == "Missions" then
                task.spawn(function()
                    oldKillCount = 0
                    local currentTitan = nil
                    local titanStartTime = os.clock()
                    local idlespot

                    -- Delete Objects
                    pcall(function()
                        Workspace.Climbable.Buildings:Destroy()
                        for _, deleted in pairs(Workspace.Unclimbable:GetChildren()) do
                            if deleted.Name ~= "Reloads" and deleted.Name ~= "Cutscene" and deleted.Name ~= "Plane" and deleted.Name ~= "Objective" then
                                deleted:Destroy()
                            end
                        end
                    end)

                    -- Auto Use Gas
                    local function AutoUseGas()
                        while autofarmtitansrisky do task.wait()
                            if not skibidirefill and foundtitanyes and not sigmarefill then
                                vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
                                task.wait(4)
                            end
                        end
                    end

                    -- M1 Check
                    local function M1Check()
                        local attacktimer = os.clock()
                        local animationIds = {
                            "rbxassetid://14518641514", "rbxassetid://14518654101",
                            "rbxassetid://14518651360", "rbxassetid://14518648320"
                        }
                        while autofarmtitansrisky do task.wait()
                            if skibidirefill or player.PlayerGui.Interface.Rewards.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and tplow or norefills_noblades then
                                attacktimer = os.clock()
                            end
                            local tracks = humanoid:GetPlayingAnimationTracks()
                            for _, track in ipairs(tracks) do
                                if table.find(animationIds, track.Animation.AnimationId) then
                                    attacktimer = os.clock()
                                    break
                                end
                            end
                            if os.clock() - attacktimer >= 30 then
                                humanoid.Health = 0
                                break
                            end
                        end
                    end

                    local function autoresetnoblades_orrefills()
                        while autofarmtitansrisky do task.wait()
                            local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                            local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
                            if player:GetAttribute("Refills") == 0 and bladeSetsText == "0 / 3" and character["Rig_"..player.Name].LeftHand.Blade_1.Transparency == 1 and gradientOffset.X == 0 then
                                norefills_noblades = true
                                if player.PlayerGui.Interface.Warning.TextTransparency == 1 and player.PlayerGui.Interface.Warning.TextStrokeTransparency == 1 then
                                    humanoid.Health = 0
                                else
                                    humanoidRootPart.CFrame =  teleportBaseplate.CFrame * CFrame.new(0, 3, 0)
                                end
                            end
                        end
                    end

                    task.spawn(AutoUseGas)
                    task.spawn(M1Check)
                    task.spawn(autoresetnoblades_orrefills)

                    -- Start of Auto Farm
                    while autofarmtitansrisky do task.wait()
                        if norefills_noblades then return end
                        while sigmarefill do
                            task.wait()
                        end
                        foundtitanyes = false
                        -- Remove Shiganshina Walls
                        task.spawn(function()
                            pcall(function()
                                task.wait(.5)
                                if workspace:FindFirstChild("Climbable") and workspace.Climbable:FindFirstChild("Walls") then
                                    game.Workspace.Climbable.Walls:Destroy()
                                end
                            end)
                        end)

                        while player:GetAttribute("Cutscene") == true do
                            task.wait()
                        end

                        local success, err = pcall(function()
                            local closestTitan = nil
                            local closestDistance = math.huge
                            for _, titan in pairs(workspace.Titans:GetChildren()) do
                                if titan:IsA("Model") and titan:FindFirstChild("Hitboxes") and titan.Hitboxes:FindFirstChild("Hit") and titan.Hitboxes.Hit:FindFirstChild("Nape") and titan:FindFirstChild("Humanoid") and not humanoid.PlatformStand and not skibidirefill then
                                    if titan:GetAttribute("Type") == "Colossal" and titan:GetAttribute("State") ~= "Idle" or  titan:GetAttribute("Type") ~= "Colossal" then
                                        if workspace:GetAttribute("Objective") == "Stall" then
                                            distance = (titan.Head.Position - Vector3.new(-734, 18, 641)).magnitude
                                        elseif workspace:GetAttribute("Objective") == "Protect" then
                                            distance = (titan.Head.Position - workspace.Unclimbable.Objective.Protect.Objective.Position).magnitude
                                        elseif workspace:GetAttribute("Objective") == "Escort" then
                                            distance = (titan.Head.Position - workspace.Unclimbable.Objective.Escort.Objective.Position).magnitude
                                        elseif workspace:GetAttribute("Objective") == "Guard" then
                                            if not idlespot then
                                                idlespot = workspace.Unclimbable.Objective.Guard.Objective.CFrame
                                            end
                                            distance = (titan.Head.Position - workspace.Unclimbable.Objective.Guard.Objective.Position).magnitude
                                            if distance > 700 then
                                                continue
                                            end
                                        elseif workspace:GetAttribute("Objective") == "Defend" then
                                            distance = (titan.Head.Position - workspace.Unclimbable.Objective.Defend.Objective.Position).magnitude
                                        else
                                            distance = (titan.Head.Position - humanoidRootPart.Position).magnitude
                                        end
                                        if distance < closestDistance then
                                            closestDistance = distance
                                            closestTitan = titan
                                        end
                                    end
                                end
                            end

                            if closestTitan then
                                foundtitanyes = true
                                if currentTitan ~= closestTitan then
                                    currentTitan = closestTitan
                                    titanStartTime = os.clock()
                                end

                                local nape = currentTitan.Hitboxes.Hit.Nape
                                local currentTitanHead = currentTitan:FindFirstChild("Head") or currentTitan:GetPivot()
                                local startTime = os.clock()
                                local moveCancelled = false
                                local notfirsttp = false
                                local notsecondtp = false

                                repeat task.wait()
                                    if norefills_noblades then return end
                                    while player:GetAttribute("Cutscene") == true do
                                        task.wait()
                                    end
                                    while sigmarefill do
                                        task.wait()
                                    end

                                    -- Blade variables
                                    local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                                    local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
                                    -- Gas variables
                                    local gradientOffsett = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset
                                    local gaspercentage = player.PlayerGui.Interface.HUD.Main.Top.Gas.Percentage
                                    local gaspercentagetext = gaspercentage.Text:match("%d+%.?%d*")
                                    local gaspercentageNumber = stringToNumber(gaspercentagetext)

                                    nape.Size, nape.CanCollide, nape.Anchored = Vector3.new(300, 300, 300), false, false

                                    -- Refill Section
                                    while (bladeSetsText == "0 / 3" and gradientOffset.X == 0 and not humanoid.PlatformStand) or (gaspercentageNumber <= 2 and gradientOffsett.Y <= 0 and not humanoid.PlatformStand) do task.wait()
                                        if norefills_noblades then return end
                                        while sigmarefill do
                                            task.wait()
                                        end
                                        bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                                        gaspercentagetext = gaspercentage.Text:match("%d+%.?%d*")
                                        gaspercentageNumber = stringToNumber(gaspercentagetext)
                                        gradientOffsett = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset

                                        while skibidirefill do task.wait()
                                            if not sigmarefill then
                                                humanoidRootPart.CFrame = currentTitanHead.CFrame * CFrame.new(0, 300, 0)
                                            end
                                        end

                                        if not sigmarefill then
                                            humanoidRootPart.CFrame = currentTitanHead.CFrame * CFrame.new(0, 300, 0)
                                        elseif bladeSetsText == "3 / 3" or gaspercentageNumber > 95 then
                                            break
                                        end

                                        if bladeSetsText == "3 / 3" or not autofarmtitansrisky or gaspercentageNumber > 95 then
                                            break
                                        end
                                    end

                                    while player:GetAttribute("Cutscene") == true do
                                        task.wait()
                                    end

                                    -- Teleport to Titan

                                    -- Attack Titan
                                    local tp_time = os.clock() + 0.5
                                    --local printed = false

                                    while os.clock() < tp_time do task.wait()
                                        while sigmarefill do
                                            task.wait()
                                        end
                                        humanoidRootPart.CFrame = currentTitanHead.CFrame * CFrame.new(0, 400, 0)
                                        if not currentTitan:FindFirstChild("Head") then
                                            break
                                        end
                                        if norefills_noblades then return end
                                    end

                                    clickCenterScreen()
                                    clickCenterScreen()
                                    --print("attacking titan")
                                    humanoidRootPart.CFrame = currentTitanHead.CFrame * CFrame.new(0, distancey, 0)
                                    --print("finished attacking")

                                    -- Check if refill
                                    if (bladeSetsText == "0 / 3" and gradientOffset.X == 0 and not humanoid.PlatformStand) or (gaspercentageNumber <= 2 and gradientOffsett.Y <= 0 and not humanoid.PlatformStand) then
                                        break
                                    end

                                    while player:GetAttribute("Cutscene") == true do
                                        task.wait()
                                    end

                                    while sigmarefill do
                                        task.wait()
                                    end

                                    -- Failsafe
                                    local elapsedTime = os.clock() - titanStartTime
                                    if elapsedTime >= 60 and currentTitan:FindFirstChild("Humanoid") then
                                        sigmaskibidi = true
                                        for _ = 1, 8 do
                                            if not currentTitan:FindFirstChild("Humanoid") then
                                                sigmaskibidi = false
                                                break
                                            end

                                            while humanoid.PlatformStand do
                                                task.wait()
                                            end

                                            while player:GetAttribute("Cutscene") == true do
                                                task.wait()
                                            end

                                            local teleportEndTime = os.clock() + 3
                                            while os.clock() < teleportEndTime do task.wait()
                                                fastmoveto(character, currentTitanHead.Position + Vector3.new(0, 500, 0))
                                            end

                                            while skibidirefill do
                                                task.wait()
                                            end

                                            if not currentTitan:FindFirstChild("Nape") then
                                                while autofarmtitansrisky do task.wait()
                                                    local teleportBaseplate = workspace:FindFirstChild("TeleportBaseplate")
                                                    if player.PlayerGui.Interface.Warning.TextTransparency == 1 and player.PlayerGui.Interface.Warning.TextStrokeTransparency == 1 then
                                                        humanoid.Health = 0
                                                    else
                                                        humanoidRootPart.CFrame = teleportBaseplate.CFrame * CFrame.new(0,3,0)
                                                    end
                                                end
                                            end

                                            clickCenterScreen()
                                            clickCenterScreen()
                                            task.wait(.1)
                                            fastmoveto(character, currentTitan.Nape.CFrame)
                                        end

                                        for _ = 1, 1000 do
                                            if not currentTitan:FindFirstChild("Humanoid") then
                                                sigmaskibidi = false
                                                break
                                            end

                                            humanoid.Health = 0
                                            task.wait(.1)
                                        end
                                    end

                                    -- Time Out after 15 seconds
                                    if os.clock() - startTime >= 15 then
                                        moveCancelled = true
                                        break
                                    end
                                until (humanoid.Health / humanoid.MaxHealth) * 100 < healthtpat and tplow or not autofarmtitansrisky or not currentTitan:FindFirstChild("Humanoid") or not currentTitan:FindFirstChild("Head") or player.PlayerGui.Interface.Buttons:FindFirstChildOfClass("CanvasGroup") or humanoid.PlatformStand or currentTitan:GetAttribute("Type") == "Colossal" and currentTitan:GetAttribute("State") == "Idle" or skibidirefill or sigmarefill
                            else
                                if idlespot then
                                    humanoidRootPart.CFrame = idlespot * CFrame.new(0, 300, 0)
                                end
                            end

                            -- Health Recovery Loop
                            while (humanoid.Health / humanoid.MaxHealth) * 100 <= healthstop and autofarmtitansrisky and tplow do
                                task.wait()
                            end
                        end)
                        if not success then warn(err) end
                    end
                end)
            end
        end
    }, "autofarmtitansrisky")

    Riskyleft:Toggle({
        Name = "Auto Refill Blades RISKY",
        Default = autorefillrisky,
        Callback = function(state)
            autorefillrisky = state
            if autorefillrisky and game.PlaceId ~= 13379208636 and game.PlaceId ~= 14916516914 then
                task.spawn(function()
                    local refill_count = 0

                    local function getAnimationTrack()
                        local tracks = humanoid:GetPlayingAnimationTracks()
                        for _, track in ipairs(tracks) do
                            if track.Animation.AnimationId == "rbxassetid://15406891131" then
                                return track
                            end
                        end
                        return nil
                    end

                    local positions = {
                        [3] = CFrame.new(0,0,2),
                        [6] = CFrame.new(0,0,4),
                        [8] = CFrame.new(0,0,6),
                        [10] = CFrame.new(0,0,8),
                        [13] = CFrame.new(0,0,-2),
                        [16] = CFrame.new(0,0,-4),
                        [20] = CFrame.new(0,0,-6)
                    }

                    RefillStation = nil

                    while autorefillrisky do task.wait()
                        if norefills_noblades then return end
                        refillingblades = false
                        if not refillinggas then
                            skibidirefill = false
                            sigmarefill = false
                        end
                        local success, err = pcall(function()
                            local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                            local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
                            local teleportBaseplate = workspace:FindFirstChild("TeleportBaseplate")

                            if workspace.Unclimbable.Reloads:FindFirstChild("GasTanks") and not RefillStation then
                                RefillStation = workspace.Unclimbable.Reloads.GasTanks.Refill.CFrame
                            end

                            while player:GetAttribute("Cutscene") == true do
                                task.wait()
                            end

                            while bladeSetsText == "0 / 3" and character["Rig_"..player.Name].LeftHand.Blade_1.Transparency == 1 and humanoid.PlatformStand == false and gradientOffset.X == 0 and not tplow do task.wait()
                                if norefills_noblades then return end
                                skibidirefill = true
                                --print("Refilling Status:", skibidirefill)

                                while humanoid.PlatformStand do
                                    task.wait()
                                end

                                while player:GetAttribute("Cutscene") == true do
                                    task.wait()
                                end

                                while player.PlayerGui.Interface.HUD.Visible == false do
                                    task.wait()
                                end

                                refillingblades = true
                                sigmarefill = true

                                -- //TP REFILL\\
                                humanoidRootPart.CFrame = RefillStation
                                task.wait(.1)
                                humanoidRootPart.CFrame = RefillStation

                                -- //PRESS R\\

                                local animationTrack = getAnimationTrack()

                                while not animationTrack do
                                    if norefills_noblades then return end
                                    vim:SendKeyEvent(true, Enum.KeyCode.R, false, game)
                                    vim:SendKeyEvent(false, Enum.KeyCode.R, false, game)
                                    task.wait(0.05)
                                    animationTrack = getAnimationTrack()
                                    refill_count = refill_count + 1

                                    while player.PlayerGui.Interface.HUD.Visible == false do
                                        task.wait()
                                    end

                                    while player:GetAttribute("Cutscene") == true do
                                        task.wait()
                                    end

                                    if positions[refill_count] then
                                        humanoidRootPart.CFrame = RefillStation * positions[refill_count]
                                    end

                                    if refill_count >= 25 then
                                        break
                                    end
                                end

                                if animationTrack then
                                    local finishedPlaying = false
                                    animationTrack.Stopped:Connect(function()
                                        finishedPlaying = true
                                    end)

                                    local tp_timerefill = os.clock() + 7
                                    while os.clock() < tp_timerefill do task.wait()
                                        while humanoid.PlatformStand do
                                            task.wait()
                                        end

                                        while player:GetAttribute("Cutscene") == true do
                                            task.wait()
                                        end

                                        -- //TP FAR AWAY FROM REFILL SO TITANS GO AWAY FROM REFILL INCASE FIRST REFILL DOESNT WORK\\

                                        --print("moving above refill")
                                        humanoidRootPart.CFrame = RefillStation * CFrame.new(0, 300, 800)
                                        if finishedPlaying then
                                            break
                                        end
                                    end
                                end

                                if not animationTrack then
                                    local tp_away_refill = os.clock() + 7
                                    while os.clock() < tp_away_refill do task.wait()
                                        if norefills_noblades then return end
                                        while humanoid.PlatformStand do
                                            task.wait()
                                        end

                                        while player:GetAttribute("Cutscene") == true do
                                            task.wait()
                                        end

                                        -- //TP FAR AWAY FROM REFILL SO TITANS GO AWAY FROM REFILL INCASE FIRST REFILL DOESNT WORK\\

                                        --print("moving above refill")
                                        humanoidRootPart.CFrame = RefillStation * CFrame.new(0, 300, 800)
                                        refill_count = 0
                                        if finishedPlaying then
                                            break
                                        end
                                    end
                                end

                                --print("Refilling Status:", skibidirefill)
                            end
                            if not refillinggas then
                                skibidirefill = false
                                sigmarefill = false
                                refill_count = 0
                            end
                        end)
                        if not success then warn(err) end
                    end
                end)
            end
        end
    }, "autorefillbladesrisky")

    Riskyleft:Toggle({
        Name = "Auto Refill Gas Risky",
        Default = autorefillgasrisky,
        Callback = function(state)
            autorefillgasrisky = state
            if autorefillgasrisky and game.PlaceId ~= 13379208636 and game.PlaceId ~= 14916516914 then
                task.spawn(function()
                    local refill_count = 0

                    local positions = {
                        [3] = CFrame.new(0,0,2),
                        [6] = CFrame.new(0,0,4),
                        [8] = CFrame.new(0,0,6),
                        [10] = CFrame.new(0,0,8),
                        [13] = CFrame.new(0,0,-2),
                        [16] = CFrame.new(0,0,-4),
                        [20] = CFrame.new(0,0,-6)
                    }

                    local function getAnimationTrack()
                        local tracks = humanoid:GetPlayingAnimationTracks()
                        for _, track in ipairs(tracks) do
                            if track.Animation.AnimationId == "rbxassetid://15406891131" then
                                return track
                            end
                        end
                        return nil
                    end

                    RefillStation = nil

                    while autorefillgasrisky do task.wait()
                        if norefills_noblades then return end
                        refillinggas = false
                        if not refillingblades then
                            skibidirefill = false
                            sigmarefill = false
                        end
                        local success, err = pcall(function()
                            local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset
                            local teleportBaseplate = workspace:FindFirstChild("TeleportBaseplate")
                            local gaspercentage = player.PlayerGui.Interface.HUD.Main.Top.Gas.Percentage
                            local gaspercentagetext = tonumber(gaspercentage.Text:match("%d+"))

                            if workspace.Unclimbable.Reloads:FindFirstChild("GasTanks") and not RefillStation then
                                RefillStation = workspace.Unclimbable.Reloads.GasTanks.Refill.CFrame
                            end

                            while player:GetAttribute("Cutscene") == true do
                                task.wait()
                            end

                            while gaspercentagetext <= 2 and humanoid.PlatformStand == false and gradientOffset.Y == 0 and not tplow do task.wait()
                                --print("1 gradientOffset:", gradientOffset.Y, "gaspercentagetext:", gaspercentagetext)
                                skibidirefill = true

                                gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset
                                gaspercentagetext = tonumber(gaspercentage.Text:match("%d+"))

                                while humanoid.PlatformStand do
                                    task.wait()
                                end

                                while player:GetAttribute("Cutscene") == true do
                                    task.wait()
                                end

                                refillinggas = true
                                sigmarefill = true

                                -- //TP REFILL\\

                                humanoidRootPart.CFrame = RefillStation
                                task.wait(.1)
                                humanoidRootPart.CFrame = RefillStation

                                -- //PRESS R\\

                                local animationTrack = getAnimationTrack()

                                while not animationTrack and gaspercentagetext <= 2 do
                                    if norefills_noblades then return end
                                    vim:SendKeyEvent(true, Enum.KeyCode.R, false, game)
                                    vim:SendKeyEvent(false, Enum.KeyCode.R, false, game)
                                    task.wait(0.05)
                                    animationTrack = getAnimationTrack()
                                    refill_count = refill_count + 1
                                    while player.PlayerGui.Interface.HUD.Visible == false do
                                        task.wait()
                                    end

                                    while player:GetAttribute("Cutscene") == true do
                                        task.wait()
                                    end

                                    if positions[refill_count] then
                                        humanoidRootPart.CFrame = RefillStation * positions[refill_count]
                                    end

                                    if refill_count >= 25 then
                                        break
                                    end
                                end

                                if animationTrack then
                                    local finishedPlaying = false
                                    animationTrack.Stopped:Connect(function()
                                        finishedPlaying = true
                                    end)

                                    local tp_refill_gas = os.clock() + 7
                                    while os.clock() < tp_refill_gas do task.wait()
                                        gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset
                                        gaspercentagetext = tonumber(gaspercentage.Text:match("%d+"))
                                        while humanoid.PlatformStand do
                                            task.wait()
                                        end

                                        while player:GetAttribute("Cutscene") == true do
                                            task.wait()
                                        end

                                        -- //TP FAR AWAY FROM REFILL SO TITANS GO AWAY FROM REFILL INCASE FIRST REFILL DOESNT WORK\\

                                        --print("moving above refill")
                                        humanoidRootPart.CFrame = RefillStation * CFrame.new(0, 300, 800)
                                        if finishedPlaying or gaspercentagetext > 90 or gradientOffset.Y == 1 then
                                            break
                                        end
                                    end
                                end

                                if not animationTrack then
                                    local tp_away_gas = os.clock() + 6
                                    while os.clock() < tp_away_gas do task.wait()
                                        if norefills_noblades then return end
                                        while humanoid.PlatformStand do
                                            task.wait()
                                        end

                                        while player:GetAttribute("Cutscene") == true do
                                            task.wait()
                                        end

                                        -- //TP FAR AWAY FROM REFILL SO TITANS GO AWAY FROM REFILL INCASE FIRST REFILL DOESNT WORK\\

                                        --print("moving above refill")
                                        humanoidRootPart.CFrame = RefillStation * CFrame.new(0, 300, 800)
                                        refill_count = 0
                                        if finishedPlaying then
                                            break
                                        end
                                    end
                                end

                                --print("2 gradientOffset:", gradientOffset.Y, "gaspercentagetext:", gaspercentagetext)
                            end
                            if not refillingblades then
                                skibidirefill = false
                                sigmarefill = false
                                refill_count = 0
                            end
                        end)
                        if not success then warn(err) end
                    end
                end)
            end
        end
    }, "autorefillgasrisky")

    Riskyleft:Toggle({
        Name = "Autofarm Raid Risky",
        Default = autofarmraidrisky,
        Callback = function(state)
            autofarmraidrisky = state
            if autofarmraidrisky and game.PlaceId == 14012874501 and not damagefarm and Workspace:GetAttribute("Type") == "Raids" then
                task.spawn(function()
                    local roar = false
                    oldKillCount = 0
                    local TP_Count = 0
                    local currentTitan = nil
                    local titanStartTime = os.clock()

                    local function getAnimationTrack()
                        local tracks = workspace.Titans.Attack_Titan.Fake.Controller.Animator:GetPlayingAnimationTracks()
                        for _, track in ipairs(tracks) do
                            if track.Animation.AnimationId == "rbxassetid://17395738065" then
                                return track
                            end
                        end
                        return nil
                    end

                    -- // CHECK WHEN EREN ROARS TO TP ABOVE TO NOT GET HIT \\
                    local function RoarCheck()
                        while autofarmraidrisky do task.wait()

                            while skibidirefill or player.PlayerGui.Interface.Rewards.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and tplow or norefills_noblades or sigmarefill do
                                task.wait()
                            end

                            if workspace.Titans:FindFirstChild("Attack_Titan") and player.PlayerGui.Interface.HUD.Visible then
                                local currentTitanHead = workspace.Titans.Attack_Titan:FindFirstChild("Head") or workspace.Titans.Attack_Titan:GetPivot()

                                local finishedPlaying = false
                                local animationTrack = getAnimationTrack()

                                if animationTrack then
                                    local function checkAnimationTrack()
                                        while animationTrack and animationTrack.IsPlaying do task.wait(.1)
                                            roar = true
                                            humanoidRootPart.CFrame = currentTitanHead.CFrame * CFrame.new(0, 400, 0)
                                            while not player.PlayerGui.Interface.HUD.Visible or skibidirefill or sigmarefill or player.PlayerGui.Interface.Rewards.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and tplow or humanoid.PlatformStand do task.wait()
                                                roar = false
                                            end
                                            if not animationTrack.IsPlaying then
                                                finishedPlaying = true
                                                roar = false
                                            end
                                        end
                                    end
                                    task.spawn(checkAnimationTrack)
                                end
                            end
                        end
                    end

                    -- //AUTO USE GAS\\
                    local function AutoUseGas()
                        while autofarmraidrisky do task.wait()
                            if not skibidirefill and foundtitanyes and not sigmarefill then
                                vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
                                task.wait(4)
                            end
                        end
                    end

                    -- //M1 CHECK\\
                    local function M1Check()
                        local attacktimer = os.clock()
                        local animationIds = {
                            "rbxassetid://14518641514", "rbxassetid://14518654101",
                            "rbxassetid://14518651360", "rbxassetid://14518648320"
                        }
                        while autofarmraidrisky do task.wait()
                            if skibidirefill or sigmarefill or player.PlayerGui.Interface.Chests.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and tplow or norefills_noblades then
                                attacktimer = os.clock()
                            end
                            local tracks = humanoid:GetPlayingAnimationTracks()
                            for _, track in ipairs(tracks) do
                                if table.find(animationIds, track.Animation.AnimationId) then
                                    attacktimer = os.clock()
                                    break
                                end
                            end
                            if os.clock() - attacktimer >= 30 then
                                humanoid.Health = 0
                                break
                            end
                        end
                    end

                    local function autoresetnoblades_orrefills()
                        while autofarmraidrisky do task.wait()
                            local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                            local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
                            if player:GetAttribute("Refills") == 0 and bladeSetsText == "0 / 3" and character["Rig_"..player.Name].LeftHand.Blade_1.Transparency == 1 and gradientOffset.X == 0 and not sigmarefill then
                                norefills_noblades = true
                                if player.PlayerGui.Interface.Warning.TextTransparency == 1 and player.PlayerGui.Interface.Warning.TextStrokeTransparency == 1 then
                                    humanoid.Health = 0
                                else
                                    humanoidRootPart.CFrame =  teleportBaseplate.CFrame * CFrame.new(0, 3, 0)
                                end
                            end
                        end
                    end

                    task.spawn(AutoUseGas)
                    task.spawn(M1Check)
                    task.spawn(RoarCheck)
                    task.spawn(autoresetnoblades_orrefills)

                    -- //START OF AUTO FARM\\
                    while autofarmraidrisky do task.wait()
                        if norefills_noblades then return end
                        while sigmarefill do
                            task.wait()
                        end
                        foundtitanyes = false
                        local success, err = pcall(function()

                            while player.PlayerGui.Interface.HUD.Visible == false do
                                task.wait()
                            end

                            while player:GetAttribute("Cutscene") == true do
                                task.wait()
                            end

                            task.spawn(function()
                                pcall(function()
                                    task.wait(.5)
                                    if workspace:FindFirstChild("Climbable") then
                                        for _, v in pairs(workspace.Climbable.Buildings:GetChildren()) do
                                            if v.Name ~= "Trost_House6" then
                                                v:Destroy()
                                            end
                                        end
                                    end
                                end)
                            end)

                            -- //REMOVE SHIGANSHINA WALLS\\ 
                            task.spawn(function()
                                pcall(function()
                                    task.wait(.5)
                                    if workspace:FindFirstChild("Climbable") and workspace.Climbable:FindFirstChild("Walls") then
                                        game.Workspace.Climbable.Walls:Destroy()
                                    end
                                end)
                            end)

                            -- //GET CLOSEST TITAN TO ROCK OR EREN\\
                            local a = workspace.Unclimbable:FindFirstChild("Objective")
                            local b = a:FindFirstChild("Defend_Eren")
                            local c
                            local objectivePart
                            if b:FindFirstChild("Attack_Titan") then
                                c = b:FindFirstChild("Attack_Titan")
                                objectivePart = c:FindFirstChild("HumanoidRootPart")
                            elseif not b:FindFirstChild("Attack_Titan") then
                                c = b:FindFirstChild("BigRock")
                                objectivePart = c
                            end

                            local closestTitan = nil
                            local closestDistance = math.huge

                            for _, titan in pairs(workspace.Titans:GetChildren()) do
                                if titan:IsA("Model") and titan.Hitboxes:FindFirstChild("Hit"):FindFirstChild("Nape") and titan:FindFirstChild("Humanoid") and not humanoid.PlatformStand then
                                    local titanPosition = titan.Head.Position
                                    local objectivePosition = objectivePart.Position
                                    local distance = (titanPosition - objectivePosition).magnitude

                                    if titan.Name == "Attack_Titan" then
                                        closestTitan = titan
                                        break
                                    elseif distance < closestDistance then
                                        closestDistance = distance
                                        closestTitan = titan
                                    end
                                end
                            end

                            if closestTitan then
                                if norefills_noblades then return end
                                foundtitanyes = true
                                if currentTitan ~= closestTitan then
                                    currentTitan = closestTitan
                                    titanStartTime = os.clock()
                                end

                                function Store_Original_Hitbox(closestTitan)
                                    local properties = {}

                                    if closestTitan.Name == "Attack_Titan" then
                                        local hitboxnames = {"Eyes", "LeftArm", "LeftLeg", "Nape", "RightArm", "RightLeg"}

                                        for _, hitboxname in ipairs(hitboxnames) do
                                            local hitbox = closestTitan.Hitboxes.Hit:FindFirstChild(hitboxname)

                                            if hitbox then
                                                local size = hitbox.Size
                                                if size ~= Vector3.new(300, 300, 300) then
                                                    properties[hitboxname] = {
                                                        Size = size,
                                                        Anchored = hitbox.Anchored,
                                                        CanCollide = hitbox.CanCollide
                                                    }
                                                end
                                            end
                                        end
                                    end

                                    return properties
                                end

                                local storedProperties = Store_Original_Hitbox(closestTitan)

                                function restoreProperties(closestTitan, properties)
                                    if closestTitan.Name == "Attack_Titan" then
                                        local marker = closestTitan:WaitForChild("Marker")
                                        local currentAdornee = marker.Adornee

                                        marker:GetPropertyChangedSignal("Adornee"):Connect(function()
                                            if marker.Adornee ~= currentAdornee then
                                                currentAdornee = marker.Adornee

                                                local hitboxnames = {"Eyes", "LeftArm", "LeftLeg", "Nape", "RightArm", "RightLeg"}

                                                for _, hitboxname in ipairs(hitboxnames) do
                                                    local hitbox = closestTitan.Hitboxes.Hit:FindFirstChild(hitboxname)

                                                    if hitbox and properties[hitboxname] then
                                                        hitbox.Size = properties[hitboxname].Size
                                                        hitbox.Anchored = properties[hitboxname].Anchored
                                                        hitbox.CanCollide = properties[hitboxname].CanCollide
                                                    end
                                                end
                                            end
                                        end)
                                    end
                                end

                                local function Expand_Hitbox(closestTitan)
                                    local napeObject

                                    if closestTitan.Name == "Attack_Titan" and closestTitan.Hitboxes:FindFirstChild("Hit") then
                                        local hitboxname = tostring(closestTitan.Marker.Adornee)
                                        for _, hitbox in ipairs(closestTitan.Hitboxes.Hit:GetChildren()) do
                                            if hitbox.Name == hitboxname then
                                                napeObject = hitbox
                                                break
                                            end
                                        end
                                    elseif closestTitan.Name ~= "Attack_Titan" then
                                        napeObject = closestTitan.Hitboxes.Hit.Nape
                                    end

                                    if napeObject then
                                        napeObject.Size = Vector3.new(300, 300, 300)
                                        napeObject.CanCollide = false
                                        napeObject.Anchored = false
                                    end
                                end

                                local nape = currentTitan.Hitboxes.Hit.Nape
                                local currentTitanHead = currentTitan:FindFirstChild("Head") or currentTitan:GetPivot()

                                local startTime = os.clock()
                                local moveCancelled = false
                                local notfirsttp = false
                                local notsecondtp = false

                                repeat task.wait()
                                    if norefills_noblades then return end
                                    while sigmarefill do
                                        task.wait()
                                    end
                                    local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                                    local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
                                    -- gas variables
                                    local gradientOffsett = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset
                                    local gaspercentage = player.PlayerGui.Interface.HUD.Main.Top.Gas.Percentage
                                    local gaspercentagetext = gaspercentage.Text:match("%d+%.?%d*")
                                    local gaspercentageNumber = stringToNumber(gaspercentagetext)

                                    Store_Original_Hitbox(closestTitan)

                                    Expand_Hitbox(closestTitan)

                                    -- Refill Section
                                    while bladeSetsText == "0 / 3" and gradientOffset.X == 0 and not humanoid.PlatformStand or gaspercentageNumber <= 2 and gradientOffsett.Y <= 0 and not humanoid.PlatformStand do task.wait()
                                        if norefills_noblades then return end
                                        while sigmarefill do
                                            task.wait()
                                        end
                                        bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                                        gaspercentagetext = gaspercentage.Text:match("%d+%.?%d*")
                                        gaspercentageNumber = stringToNumber(gaspercentagetext)
                                        gradientOffsett = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset

                                        while skibidirefill do task.wait()
                                            --print("skibidirefill status:", skibidirefill)
                                            if not sigmarefill then
                                                --print("skibidirefill status:", skibidirefill, "moveCancelled Status:", moveCancelled)
                                                humanoidRootPart.CFrame = currentTitanHead.CFrame * CFrame.new(0, 300, 0)
                                            end
                                        end

                                        if not sigmarefill then
                                            --print("bladeSetsText status:", bladeSetsText, "moveCancelled Status:", moveCancelled)
                                            humanoidRootPart.CFrame = currentTitanHead.CFrame * CFrame.new(0, 300, 0)
                                        elseif bladeSetsText == "3 / 3" or gaspercentageNumber > 95 then
                                            break
                                        end

                                        --print("bladeSetsText status:", bladeSetsText, "2")
                                        if bladeSetsText == "3 / 3" or not autofarmraidrisky or gaspercentageNumber > 95 then
                                            break
                                        end
                                    end
                                        -- \\Attack Titan//
                                    if not roar then
                                        --print("roar chest status 3:", roar)
                                        local tp_time = os.clock() + 0.5
                                        while os.clock() < tp_time do task.wait()
                                            while sigmarefill do
                                                task.wait()
                                            end
                                            humanoidRootPart.CFrame = currentTitanHead.CFrame * CFrame.new(0, 400, 0)
                                        end
                                        clickCenterScreen()
                                        clickCenterScreen()
                                        humanoidRootPart.CFrame = currentTitanHead.CFrame * CFrame.new(0, distancey, 0)
                                        TP_Count = TP_Count + 1
                                        if TP_Count == 3 then
                                            restoreProperties(closestTitan, storedProperties)
                                            Expand_Hitbox(closestTitan)
                                            TP_Count = 0
                                        end
                                    end

                                    -- Check if refill
                                    if bladeSetsText == "0 / 3" and gradientOffset.X == 0 and not humanoid.PlatformStand or gaspercentageNumber <= 2 and gradientOffsett.Y <= 0 and not humanoid.PlatformStand then
                                        break
                                    end

                                    -- Time Out after 15 seconds
                                    if os.clock() - startTime >= 15 then
                                        break
                                    end

                                until (humanoid.Health / humanoid.MaxHealth) * 100 < healthtpat and tplow or not autofarmraidrisky or not currentTitan:FindFirstChild("Humanoid") or player.PlayerGui.Interface.Buttons:FindFirstChildOfClass("CanvasGroup") or humanoid.PlatformStand or skibidirefill or sigmarefill
                            end

                            -- Health recovery loop
                            if (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and tplow then
                                repeat task.wait(5)
                                until (humanoid.Health / humanoid.MaxHealth) * 100 >= healthstop or not autofarmraidrisky or not tplow
                            end
                        end)
                        if not success then warn(err) end
                    end
                end)
            end
        end
    }, "autofarmraidrisky")

    Riskyleft:Toggle({
        Name = "1 Shot Eren (black flash)",
        Default = autooneshoteren,
        Callback = function(state)
            autooneshoteren = state
            if autooneshoteren and game.PlaceId == 14012874501 and not damagefarm and Workspace:GetAttribute("Type") == "Raids" then
                task.spawn(function()
                    while autooneshoteren do task.wait()
                        for _, titan in pairs(workspace.Titans:GetChildren()) do
                            if titan:IsA("Model") and titan.Name == "Attack_Titan" and titan.Hitboxes:FindFirstChild("Hit"):FindFirstChild("Nape") and titan:FindFirstChild("Humanoid") and not humanoid.PlatformStand then
                                local distance = (humanoidRootPart.Position - titan.Head.Position).Magnitude
                                if distance < 400 then
                                    while player.PlayerGui.Interface.HUD.Visible == false do
                                        task.wait()
                                    end
                                    while player:GetAttribute("Cutscene") == true do
                                        task.wait()
                                    end
                                    local args = {
                                        [1] = "Hitboxes",
                                        [2] = "Register",
                                        [3] = workspace:WaitForChild("Titans"):WaitForChild("Attack_Titan"):WaitForChild("Hitboxes"):WaitForChild("Hit"):WaitForChild("Nape"),
                                        [4] = 450000,
                                        [5] = 24
                                    }

                                    ReplicatedStorage:WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("GET"):InvokeServer(unpack(args))
                                end
                            end
                        end
                    end
                end)
            end
        end
    }, "AutoOneShotEren")

    local shadowbancheck = false
    local running = false
    
    Riskyleft:Toggle({
        Name = "Shadow Ban Checker",
        Default = shadowbancheck,
        Callback = function(state)
            shadowbancheck = state
    
            if shadowbancheck and not running then
                running = true
                while shadowbancheck do task.wait()
                    local startTime = os.clock()
                    
                    pcall(function()
                        for key in pairs(ReplicatedStorage.Assets.Remotes.GET:InvokeServer("Data", "Get")) do
                            if key:lower():match("blacklist") and key ~= "Is_Blacklisted" and key ~= "Is_Blacklisted_NEW" then
                                Window:Notify({
                                    Title = "North Hub",
                                    Description = "You Shadow Banned :(",
                                    Lifetime = 5
                                })
                                running = false
                                return
                            end
                        end
    
                        Window:Notify({
                            Title = "North Hub",
                            Description = "You Good Cuh :)",
                            Lifetime = 10
                        })
                    end)
    
                    while os.clock() - startTime < 15 do
                        task.wait()
                    end
                    if not shadowbancheck then
                        running = false
                    end
                end
                running = false
            end
        end
    }, "shadowbancheck")

    -- Tab6:Toggle({
    --     Name = "Autofarm Streak Risky (Raid)",
    --     Default = autofarmraidriskystreak,
    --     Callback = function(state)
    --         autofarmraidriskystreak = state
    --         settings.AutoFarmRaidRiskyStreak = state
    --         saveSettings(settings)
    --         if autofarmraidriskystreak and game.PlaceId == 14012874501 and not damagefarm and Workspace:GetAttribute("Type") == "Raids" then
    --             task.spawn(function()
    --                 local roar = false
    --                 oldKillCount = 0
    --                 local TP_Count = 0
    --                 local currentTitan = nil
    --                 local titanStartTime = os.clock()

    --                 local function getAnimationTrack()
    --                     local tracks = workspace.Titans.Attack_Titan.Fake.Controller.Animator:GetPlayingAnimationTracks()
    --                     for _, track in ipairs(tracks) do
    --                         if track.Animation.AnimationId == "rbxassetid://17395738065" then
    --                             return track
    --                         end
    --                     end
    --                     return nil
    --                 end

    --                 -- // CHECK WHEN EREN ROARS TO TP ABOVE TO NOT GET HIT \\
    --                 local function RoarCheck()
    --                     while autofarmraidriskystreak do task.wait()

    --                         while skibidirefill or player.PlayerGui.Interface.Rewards.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and tplow do
    --                             task.wait()
    --                         end

    --                         if workspace.Titans:FindFirstChild("Attack_Titan") and player.PlayerGui.Interface.HUD.Visible then
    --                             local currentTitanHead = workspace.Titans.Attack_Titan:FindFirstChild("Head") or workspace.Titans.Attack_Titan:GetPivot()

    --                             local finishedPlaying = false
    --                             local animationTrack = getAnimationTrack()

    --                             if animationTrack then
    --                                 local function checkAnimationTrack()
    --                                     while animationTrack and animationTrack.IsPlaying do task.wait(.1)
    --                                         roar = true
    --                                         humanoidRootPart.CFrame = currentTitanHead.CFrame * CFrame.new(0, 400, 0)
    --                                         while not player.PlayerGui.Interface.HUD.Visible or skibidirefill or player.PlayerGui.Interface.Rewards.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and tplow or humanoid.PlatformStand do
    --                                             task.wait()
    --                                             roar = false
    --                                         end
    --                                         if not animationTrack.IsPlaying then
    --                                             finishedPlaying = true
    --                                             roar = false
    --                                         end
    --                                     end
    --                                 end
    --                                 task.spawn(checkAnimationTrack)
    --                             end
    --                         end
    --                     end
    --                 end

    --                 -- //AUTO USE GAS\\
    --                 local function AutoUseGas()
    --                     while autofarmraidriskystreak do task.wait()
    --                         if not skibidirefill and foundtitanyes then
    --                             vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
    --                             task.wait(.1)
    --                             vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
    --                             task.wait(.1)
    --                             vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
    --                             task.wait(.1)
    --                             vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
    --                             task.wait(4)
    --                         end
    --                     end
    --                 end

    --                 -- //M1 CHECK\\
    --                 local function M1Check()
    --                     local attacktimer = os.clock()
    --                     local animationIds = {
    --                         "rbxassetid://14518641514", "rbxassetid://14518654101",
    --                         "rbxassetid://14518651360", "rbxassetid://14518648320"
    --                     }
    --                     while autofarmraidriskystreak do task.wait()
    --                         if skibidirefill or player.PlayerGui.Interface.Chests.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and tplow then
    --                             attacktimer = os.clock()
    --                         end
    --                         local tracks = humanoid:GetPlayingAnimationTracks()
    --                         for _, track in ipairs(tracks) do
    --                             if table.find(animationIds, track.Animation.AnimationId) then
    --                                 attacktimer = os.clock()
    --                                 break
    --                             end
    --                         end
    --                         if os.clock() - attacktimer >= 30 then
    --                             humanoid.Health = 0
    --                             break
    --                         end
    --                     end
    --                 end

    --                 local function autoresetnoblades_orrefills()
    --                     while autofarmraidriskystreak do task.wait()
    --                         local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
    --                         local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
    --                         if player:GetAttribute("Refills") == 0 and bladeSetsText == "0 / 3" and character["Rig_"..player.Name].LeftHand.Blade_1.Transparency == 1 and gradientOffset.X == 0 and player.PlayerGui.Interface.Warning.TextTransparency == 1 and player.PlayerGui.Interface.Warning.TextStrokeTransparency == 1 then
    --                             humanoid.Health = 0
    --                         end
    --                     end
    --                 end

    --                 task.spawn(AutoUseGas)
    --                 task.spawn(M1Check)
    --                 task.spawn(RoarCheck)
    --                 task.spawn(autoresetnoblades_orrefills)

    --                 -- //START OF AUTO FARM\\
    --                 while autofarmraidriskystreak do task.wait()
    --                     foundtitanyes = false
    --                     local success, err = pcall(function()

    --                         while player.PlayerGui.Interface.HUD.Visible == false do
    --                             task.wait()
    --                         end

    --                         while player:GetAttribute("Cutscene") == true do
    --                             task.wait()
    --                         end

    --                         task.spawn(function()
    --                             pcall(function()
    --                                 task.wait(.5)
    --                                 if workspace:FindFirstChild("Climbable") then
    --                                     for _, v in pairs(workspace.Climbable.Buildings:GetChildren()) do
    --                                         if v.Name ~= "Trost_House6" then
    --                                             v:Destroy()
    --                                         end
    --                                     end
    --                                 end
    --                             end)
    --                         end)

    --                         -- //REMOVE SHIGANSHINA WALLS\\ 
    --                         task.spawn(function()
    --                             pcall(function()
    --                                 task.wait(.5)
    --                                 if workspace:FindFirstChild("Climbable") and workspace.Climbable:FindFirstChild("Walls") then
    --                                     game.Workspace.Climbable.Walls:Destroy()
    --                                 end
    --                             end)
    --                         end)

    --                         -- //GET CLOSEST TITAN TO ROCK OR EREN\\
    --                         local a = workspace.Unclimbable:FindFirstChild("Objective")
    --                         local b = a:FindFirstChild("Defend_Eren")
    --                         local c
    --                         local objectivePart
    --                         if b:FindFirstChild("Attack_Titan") then
    --                             c = b:FindFirstChild("Attack_Titan")
    --                             objectivePart = c:FindFirstChild("HumanoidRootPart")
    --                         elseif not b:FindFirstChild("Attack_Titan") then
    --                             c = b:FindFirstChild("BigRock")
    --                             objectivePart = c
    --                         end

    --                         local closestTitan = nil
    --                         local closestDistance = math.huge

    --                         for _, titan in pairs(workspace.Titans:GetChildren()) do
    --                             if titan:IsA("Model") and titan.Name ~= "Attack_Titan" and titan.Hitboxes:FindFirstChild("Hit"):FindFirstChild("Nape") and titan:FindFirstChild("Humanoid") and not humanoid.PlatformStand then
    --                                 local titanPosition = titan.Head.Position
    --                                 local objectivePosition = objectivePart.Position
    --                                 local distance = (titanPosition - objectivePosition).magnitude

    --                                 if distance < closestDistance then
    --                                     closestDistance = distance
    --                                     closestTitan = titan
    --                                 end
    --                             end
    --                         end

    --                         if closestTitan then
    --                             foundtitanyes = true
    --                             if currentTitan ~= closestTitan then
    --                                 currentTitan = closestTitan
    --                                 titanStartTime = os.clock()
    --                             end

    --                             local nape = currentTitan.Hitboxes.Hit.Nape
    --                             local currentTitanHead = currentTitan:FindFirstChild("Head") or currentTitan:GetPivot()

    --                             local startTime = os.clock()
    --                             local moveCancelled = false
    --                             local notfirsttp = false
    --                             local notsecondtp = false

    --                             repeat task.wait()

    --                                 local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
    --                                 local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
    --                                 -- gas variables
    --                                 local gradientOffsett = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset
    --                                 local gaspercentage = player.PlayerGui.Interface.HUD.Main.Top.Gas.Percentage
    --                                 local gaspercentagetext = gaspercentage.Text:match("%d+%.?%d*")
    --                                 local gaspercentageNumber = stringToNumber(gaspercentagetext)

    --                                 nape.Size, nape.CanCollide, nape.Anchored = Vector3.new(300, 300, 300), false, false

    --                                 -- Refill Section
    --                                 while bladeSetsText == "0 / 3" and gradientOffset.X == 0 and not humanoid.PlatformStand or gaspercentageNumber <= 2 and gradientOffsett.Y <= 0 and not humanoid.PlatformStand do task.wait()

    --                                     bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
    --                                     gaspercentagetext = gaspercentage.Text:match("%d+%.?%d*")
    --                                     gaspercentageNumber = stringToNumber(gaspercentagetext)
    --                                     gradientOffsett = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset

    --                                     while skibidirefill do task.wait()
    --                                         --print("skibidirefill status:", skibidirefill)
    --                                         if not sigmarefill then
    --                                             --print("skibidirefill status:", skibidirefill, "moveCancelled Status:", moveCancelled)
    --                                             humanoidRootPart.CFrame = currentTitanHead.CFrame * CFrame.new(0, 300, 0)
    --                                         end
    --                                     end

    --                                     if not sigmarefill then
    --                                         --print("bladeSetsText status:", bladeSetsText, "moveCancelled Status:", moveCancelled)
    --                                         humanoidRootPart.CFrame = currentTitanHead.CFrame * CFrame.new(0, 300, 0)
    --                                     elseif bladeSetsText == "3 / 3" or gaspercentageNumber > 95 then
    --                                         break
    --                                     end

    --                                     --print("bladeSetsText status:", bladeSetsText, "2")
    --                                     if bladeSetsText == "3 / 3" or not autofarmraidriskystreak or gaspercentageNumber > 95 then
    --                                         break
    --                                     end
    --                                 end
    --                                     -- \\Attack Titan//
    --                                 if not roar then
    --                                     --print("roar chest status 3:", roar)
    --                                     local tp_time = os.clock() + 0.5
    --                                     while os.clock() < tp_time do task.wait()
    --                                         humanoidRootPart.CFrame = currentTitanHead.CFrame * CFrame.new(0, 400, 0)
    --                                     end
    --                                     clickCenterScreen()
    --                                     clickCenterScreen()
    --                                     humanoidRootPart.CFrame = currentTitanHead.CFrame * CFrame.new(0, distancey, 0)
    --                                 end

    --                                 -- Check if refill
    --                                 if bladeSetsText == "0 / 3" and gradientOffset.X == 0 and not humanoid.PlatformStand or gaspercentageNumber <= 2 and gradientOffsett.Y <= 0 and not humanoid.PlatformStand then
    --                                     break
    --                                 end

    --                                 -- Time Out after 15 seconds
    --                                 if os.clock() - startTime >= 15 then
    --                                     break
    --                                 end

    --                             until (humanoid.Health / humanoid.MaxHealth) * 100 < healthtpat and tplow or not autofarmraidriskystreak or not currentTitan:FindFirstChild("Humanoid") or player.PlayerGui.Interface.Buttons:FindFirstChildOfClass("CanvasGroup") or humanoid.PlatformStand
    --                         end

    --                         -- Health recovery loop
    --                         if (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and tplow then
    --                             repeat task.wait(5)
    --                             until (humanoid.Health / humanoid.MaxHealth) * 100 >= healthstop or not autofarmraidriskystreak or not tplow
    --                         end
    --                     end)
    --                     if not success then warn(err) end
    --                 end
    --             end)
    --         end
    --     end
    -- })

    Riskyright:Header({
        Text = "Sub Risky Features"
    })

    Riskyright:Toggle({
        Name = "Tp SafeSpot At Low Health Risky",
        Default = false,
        Callback = function(state)
            autotprisky = state
            if autotprisky then
                task.spawn(function()
                    while autotprisky do task.wait()
                        local success, err = pcall(function()
                            tplow = false
                            local teleportBaseplate = workspace:FindFirstChild("TeleportBaseplate")
    
                            if teleportBaseplate and humanoid and humanoid.MaxHealth > 0 then
                                local currentHealthPercent = (humanoid.Health / humanoid.MaxHealth) * 100
                                if currentHealthPercent <= healthtpat and humanoid.PlatformStand == false then
                                    tplow = true
                                    repeat task.wait(.2)
                                        humanoidRootPart.CFrame = teleportBaseplate.CFrame * CFrame.new(0, 3, 0)
                                        currentHealthPercent = (humanoid.Health / humanoid.MaxHealth) * 100
                                    until currentHealthPercent >= healthstop or not autotprisky
                                end
                            end
                            if not autotprisky then
                                tplow = false
                            end
                        end)
                        if not success then
                            warn(err)
                        end
                    end
                end)
            end
        end
    }, "autotplowhealthrisky")

    Riskyright:Label({
        Text = "This retry is universal for all devices but risky"
    })

    Riskyright:Toggle({
        Name = "Auto Retry Universal Risky",
        Default = retryaltrisky,
        Callback = function(state)
            retryaltrisky = state
            if retryaltrisky and game.PlaceId ~= 14916516914 and game.PlaceId ~= 13379208636 then
                task.spawn(function()

                    local function getRewards()
                        local playerGui = player.PlayerGui
                        while not playerGui.Interface or not playerGui.Interface.Rewards do
                            task.wait()
                        end
                        return playerGui.Interface.Rewards
                    end

                    while retryaltrisky do task.wait(.1)
                        local rewards = getRewards()

                        if rewards.Visible and not player.PlayerGui.Interface.Chests.Visible then
                            if not healing then
                                ReplicatedStorage.Assets.Remotes.GET:InvokeServer("Functions", "Retry", "Add")
                            end
                        end
                    end
                end)
            end
        end
    }, "retryaltrisky")

    Riskyright:Divider()

    Riskyright:Header({
        Text = "Hitbox Stuff (RISKY)"
    })

    Riskyright:Slider({
        Name = "Hitbox Size Slider",
        Minimum = 100,
        Maximum = 300,
        Default = 100,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(value)
            hitboxsize = value
        end
    })

    Riskyright:Dropdown({
        Name = "Select Part to Expand",
        Default = "Nape",
        Options = {"Nape", "Eyes", "LeftArm", "RightArm", "LeftLeg", "RightLeg"},
        Callback = function(Value)
            bodyparttoexpand = Value
        end
    }, "bodyparttoexpand")

    local originalSizes = {}

    local function createVisibleHitbox(part)
        if part:FindFirstChild("HitboxAdornment") then return end

        local adornment = Instance.new("BoxHandleAdornment")
        adornment.Name = "HitboxAdornment"
        adornment.Adornee = part
        adornment.Size = part.Size
        adornment.Color3 = Color3.fromRGB(255, 0, 0)
        adornment.Transparency = 0.7
        adornment.AlwaysOnTop = true
        adornment.ZIndex = 0
        adornment.Parent = part
    end

    local function resetHitbox(part)
        if originalSizes[part] then
            part.Size = originalSizes[part]
            if part:FindFirstChild("HitboxAdornment") then
                part.HitboxAdornment:Destroy()
            end
        end
    end

    Riskyright:Toggle({
        Name = "Hitbox Extender (RISKY)",
        Default = hitboxextender,
        Callback = function(state)
            hitboxextender = state

            if hitboxextender and game.PlaceId ~= 14916516914 and game.PlaceId ~= 13379208636 then
                task.spawn(function()
                    while hitboxextender do task.wait()
                        for _, v in pairs(workspace.Titans:GetDescendants()) do
                            if v.Name == bodyparttoexpand and v.Parent.Name == "Hit" then
                                if not originalSizes[v] then
                                    originalSizes[v] = v.Size
                                end

                                v.Size = Vector3.new(hitboxsize, hitboxsize, hitboxsize)
                                createVisibleHitbox(v)
                            end
                        end
                        if not hitboxextender then
                            for _, v in pairs(workspace.Titans:GetDescendants()) do
                                if v.Name == bodyparttoexpand and v.Parent.Name == "Hit" then
                                    resetHitbox(v)
                                end
                            end
                        end
                    end
                end)
            else
                if game.PlaceId ~= 14916516914 and game.PlaceId ~= 13379208636 then
                    for _, v in pairs(workspace.Titans:GetDescendants()) do
                        if v.Name == bodyparttoexpand and v.Parent.Name == "Hit" then
                            resetHitbox(v)
                        end
                    end
                end
            end
        end
    }, "hitboxextenderrisky")

    Riskyright:Button({
        Name = "Shadow Ban Check",
        Callback = function()
            print((function()
                for key in pairs(ReplicatedStorage.Assets.Remotes.GET:InvokeServer("Data", "Get")) do
                    if key:lower():match("blacklist") and key ~= 'Is_Blacklisted' and key ~= 'Is_Blacklisted_NEW' then
                        return
                            Window:Notify({
                                Title = "North Hub",
                                Description = "You Shadow Banned :(",
                                Lifetime = 5
                            })
                        end
                    end
                return
                    Window:Notify({
                        Title = "North Hub",
                        Description = "You Good Cuh :)",
                        Lifetime = 5
                    })
            end)())
        end
    })

    local function normalizeName(name)
        return name:lower():gsub("%s+", ""):gsub("_", "")
    end

    local function logRewards()
        if player.PlayerGui.Interface:FindFirstChild("Rewards").Visible == true then
            local damageDealt = stringToNumber(player.PlayerGui.Interface.Rewards.Main.Info.Main.Stats.Damage_Dealt.Amount.Text)
            local titansSlain = player.PlayerGui.Interface.Rewards.Main.Info.Main.Stats.Titans_Killed.Amount.Text
            local timeTaken = player.PlayerGui.Interface.Rewards.Main.Info.Main.Stats.Time_Taken.Amount.Text
            local goldEarned = stringToNumber(player.PlayerGui.Interface.Rewards.Main.Info.Main.Items.Gold.Main.Inner.Quantity.Text)
            local expEarned = stringToNumber(player.PlayerGui.Interface.Rewards.Main.Info.Main.Items.XP.Main.Inner.Quantity.Text)
            local gemsEarned = 0

            local function formatBoostTime(boostName)
                local boostInSeconds = player.Boosts:FindFirstChild(boostName) and player.Boosts[boostName].Value or 0
                local hours = math.floor(boostInSeconds / 3600)
                local minutes = math.floor((boostInSeconds % 3600) / 60)
                return string.format("%d:%02d", hours, minutes)
            end
            
            local formattedTime = formatBoostTime("Luck")
            local formattedTime1 = formatBoostTime("Gold")
            local formattedTime2 = formatBoostTime("XP")
            

            if player.PlayerGui.Interface.Rewards.Main.Info.Main.Items:FindFirstChild("Gems") then
                gemsEarned = stringToNumber(player.PlayerGui.Interface.Rewards.Main.Info.Main.Items.Gems.Main.Inner.Quantity.Text)
                --print("gems found", gemsEarned)
            --else
                --print("gems not found")
            end

            local allItems = ""
            local specialItemsFound = false
            local foundItems = {
                secretperk = false,
                legendaryperk = false,
                attackserum = false,
                armoredserum = false,
            }

            for i, v in pairs(player.PlayerGui.Interface.Rewards.Main.Info.Main.Items:GetChildren()) do
                if v:IsA("Frame") and v.Name ~= "Gold" and v.Name ~= "XP" and v.Name ~= "Gems" then
                    allItems = allItems .. v.Name .. "\n"
                    local normalizedName = normalizeName(v.Name)
                    if foundItems[normalizedName] ~= nil then
                        foundItems[normalizedName] = true
                        specialItemsFound = true
                    end
                end
            end

            local level = player:GetAttribute("Level")
            local Streak = player:GetAttribute("Streak")
            local Title = player:GetAttribute("Title"):gsub("[%p%d'_]", "")

            storetotalgoldgemsmissions()
            local data = readData()
            local playerData = data[player.Name] or {
                placeid = 0,
                current_total_gold = 0,
                current_total_gems = 0,
                total_gold = 0,
                total_gems = 0,
                MissionsCompleted = 0,
                Current_Prestige = 0,
                Drill_Thrust = false,
                Torrential_Steel = false,
                cheapestupgrade = 0
            }

            local embed1 = {
                title = "AOT REVOLUTION LOGGER",
                description = ".gg/northhub",
                color = math.random(0, 16777215),
                fields = {
                    { name = "👤 **Username**", value = "||"..player.Name.."||" },
                    { name = "🔰 **Level**", value = "||"..level.."||" },
                    { name = "🎖️ **Prestige**", value = "||"..playerData.Current_Prestige.."||" },
                    { name = "💥 **Damage Dealt**", value = "||"..formatNumber(damageDealt).."||" },
                    { name = "🏆 **Title**", value = "||"..Title.."||" },
                    { name = "🔥 **Streak**", value = "||"..Streak.."||" },
                    { name = "⚔️ **Titans Slain**", value = titansSlain },
                    { name = "⏳ **Time Taken**", value = timeTaken },
                    { name = "💰 **Gold Earned**", value = formatNumber(goldEarned), icon = { url = "rbxassetid://15147178963" } },
                    { name = "💎 **Gems Earned**", value = formatNumber(gemsEarned), icon = { url = "rbxassetid://15147178963" } },
                    { name = "✨ **Exp Earned**", value = formatNumber(expEarned), icon = { url = "rbxassetid://15296242924" } },
                    { name = "💵 **Total Gold**", value = formatNumber(playerData.current_total_gold) },
                    { name = "💵 **Total Gold Earned**", value = formatNumber(playerData.total_gold) },
                    { name = "📈 **Total Gems**", value = formatNumber(playerData.current_total_gems) },
                    { name = "📈 **Total Gems Earned**", value = formatNumber(playerData.total_gems) },
                    { name = "🚀 **Total Missions Completed**", value = playerData.MissionsCompleted },
                    { name = "📦 **Items**", value = allItems, icon = { url = "" } },
                    { name = "🍀 **Luck Boost Time (H:M)**", value = formattedTime},
                    { name = "🪙 **Gold Boost Time (H:M)**", value = formattedTime1},
                    { name = "⚡ **XP Boost Time (H:M)**", value = formattedTime2},
                    
                },
                thumbnail = { url = "https://i.pinimg.com/originals/2c/4b/33/2c4b335e9fb4988b6b76f74d3fce72fc.gif" },
                footer = { text = "AOT REWARD LOGGER" }
            }

            local embed2 = {
                title = "AOT REVOLUTION LOGGER",
                description = "NORTH HUB",
                color = math.random(0, 16777215),
                fields = {
                    { name = "⚔️ **Titans Slain**", value = titansSlain },
                    { name = "⏳ **Time Taken**", value = timeTaken },
                    { name = "📦 **All Items**", value = allItems }
                },
                thumbnail = { url = "https://i.pinimg.com/originals/2c/4b/33/2c4b335e9fb4988b6b76f74d3fce72fc.gif" },
                footer = { text = "LEVI ACKERMANN" }
            }

            local url2 = WebhookInput
            SendMessageEMBED(url2, embed1)

            if specialItemsFound then
                local pingMessage = ""
                if foundItems.secretperk and PingSecret then
                    pingMessage = pingMessage .. "@everyone RECIEVED MYTHICAL PERK [MYTHICAL SNIPER ALERT]\n"
                end
                if foundItems.legendaryperk and PingLegendary then
                    pingMessage = pingMessage .. "@everyone RECIEVED LEGENDARY PERK [SERUM SNIPER ALERT]\n"
                end
                if foundItems.attackserum and PingAttackSerum then
                    pingMessage = pingMessage .. "@everyone " .. "||"..player.Name.."||" .. " RECIEVED ATTACK SERUM [SERUM SNIPER ALERT]\n"
                end
                if foundItems.armoredserum and PingArmoredSerum then
                    pingMessage = pingMessage .. "@everyone " .. "||"..player.Name.."||" .. " RECIEVED ARMORED SERUM [SERUM SNIPER ALERT]\n"
                end
                if pingMessage ~= "" then
                    SendMessage(url2, pingMessage)
                end
            end
        end
    end

    miscright:Divider()

    miscright:Header({
        Text = "Webhook"
    })

    miscright:Input({
        Name = "Input Discord Webhook",
        Default = nil,
        TextDisappear = true,
        Callback = function(Value)
            WebhookInput = Value
        end
    }, "webhook")

    miscright:Button({
        Name = "Test Webhook",
        Callback = function()
            if WebhookInput ~= "" then
                local embed1 = {
                    title = "AOT REVOLUTION LOGGER",
                    description = ".gg/northhub",
                    color = math.random(0, 16777215),
                    fields = {
                        { name = "👤 **Username**", value = "||" .. player.Name .. "||" },
                        { name = "🔰 **Level**", value = "TESTING" },
                        { name = "🎖️ **Prestige**", value = "||".."TESTING".."||" },
                        { name = "💥 **Damage Dealt**", value = "TESTING" },
                        { name = "🏆 **Title**", value = "Title" },
                        { name = "🔥 **Streak**", value = "TESTING" },
                        { name = "⚔️ **Titans Slain**", value = "TESTING" },
                        { name = "⏳ **Time Taken**", value = "TESTING" },
                        { name = "💰 **Gold Earned**", value = "TESTING", icon = { url = "rbxassetid://15147178963" } },
                        { name = "💎 **Gems Earned**", value = "TESTING", icon = { url = "rbxassetid://15147178963" } },
                        { name = "✨ **Exp Earned**", value = "TESTING", icon = { url = "rbxassetid://15296242924" } },
                        { name = "💵 **Total Gold Earned**", value = "TESTING" },
                        { name = "📈 **Total Gems Earned**", value = "TESTING" },
                        { name = "🚀 **Total Missions Completed**", value = "TESTING" },
                        { name = "📦 **Items**", value = "TESTING", icon = { url = "" } },
                        { name = "🍀 **Luck Boost Time (H:M)**", value = "TESTING"},
                        { name = "🪙 **Gold Boost Time (H:M)**", value = "TESTING"},
                        { name = "⚡ **XP Boost Time (H:M)**", value = "TESTING"},
                    },
                    thumbnail = { url = "https://i.pinimg.com/originals/2c/4b/33/2c4b335e9fb4988b6b76f74d3fce72fc.gif" },
                    footer = { text = "AOT REWARD LOGGER" }
                }

                local success, response = pcall(function()
                    SendMessageEMBED(WebhookInput, embed1)
                end)

                if success then
                    print("Test Successful")
                else
                    warn(response)
                end
            else
                warn("Please input a valid webhook")
            end
        end
    })

    miscright:Toggle({
        Name = "Log Rewards",
        Default = logrewards1,
        Callback = function(state)
            logrewards1 = state
            if logrewards1 then
                task.spawn(function()
                    while logrewards1 do
                        local logged = false
                        pcall(function()
                            if player.PlayerGui:FindFirstChild("Interface") and player.PlayerGui.Interface:FindFirstChild("Rewards") and player.PlayerGui.Interface.Rewards.Visible == true and not logged then
                                logged = true
                                logRewards()
                            end
                        end)
                        if logged then
                            task.wait(3600)
                            logged = false
                        else
                            task.wait(1)
                        end
                    end
                end)
            end
        end
    }, "logrewards")
    
    miscright:Toggle({
        Name = "Ping on Mythic Perk",
        Default = PingSecret,
        Callback = function(state)
            PingSecret = state
        end
    }, "pingwebhookonmythic")

    miscright:Toggle({
        Name = "Ping on Leg Perk",
        Default = PingLegendary,
        Callback = function(state)
            PingLegendary = state
        end
    }, "pingwebhookonlegendary")

    miscright:Toggle({
        Name = "Ping on Attack Serum",
        Default = PingAttackSerum,
        Callback = function(state)
            PingAttackSerum = state
        end
    }, "pingwebhookonattackserum")

    miscright:Toggle({
        Name = "Ping on Armored Serum",
        Default = PingArmoredSerum,
        Callback = function(state)
            PingArmoredSerum = state
        end
    }, "pingwebhookonArmoredserum")

    function SendMessageEMBED(url, embed)
        local headers = {
            ["Content-Type"] = "application/json"
        }
        local data = {
            ["embeds"] = {
                {
                    ["title"] = embed.title,
                    ["description"] = embed.description,
                    ["color"] = embed.color,
                    ["fields"] = embed.fields,
                    ["thumbnail"] = embed.thumbnail,
                    ["footer"] = {
                        ["text"] = embed.footer.text
                    }
                }
            }
        }
        local body = httpService:JSONEncode(data)
        local response = request({
            Url = url,
            Method = "POST",
            Headers = headers,
            Body = body
        })
    end

    function SendMessage(url, message)
        local headers = {
            ["Content-Type"] = "application/json"
        }
        local data = {
            ["content"] = message
        }
        local body = http:JSONEncode(data)
        local response = request({
            Url = url,
            Method = "POST",
            Headers = headers,
            Body = body
        })
        print("Sent")
    end

    local function handleWarning()
        if player.PlayerGui.Interface.Warning.Visible then
            local button = player.PlayerGui.Interface.Warning.Prompt.Main.Yes
            press(button)
            task.wait(.3)
        end
    end

    local rarities = {["Secret"] = 3, ["Legendary"] = 2, ["Epic"] = 1}

    local function getRarity(familyText)
        for rarity, _ in pairs(rarities) do
            if string.find(familyText, rarity) then
                return rarity
            end
        end
        return nil
    end

    Familyleft:Header({
        Text = "Press P to halt any Auto Spin/ Reroll"
    })

    Familyleft:Slider({
        Name = "Auto Spin Delay",
        Minimum = 0,
        Maximum = 4,
        Default = 1,
        DisplayMethod = "Value",
        Precision = 1,
        Callback = function(value)
            spindelay = value
        end
    }, "AutoSpinDelay")

    Familyleft:Dropdown({
        Name = "Select Family You Want",
        Default = "FRITZ (Secret)",
        Options = {"FRITZ", "YAEGER","ACKERMAN","REISS","GALLIARD","ZOE","LEONHART","TYBUR","KSAVER","BRAUN","FINGER","ARLERT"},
        Callback = function(Value)
            fam = Value
        end
    })

    local function clickRerollButton()
        local button = player.PlayerGui.Interface.Customisation.Family.Buttons_2.Roll
        press(button)
        task.wait(.3)
    end

    if game.PlaceId == 13379208636 then
        UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
            if gameProcessedEvent then return end
            if input.KeyCode == Enum.KeyCode.P then
                autoreroll = false
                redeemcodes = false
                print("Auto reroll stopped")
                print("Auto Redeem All Codes Stopped")
            end
        end)
    end

    local function startAutoReroll(targetRarity)
        autoreroll = true
        while autoreroll and player.PlayerGui.Interface.Customisation.Family.Visible and player.PlayerGui.Interface.Customisation.Family.Buttons_2.Roll.Title.Text ~= "ROLL (0)" do task.wait()
            local familyText = player.PlayerGui.Interface.Customisation.Family.Family.Title.Text
            local currentRarity = getRarity(familyText)
            if currentRarity and rarities[currentRarity] >= rarities[targetRarity] then
                autoreroll = false
            else
                repeat task.wait()
                    if player.PlayerGui.Interface.Customisation.Family.Visible and player.PlayerGui.Interface.Customisation.Family.Buttons_2.Roll.Title.Text ~= "ROLL (0)" then
                        clickRerollButton()
                        handleWarning()
                    end
                until getRarity(player.PlayerGui.Interface.Customisation.Family.Family.Title.Text) and rarities[getRarity(player.PlayerGui.Interface.Customisation.Family.Family.Title.Text)] >= rarities[targetRarity] or not autoreroll
            end
        end
    end

    local function startAutoRerollUntilSpecificFamily()
        autoreroll = true
        task.wait()
        local familyTitle = player.PlayerGui.Interface.Customisation.Family.Family.Title
        repeat
            local firstPart = familyTitle.Text:match("^(%S+)")
            if firstPart == fam then
                autoreroll = false
            else
                if player.PlayerGui.Interface.Customisation.Family.Visible and player.PlayerGui.Interface.Customisation.Family.Buttons_2.Roll.Title.Text ~= "ROLL (0)" then
                    clickRerollButton()
                    handleWarning()
                end
            end
        until firstPart == fam or not autoreroll
    end

    Familyleft:Label({
        Text = "Use in Customization Menu"
    })

    Familyleft:Toggle({
        Name = "Auto Reroll Until Selected Family",
        Default = false,
        Callback = function(state)
            autoreroll = state
            if autoreroll and player.PlayerGui.Interface.Customisation.Family.Visible and player.PlayerGui.Interface.Customisation.Family.Buttons_2.Roll.Title.Text ~= "ROLL (0)" then
                startAutoRerollUntilSpecificFamily()
            end
        end
    })

    Familyleft:Toggle({
        Name = "Reroll Until Epic Or +",
        Default = false,
        Callback = function(state)
            autoreroll = state
            if autoreroll and player.PlayerGui.Interface.Customisation.Family.Visible and player.PlayerGui.Interface.Customisation.Family.Buttons_2.Roll.Title.Text ~= "ROLL (0)" then
                startAutoReroll("Epic")
                task.wait(spindelay)
            end
        end
    })

    Familyleft:Toggle({
        Name = "Reroll Until Legendary or +",
        Default = false,
        Callback = function(state)
            autoreroll = state
            if autoreroll and player.PlayerGui.Interface.Customisation.Family.Visible and player.PlayerGui.Interface.Customisation.Family.Buttons_2.Roll.Title.Text ~= "ROLL (0)" then
                startAutoReroll("Legendary")
                task.wait(spindelay)
            end
        end
    })

    Familyleft:Toggle({
        Name = "Reroll Until Mythical",
        Default = false,
        Callback = function(state)
            autoreroll = state
            if autoreroll and player.PlayerGui.Interface.Customisation.Family.Visible and player.PlayerGui.Interface.Customisation.Family.Buttons_2.Roll.Title.Text ~= "ROLL (0)" then
                startAutoReroll("Secret")
                task.wait(spindelay)
            end
        end
    })

    local talents_table = {
        "Gambler",
        "Overslash",
        "Quakestrike",
        "Furyforge",
        "Assassin",
        "Amputation",
        "Stalwart",
        "Stormcharged",
        "Crescendo",
        "Blitzblade",
        "Swiftshot",
        "Necromantic",
        "Thanatophobia",
        "Resilience",
        "Vengeflare",
        "Aegisurge",
        "Riposte",
        "Guardian",
        "Deflectra",
        "Apotheosis",
        "Bloodthief",
        "Omnirange",
        "Flashstep",
        "Vitalize",
        "Lifefeed",
        "Tactician",
        "Gem Fiend",
        "Cooldown Blitz",
        "Mendmaster"
    }    

    local selectedtalents = {}

    Lobbyleft:Header({
        Text = "Auto Prestige"
    })

    Lobbyleft:Dropdown({
        Name = "Select Boost You Want for Prestige",
        Search = true,
        Multi = false,
        Default = chosenboost,
        Options = {"Luck", "Gold", "Exp"},
        Callback = function(Value)
            chosenboost = Value
        end
    })

    local talentsdropdown = Lobbyleft:Dropdown({
        Name = "Select Talents You Want for Prestige",
        Search = true,
        Multi = true,
        Default = nil,
        Options = talents_table,
        Callback = function(Value)
            SelectedTalents = {}
            for talentName, isSelected in pairs(Value) do
                if isSelected then
                    table.insert(SelectedTalents, talentName)
                end
            end
        end
    }, "talentsdesiredforprestige")

    Lobbyleft:Label({
        Text = "these are from 1 million to 10 billion"
    })

    Lobbyleft:Label({
        Text = "Minimum Money for First Prestige"
    })

    Lobbyleft:Slider({
        Name = "",
        Minimum = 1000000,
        Maximum = 10000000000,
        Default = 10000000,
        DisplayMethod = "Formatter",
        Precision = 0,
        Callback = function(value)
            minimumprestigemoney1 = value
        end
    }, "minimumprestigemoney1")

    Lobbyleft:Label({
        Text = "Minimum Money for Second Prestige"
    })
    
    Lobbyleft:Slider({
        Name = "",
        Minimum = 1000000,
        Maximum = 10000000000,
        Default = 100000000,
        DisplayMethod = "Formatter",
        Precision = 0,
        Callback = function(value)
            minimumprestigemoney2 = value
        end
    }, "minimumprestigemoney2")

    Lobbyleft:Label({
        Text = "Minimum Money for Third Prestige"
    })

    Lobbyleft:Slider({
        Name = "",
        Minimum = 1000000,
        Maximum = 10000000000,
        Default = 100000000,
        DisplayMethod = "Formatter",
        Precision = 0,
        Callback = function(value)
            minimumprestigemoney3 = value
        end
    }, "minimumprestigemoney3")

    Lobbyleft:Label({
        Text = "Minimum Money for Fourth Prestige"
    })
    
    Lobbyleft:Slider({
        Name = "",
        Minimum = 1000000,
        Maximum = 10000000000,
        Default = 100000000,
        DisplayMethod = "Formatter",
        Precision = 0,
        Callback = function(value)
            minimumprestigemoney4 = value
        end
    }, "minimumprestigemoney4")

    prestigenotavailabe = false
    local notalreadywaited3 = false

    Lobbyleft:Toggle({
        Name = "Auto Prestige",
        Default = autoprestige,
        Callback = function(state)
            autoprestige = state

            if autoprestige and game.PlaceId ~= 13379208636 then
                task.spawn(function()
                    while player.PlayerGui:FindFirstChild("Loader") do
                        task.wait()
                    end
                    local data = readData()
                    local playerData = data[player.Name] or {
                        placeid = 0,
                        current_total_gold = 0,
                        current_total_gems = 0,
                        total_gold = 0,
                        total_gems = 0,
                        MissionsCompleted = 0,
                        Current_Prestige = 0,
                        Drill_Thrust = false,
                        Torrential_Steel = false,
                        cheapestupgrade = 0
                    }

                    while autoprestige do task.wait(.1)
                        local success, err = pcall(function()
                            if game.PlaceId == 14916516914 then
                                if not notalreadywaited3 then
                                    local goldPath = "PlayerGui.Interface.Topbar.Main.Currencies.Gold"
                                    local skillsPath = "PlayerGui.Interface.Equipment.Tree.Skills"

                                    local gold = waitForPath(goldPath)

                                    local skills = waitForPath(skillsPath)
                                    notalreadywaited3 = true
                                end
                                local currentprestige = player:GetAttribute("Prestige")
                                local currentlevel = player:GetAttribute("Level")
                                prestiging = false
                                local currentGold = stringToNumber(player.PlayerGui.Interface.Topbar.Main.Currencies.Gold.Amount.Text:gsub(",", ""))
                                if (currentprestige == 0 and currentlevel == 100 and currentGold >= minimumprestigemoney1 or currentprestige == 1 and currentlevel == 125 and currentGold >= minimumprestigemoney2 or currentprestige == 2 and currentlevel == 150 and currentGold >= minimumprestigemoney3 or currentprestige == 3 and currentlevel == 175 and currentGold >= minimumprestigemoney4) then
                                    if player.PlayerGui.Interface.Equipment.Prestige.Progress.Bar.Gradient.Offset.X >= 1 and not prestigenotavailabe then
                                        prestiging = true
                                        foundchosentalent = false
                                        if player.PlayerGui.Interface.Missions.Visible then
                                            press(player.PlayerGui.Interface.Missions.Prompt.Main.Lobbies_Close.Interact)
                                            task.wait(.5)
                                        end
                                        if not player.PlayerGui.Interface.Missions.Visible then
                                            if not player.PlayerGui.Interface.Equipment.Visible then
                                                press(player.PlayerGui.Interface.Topbar.Main.Categories.Equipment.Interact)
                                                task.wait(.5)
                                            end
                                            if player.PlayerGui.Interface.Equipment.Visible then
                                                if player.PlayerGui.Interface.Equipment.Prestige.GroupTransparency == 1 then
                                                    press(player.PlayerGui.Interface.Equipment.Categories.Prestige.Main.Interact)
                                                    task.wait(.5)
                                                elseif player.PlayerGui.Interface.Equipment.Prestige.GroupTransparency == 0 then
                                                    if player.PlayerGui.Interface.Equipment.Prestige.B_Prestige.Visible and player.PlayerGui.Interface.Equipment.Prestige.Progress.Bar.Gradient.Offset.X >= 1 then
                                                        press(player.PlayerGui.Interface.Equipment.Prestige.B_Prestige)
                                                        task.wait(.5)
                                                    else
                                                        prestigenotavailabe = true
                                                        while player.PlayerGui.Interface.Equipment.Visible do task.wait(.2)
                                                            realClick(player.PlayerGui.Interface.Topbar.Main.Categories.Gear_Up.Interact)
                                                        end
                                                        return
                                                    end
                                                end
                                                if player.PlayerGui.Interface.Warning.Visible and player.PlayerGui.Interface.Warning.Prompt.Main.Title.Text:lower() == "are you sure you want to prestige?" then
                                                    press(player.PlayerGui.Interface.Warning.Prompt.Main.Yes)
                                                    task.wait(.5)
                                                end
                                            end
                                            if not player.PlayerGui.Interface.Equipment.Visible and workspace.Objects:FindFirstChild("Blackout") and workspace.Objects.Blackout:FindFirstChild("Memories") then
                                                local memories = workspace.Objects.Blackout.Memories
                                                for _, boost in pairs(memories:GetChildren()) do
                                                    if string.match(string.lower(boost.Name), string.lower(chosenboost)) and boost.Holder.Front.Enabled then
                                                        fireclickdetector(boost:FindFirstChildOfClass("ClickDetector"))
                                                        task.wait(1)
                                                        break
                                                    end
                                                end
                                                if not memories:FindFirstChild(chosenboost) then
                                                    for _, names in ipairs(selectedtalents) do
                                                        if names then
                                                            for _, v in ipairs(workspace.Objects.Blackout.Memories:GetChildren()) do
                                                                if v.Name:lower() == names:lower() and v.Holder.Front.Enabled then
                                                                    fireclickdetector(v:FindFirstChildOfClass("ClickDetector"))
                                                                    foundchosentalent = true
                                                                    task.wait(1)
                                                                    break
                                                                end
                                                            end
                                                        end
                                                    end
                                                end
                                                if not memories:FindFirstChild(chosenboost) and not foundchosentalent and player.PlayerGui.Interface.Memories_Buttons.Visible and player.PlayerGui.Interface.Memories_Buttons.M_Reroll.Visible and not player.PlayerGui.Interface.Memories_Buttons.M_Confirm.Visible then
                                                    for _, v in pairs(memories:GetDescendants()) do
                                                        if v:FindFirstChild("Stars") then
                                                            if v.Parent.Parent.Enabled then
                                                                if v.Parent.Parent.Parent.Parent:FindFirstChildOfClass("ClickDetector") then
                                                                    fireclickdetector(v.Parent.Parent.Parent.Parent:FindFirstChildOfClass("ClickDetector"))
                                                                    task.wait(1)
                                                                    break
                                                                end
                                                            end
                                                        end
                                                    end
                                                end
                                                if player.PlayerGui.Interface.Memories_Buttons.M_Confirm.Visible and player.PlayerGui.Interface.Memories_Buttons.Visible then
                                                    press(player.PlayerGui.Interface.Memories_Buttons.M_Confirm)
                                                    task.wait(1)
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                            if game.PlaceId ~= 14916516914 and game.PlaceId ~= 13379208636 then
                                prestiging = false
                                local rewards = player.PlayerGui.Interface.Rewards
                                local button = rewards.Main.Info.Main.Buttons.Retry
                                if rewards.Visible and not player.PlayerGui.Interface.Chests.Visible and button.Title.TextColor3 ~= Color3.fromRGB(0, 0, 0) and button.Title.TextColor3 ~= Color3.fromRGB(255, 255, 255) then
                                    local data = readData()
                                    local playerData = data[player.Name] or {
                                        placeid = 0,
                                        current_total_gold = 0,
                                        current_total_gems = 0,
                                        total_gold = 0,
                                        total_gems = 0,
                                        MissionsCompleted = 0,
                                        Current_Prestige = 0,
                                        Drill_Thrust = false,
                                        Torrential_Steel = false,
                                        cheapestupgrade = 0
                                    }
                                    local currentlevel = player:GetAttribute("Level")
                                    local currentprestige = playerData.Current_Prestige
                                    local currentGold = playerData.current_total_gold
                                    if (currentprestige == 0 and currentlevel == 100 and currentGold >= minimumprestigemoney1 or currentprestige == 1 and currentlevel == 125 and currentGold >= minimumprestigemoney2 or currentprestige == 2 and currentlevel == 150 and currentGold >= minimumprestigemoney3 or currentprestige == 3 and currentlevel == 175 and currentGold >= minimumprestigemoney4) then
                                        press(rewards.Main.Info.Main.Buttons.Leave_2)
                                        task.wait(1)
                                        realClick(rewards.Main.Info.Main.Buttons.Leave_2)
                                        task.wait(.5)
                                    end
                                end
                            end
                        end)
                        if not success then warn(err) end
                    end
                end)
            end
        end
    }, "autoprestige")

    local upgrades = {
        "ODM_Damage",
        "Blade_Durability",
        "Crit_Chance",
        "Crit_Damage",
        "ODM_Gas",
        "ODM_Speed",
        "ODM_Range",
        "ODM_Control"
    }

    local function isOffsetMatch(move)
        return move.Offset == Vector2.new(0, 0)
    end

    Lobbyright:Header({
        Text = "Auto Upgrade"
    })

    Lobbyright:Label({
        Text = "This will be based on your cheapest upgrade"
    })

    Lobbyright:Label({
        Text = "but multiplied by the number selected"
    })

    Lobbyright:Label({
        Text = "Auto Upgrade Minimum Multiplied"
    })

    local notalreadywaited2

    Lobbyright:Slider({
        Name = "",
        Minimum = 5,
        Maximum = 100,
        Default = 100,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(value)
            minimummoneymultiplied = value
        end
    }, "autoupgrademinamountmultiplied")

    Lobbyright:Toggle({
        Name = "Auto Upgrade",
        Default = false,
        Callback = function(state)
            autoupgrade = state

            if autoupgrade and game.PlaceId ~= 13379208636 then
                task.spawn(function()
                    while player.PlayerGui:FindFirstChild("Loader") do
                        task.wait()
                    end
                    local data = readData()
                    local playerData = data[player.Name] or {
                        placeid = 0,
                        current_total_gold = 0,
                        current_total_gems = 0,
                        total_gold = 0,
                        total_gems = 0,
                        MissionsCompleted = 0,
                        Current_Prestige = 0,
                        Drill_Thrust = false,
                        Torrential_Steel = false,
                        cheapestupgrade = 0
                    }
                    local purchaseCount = 0
                    local maxPurchases = 48
                    local setdataalready = false

                    local upgradefound = false
                    if game.PlaceId == 14916516914 then
                        cheapestupgrade = 0
                    elseif game.PlaceId ~= 14916516914 then
                        cheapestupgrade = playerData.cheapestupgrade or 9e99
                    end
                    while autoupgrade do task.wait(.1)
                        local success, err = pcall(function()
                            if game.PlaceId == 14916516914 and purchaseCount < maxPurchases and not prestiging and not unlockingskill then
                                if not notalreadywaited2 then
                                    local goldPath = "PlayerGui.Interface.Topbar.Main.Currencies.Gold"
                                    local skillsPath = "PlayerGui.Interface.Equipment.Tree.Skills"

                                    local gold = waitForPath(goldPath)

                                    local skills = waitForPath(skillsPath)
                                    notalreadywaited2 = true
                                    task.wait(4)
                                end
                                while prestiging or unlockingskill do
                                    task.wait()
                                end
                                upgrading = true
                                local equipmentTab = player.PlayerGui.Interface.Topbar.Main.Categories.Equipment
                                local move = equipmentTab:FindFirstChild("Move")

                                if player.PlayerGui.Interface.Missions.Visible then
                                    press(player.PlayerGui.Interface.Missions.Prompt.Main.Lobbies_Close.Interact)
                                end

                                while move and not isOffsetMatch(move) and autoupgrade and equipmentTab and equipmentTab:FindFirstChild("Interact") and not player.PlayerGui.Interface.Equipment.Visible do
                                    realClick(equipmentTab.Interact)
                                    task.wait(.5)
                                end

                                if not player.PlayerGui.Interface.Equipment.Stats.Visible and player.PlayerGui.Interface.Equipment.Visible then
                                    realClick(player.PlayerGui.Interface.Equipment.Categories.Upgrades.Main.Interact)
                                end

                                local currentGold = stringToNumber(player.PlayerGui.Interface.Topbar.Main.Currencies.Gold.Amount.Text:gsub(",", ""))

                                for _, upgradeName in ipairs(upgrades) do
                                    if purchaseCount >= maxPurchases then
                                        print("Reached max purchase limit")
                                        break
                                    end

                                    local upgradeButton = player.PlayerGui.Interface.Equipment.Stats[upgradeName].Inner:FindFirstChild("Interact", true)

                                    if upgradeButton and upgradeButton.Visible then
                                        realClick(upgradeButton)
                                        task.wait(.1)

                                        local upgradeButtonMain = player.PlayerGui.Interface.Equipment.Stat:FindFirstChild("Upgrade", true)

                                        if upgradeButtonMain and upgradeButtonMain.Visible then
                                            upgradefound = true
                                            local costText = player.PlayerGui.Interface.Equipment.Stat.Cost.Title.Text:gsub(",", "")
                                            local upgradeCost = stringToNumber(costText)

                                            if upgradeCost and (upgradeCost < cheapestupgrade or cheapestupgrade == 0) then
                                                cheapestupgrade = upgradeCost
                                                local data = readData()
                                                local playerData = data[player.Name] or {
                                                    placeid = 0,
                                                    current_total_gold = 0,
                                                    current_total_gems = 0,
                                                    total_gold = 0,
                                                    total_gems = 0,
                                                    MissionsCompleted = 0,
                                                    Current_Prestige = 0,
                                                    Drill_Thrust = false,
                                                    Torrential_Steel = false,
                                                    cheapestupgrade = 0
                                                }
                                                playerData.cheapestupgrade = upgradeCost
                                                writeData(player.Name, playerData)
                                            end

                                            if upgradeCost and currentGold and upgradeCost <= currentGold then
                                                realClick(upgradeButtonMain)
                                                task.wait(.1)
                                            else
                                                purchaseCount += 1
                                            end
                                        else
                                            purchaseCount += 1
                                        end
                                    end
                                end
                            elseif purchaseCount >= maxPurchases and not setdataalready and game.PlaceId == 14916516914 then
                                if not upgradefound then
                                    print("No upgrades found")
                                    local data = readData()
                                    local playerData = data[player.Name] or {
                                        placeid = 0,
                                        current_total_gold = 0,
                                        current_total_gems = 0,
                                        total_gold = 0,
                                        total_gems = 0,
                                        MissionsCompleted = 0,
                                        Current_Prestige = 0,
                                        Drill_Thrust = false,
                                        Torrential_Steel = false,
                                        cheapestupgrade = 0
                                    }
                                    playerData.cheapestupgrade = 9e99
                                    writeData(player.Name, playerData)
                                end
                                setdataalready = true
                                realClick(player.PlayerGui.Interface.Topbar.Main.Categories.Gear_Up.Interact)
                                upgrading = false
                                print("Upgrading status:", upgrading)
                            end

                            if game.PlaceId ~= 14916516914 and game.PlaceId ~= 13379208636 then
                                upgrading = false
                                local rewards = player.PlayerGui.Interface.Rewards
                                local button = rewards.Main.Info.Main.Buttons.Retry
                                if rewards.Visible and not player.PlayerGui.Interface.Chests.Visible and button.Title.TextColor3 ~= Color3.fromRGB(0, 0, 0) and button.Title.TextColor3 ~= Color3.fromRGB(255, 255, 255) then
                                    local data = readData()
                                    local playerData = data[player.Name] or {
                                        placeid = 0,
                                        current_total_gold = 0,
                                        current_total_gems = 0,
                                        total_gold = 0,
                                        total_gems = 0,
                                        MissionsCompleted = 0,
                                        Current_Prestige = 0,
                                        Drill_Thrust = false,
                                        Torrential_Steel = false,
                                        cheapestupgrade = 0
                                    }
                                    if playerData.current_total_gold > playerData.cheapestupgrade * minimummoneymultiplied then
                                        press(rewards.Main.Info.Main.Buttons.Leave_2)
                                        task.wait(1)
                                        realClick(rewards.Main.Info.Main.Buttons.Leave_2)
                                        task.wait(.5)
                                    end
                                end
                            end
                        end)
                        if not success then warn(err) end
                    end
                end)
            end
        end
    }, "autoupgrade")

    local function waitForHotbarToFinishMoving()
        local skillInterface = player.PlayerGui.Interface.Skill
        local skillHotbar = skillInterface.Hotbar
        local threshold = 0.01
        local lastPosition = skillHotbar.Position
        while true do
            task.wait(.1)

            local currentPosition = skillHotbar.Position
            if (currentPosition.X.Scale - lastPosition.X.Scale)^2 + (currentPosition.Y.Scale - lastPosition.Y.Scale)^2 +
               (currentPosition.X.Offset - lastPosition.X.Offset)^2 + (currentPosition.Y.Offset - lastPosition.Y.Offset)^2 < threshold then
                break
            end
            lastPosition = currentPosition
        end
    end

    Lobbyright:Divider()

    Lobbyright:Header({
        Text = "Unlock Skills OP Farm"
    })

    Lobbyright:Label({
        Text = "make sure your skill tree is reset/ normal"
    })

    local notalreadywaited = false

    Lobbyright:Toggle({
        Name = "Unlock Skills for op farm",
        Default = autounlockskills,
        Callback = function(state)
            autounlockskills = state

            if autounlockskills and game.PlaceId ~= 13379208636 then
                task.spawn(function()
                    while player.PlayerGui:FindFirstChild("Loader") do
                        task.wait()
                    end
                    local data = readData()
                    local playerData = data[player.Name] or {
                        placeid = 0,
                        current_total_gold = 0,
                        current_total_gems = 0,
                        total_gold = 0,
                        total_gems = 0,
                        MissionsCompleted = 0,
                        Current_Prestige = 0,
                        Drill_Thrust = false,
                        Torrential_Steel = false,
                        cheapestupgrade = 0
                    }
                    local alreadyunlocked = false
                    while autounlockskills do task.wait()
                        local success, err = pcall(function()
                            if game.PlaceId == 14916516914 and not prestiging then
                                unlockingskill = false
                                if not notalreadywaited then
                                    local goldPath = "PlayerGui.Interface.Topbar.Main.Currencies.Gold"
                                    local skillsPath = "PlayerGui.Interface.Equipment.Tree.Skills"

                                    local gold = waitForPath(goldPath)

                                    local skills = waitForPath(skillsPath)
                                    notalreadywaited = true
                                    task.wait(2)
                                end
                                while prestiging do
                                    task.wait()
                                end
                                local currentGold = stringToNumber(player.PlayerGui.Interface.Topbar.Main.Currencies.Gold.Amount.Text:gsub(",", ""))
                                local skills = player.PlayerGui.Interface.Equipment.Tree.Skills
                                if (skills.Skill_14.Main.Inner.Stroke.Color ~= Color3.fromRGB(255, 255, 255) and player:GetAttribute("Level") >= 30 and currentGold > 40500) or 
                                (skills.Skill_23.Main.Inner.Stroke.Color ~= Color3.fromRGB(255, 255, 255) and player:GetAttribute("Level") >= 57 and currentGold > 51000) then
                                    unlockingskill = true

                                    if player.PlayerGui.Interface.Missions.Visible then
                                        press(player.PlayerGui.Interface.Missions.Prompt.Main.Lobbies_Close.Interact)
                                        task.wait(.5)
                                    end
                                    if not player.PlayerGui.Interface.Missions.Visible then
                                        while not player.PlayerGui.Interface.Equipment.Visible and autounlockskills do task.wait()
                                            realClick(player.PlayerGui.Interface.Topbar.Main.Categories.Equipment.Interact)
                                            task.wait(.5)
                                        end
                                        if player.PlayerGui.Interface.Equipment.Visible then
                                            if player.PlayerGui.Interface.Equipment.Tree.GroupTransparency == 1 and not player.PlayerGui.Interface.Equipment.Tree.Visible then
                                                press(player.PlayerGui.Interface.Equipment.Categories.Skill_Tree.Main.Interact)
                                                task.wait(.5)
                                            elseif player.PlayerGui.Interface.Equipment.Tree.GroupTransparency == 0 and player.PlayerGui.Interface.Equipment.Tree.Visible then
                                                local skillInterface = player.PlayerGui.Interface.Skill
                                                local skillHotbar = skillInterface.Hotbar
                                                local threshold = 0.01
                                                local lastPosition = skillHotbar.Position
                                                task.wait(.5)
                                                if skills.Skill_14.Main.Inner.Stroke.Color ~= Color3.fromRGB(255, 255, 255) and player:GetAttribute("Level") >= 30 and currentGold > 40500 and (not player.PlayerGui.Interface.Skill.Visible or player.PlayerGui.Interface.Skill.Prompt.Inner.Skill.ContentText:lower() == "drill thrust") then
                                                    if not player.PlayerGui.Interface.Skill.Visible then
                                                        local canvasHeight = skills.CanvasSize.Y.Offset
                                                        local viewHeight = skills.AbsoluteWindowSize.Y

                                                        skills.CanvasPosition = Vector2.new(0, (canvasHeight - viewHeight) * -3)
                                                        task.wait(.5)
                                                        press(skills.Skill_14.Main.Interact)
                                                        task.wait(.5)
                                                    end
                                                    if player.PlayerGui.Interface.Skill.Visible then
                                                        if player.PlayerGui.Interface.Skill.Prompt.Unlock.Title.ContentText:lower() == "unlock" or player.PlayerGui.Interface.Skill.Prompt.Unlock.Title.ContentText:lower() == "unlock all" then
                                                            press(player.PlayerGui.Interface.Skill.Prompt.Unlock)
                                                            task.wait(.5)
                                                        end
                                                        if player.PlayerGui.Interface.Skill.Prompt.Unlock.Title.ContentText:lower() == "equip" then
                                                            press(player.PlayerGui.Interface.Skill.Prompt.Unlock)
                                                            waitForHotbarToFinishMoving()
                                                            task.wait(.5)
                                                        end
                                                        if player.PlayerGui.Interface.Skill.Hotbar.GroupTransparency == 0 then
                                                            press(player.PlayerGui.Interface.Skill.Hotbar.Skill_1.Inner.Backing.State)
                                                            task.wait(.5)
                                                        end
                                                        if player.PlayerGui.Interface.Skill.Prompt.Unlock.Title.ContentText:lower() == "unequip" and player.PlayerGui.Interface.Skill.Prompt.Visible and player.PlayerGui.Interface.Skill.Hotbar.GroupTransparency == 1 then
                                                            press(player.PlayerGui.Interface.Skill.Prompt.Gold_Cost)
                                                            task.wait(.5)
                                                        end
                                                    end
                                                    if skills.Skill_14.Main.Inner.Stroke.Color == Color3.fromRGB(255, 255, 255) then
                                                        playerData.Drill_Thrust = true
                                                        writeData(player.Name, playerData)
                                                    end
                                                end
                                                if skills.Skill_23.Main.Inner.Stroke.Color ~= Color3.fromRGB(255, 255, 255) and player:GetAttribute("Level") >= 57 and currentGold > 51000 and (not player.PlayerGui.Interface.Skill.Visible and skills.Skill_14.Main.Inner.Stroke.Color == Color3.fromRGB(255, 255, 255) or player.PlayerGui.Interface.Skill.Prompt.Inner.Skill.ContentText:lower() == "torrential steel") then
                                                    if not player.PlayerGui.Interface.Skill.Visible then
                                                        local canvasHeight = skills.CanvasSize.Y.Offset
                                                        local viewHeight = skills.AbsoluteWindowSize.Y

                                                        skills.CanvasPosition = Vector2.new(0, (canvasHeight - viewHeight) * -5)
                                                        press(skills.Skill_23.Main.Interact)
                                                        task.wait(.5)
                                                    end
                                                    if player.PlayerGui.Interface.Skill.Visible then
                                                        if player.PlayerGui.Interface.Skill.Prompt.Unlock.Title.ContentText:lower() == "unlock" or player.PlayerGui.Interface.Skill.Prompt.Unlock.Title.ContentText:lower() == "unlock all" then
                                                            press(player.PlayerGui.Interface.Skill.Prompt.Unlock)
                                                            task.wait(.5)
                                                        end
                                                        if player.PlayerGui.Interface.Skill.Prompt.Unlock.Title.ContentText:lower() == "equip" then
                                                            press(player.PlayerGui.Interface.Skill.Prompt.Unlock)
                                                            waitForHotbarToFinishMoving()
                                                            task.wait(.5)
                                                        end
                                                        if player.PlayerGui.Interface.Skill.Hotbar.GroupTransparency == 0 then
                                                            press(player.PlayerGui.Interface.Skill.Hotbar.Skill_2.Inner.Backing.State)
                                                            task.wait(.5)
                                                        end
                                                        if player.PlayerGui.Interface.Skill.Prompt.Unlock.Title.ContentText:lower() == "unequip" and player.PlayerGui.Interface.Skill.Prompt.Visible then
                                                            press(player.PlayerGui.Interface.Skill.Prompt.Gold_Cost)
                                                            task.wait(.5)
                                                        end
                                                    end
                                                    if skills.Skill_23.Main.Inner.Stroke.Color == Color3.fromRGB(255, 255, 255) then
                                                        playerData.Torrential_Steel = true
                                                        writeData(player.Name, playerData)
                                                    end
                                                end
                                            end
                                            if player.PlayerGui.Interface.Warning.Visible and player.PlayerGui.Interface.Warning.Prompt.Main.Title.Text:lower() == "are you sure you want to prestige?" then
                                                press(player.PlayerGui.Interface.Warning.Prompt.Main.Yes)
                                                task.wait(.5)
                                            end
                                        end
                                    end
                                else
                                    if not alreadyunlocked then
                                        task.wait(4)
                                        if skills.Skill_14.Main.Inner.Stroke.Color == Color3.fromRGB(255, 255, 255) then
                                            playerData.Drill_Thrust = true
                                        else
                                            playerData.Drill_Thrust = false
                                        end
                                        if skills.Skill_23.Main.Inner.Stroke.Color == Color3.fromRGB(255, 255, 255) then
                                            playerData.Torrential_Steel = true
                                        else
                                            playerData.Torrential_Steel = false
                                        end
                                        alreadyunlocked = true
                                        writeData(player.Name, playerData)
                                    end
                                end
                            end

                            if game.PlaceId ~= 14916516914 and game.PlaceId ~= 13379208636 then
                                unlockingskill = false
                                local rewards = player.PlayerGui.Interface.Rewards
                                local button = rewards.Main.Info.Main.Buttons.Retry
                                if rewards.Visible and not player.PlayerGui.Interface.Chests.Visible and button.Title.TextColor3 ~= Color3.fromRGB(0, 0, 0) and button.Title.TextColor3 ~= Color3.fromRGB(255, 255, 255) then
                                    local data = readData()
                                    local playerData = data[player.Name] or {
                                        placeid = 0,
                                        current_total_gold = 0,
                                        current_total_gems = 0,
                                        total_gold = 0,
                                        total_gems = 0,
                                        MissionsCompleted = 0,
                                        Current_Prestige = 0,
                                        Drill_Thrust = false,
                                        Torrential_Steel = false,
                                        cheapestupgrade = 0
                                    }
                                    if playerData.current_total_gold > 40500 and not playerData.Drill_Thrust and player:GetAttribute("Level") >= 30 and not playerData.Drill_Thrust or playerData.current_total_gold > 51000 and not playerData.Torrential_Steel and player:GetAttribute("Level") >= 57 and not playerData.Torrential_Steel then
                                        press(rewards.Main.Info.Main.Buttons.Leave_2)
                                        task.wait(1)
                                        realClick(rewards.Main.Info.Main.Buttons.Leave_2)
                                        task.wait(.5)
                                    end
                                end
                            end
                        end)
                        if not success then warn(err) end
                    end
                end)
            end
        end
    }, "autounlockskillsforopfarm")

    Lobbyright:Divider()

    Lobbyright:Header({
        Text = "Auto Roll Artifact"
    })

    Lobbyright:Label({
        Text = "Press P to halt Auto Roll/ Auto Upgrade"
    })

    if game.PlaceId == 14916516914 then
        UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
            if gameProcessedEvent then return end
            if input.KeyCode == Enum.KeyCode.P then
                autorollartifactstats = false
                autoupgradeperk = false
                print("Auto Artifact Roll/ Auto Upgrade Perk Stopped")
            end
        end)
    end

    Lobbyright:Dropdown({
        Name = "Select Stat you Want",
        Search = true,
        Multi = false,
        Default = "ODM Damage",
        Options = {"ODM Damage", "Damage Reduction", "Health", "Health Regen", "Skill CD Reduction", "Crit Chance", "Crit Damage", "Injury Reduction", "Shifter Damage", "ODM Gas", "ODM Range", "Odm Control", "Odm Speed", "Swing Duration"},
        Callback = function(Value)
            selectedstat = Value
        end    
    }, "selectedstat")

    Lobbyright:Slider({
        Name = "Min Stat Amount",
        Minimum = 0,
        Maximum = 30,
        Default = 4,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(state)
            minimumstatamount = state
        end
    }, "minimumstatamount")

    local function extractStatValueAndCheckPlus(text)
        local match = string.match(text, "%+%s*(%d+%.?%d*)")
        local hasPlus = string.find(text, "%+") ~= nil
        return hasPlus, match and stringToNumber(match) or nil
    end

    Lobbyright:Label({
        Text = "Make sure you are actually on the artifact you want to roll and that you are on the artifact roll screen"
    })

    Lobbyright:Toggle({
        Name = "Roll Current Artifact",
        Default = false,
        Callback = function(state)
            autorollartifactstats = state
            if autorollartifactstats and game.PlaceId == 14916516914 and not upgrading and player.PlayerGui.Interface.Equipment.Artifact.Visible and not unlockingskill then
                while autorollartifactstats and not upgrading and not unlockingskill and player.PlayerGui.Interface.Equipment.Artifact.Visible and stringToNumber(player.PlayerGui.Interface.Topbar.Main.Currencies.Gold.Amount.Text) >= stringToNumber(player.PlayerGui.Interface.Equipment.Artifact.Cost.Title.Text) do task.wait()
                    local success, err = pcall(function()
                        local firsstat = player.PlayerGui.Interface.Equipment.Artifact["1"]
                        local secondstat = player.PlayerGui.Interface.Equipment.Artifact["2"]
                        local hasPlus, statValue = extractStatValueAndCheckPlus(firsstat.Main.Stat.Increase.Text)
                        local hasPlus2, statValue2 = extractStatValueAndCheckPlus(secondstat.Main.Stat.Increase.Text)
                        if firsstat.Lock.State.Rotation > 3 and hasPlus and statValue >= minimumstatamount and firsstat.Main.Stat.Label.Text:lower() == selectedstat:lower() and autorollartifactstats then
                            press(firsstat.Lock)
                            task.wait(3)
                        elseif firsstat.Lock.State.Rotation < 3 and (not hasPlus or statValue < minimumstatamount or firsstat.Main.Stat.Label.Text:lower() ~= selectedstat:lower()) and autorollartifactstats then
                            press(firsstat.Lock)
                            task.wait(3)
                        end
                        if secondstat.Lock.State.Rotation > 3 and hasPlus2 and statValue2 >= minimumstatamount and secondstat.Main.Stat.Label.Text:lower() == selectedstat:lower() and autorollartifactstats then
                            press(secondstat.Lock)
                            task.wait(3)
                        elseif secondstat.Lock.State.Rotation < 3 and (not hasPlus2 or statValue2 < minimumstatamount or not secondstat.Main.Stat.Label.Text:lower() == selectedstat:lower()) and autorollartifactstats then
                            press(secondstat.Lock)
                            task.wait(3)
                        end
                        if (firsstat.Lock.State.Rotation > 3 or secondstat.Lock.State.Rotation > 3) and stringToNumber(player.PlayerGui.Interface.Topbar.Main.Currencies.Gold.Amount.Text) >= stringToNumber(player.PlayerGui.Interface.Equipment.Artifact.Cost.Title.Text) and autorollartifactstats then
                            press(player.PlayerGui.Interface.Equipment.Artifact.Buttons.Artifact_Roll)
                            task.wait(.5)
                        end
                        if player.PlayerGui.Interface.Warning.Visible and player.PlayerGui.Interface.Warning.Prompt.Visible and player.PlayerGui.Interface.Warning.Prompt.Main.Visible and autorollartifactstats then
                            press(player.PlayerGui.Interface.Warning.Prompt.Main.Yes)
                            task.wait(.5)
                        end
                    end)
                    if not success then warn(err) end
                end
            end
        end
    })

    Lobbyright:Divider()

    Lobbyright:Header({ Text = "Auto Upgrade Perk"})

    Lobbyright:Label({
        Text = "Make sure you are actually on the Perk you want to Upgrade and that you are on the Perk Upgrade Screen"
    })

    Lobbyright:Toggle({
        Name = "Upgrade Current Perk",
        Default = false,
        Callback = function(state)
            autoupgradeperk = state
            if autoupgradeperk and game.PlaceId == 14916516914 and not upgrading and not unlockingskill and player.PlayerGui.Interface.Equipment.Enhancement.Visible then
                while autoupgradeperk and not upgrading and not unlockingskill and player.PlayerGui.Interface.Equipment.Enhancement.Visible and stringToNumber(player.PlayerGui.Interface.Topbar.Main.Currencies.Gold.Amount.Text) >= stringToNumber(player.PlayerGui.Interface.Equipment.Enhancement.Cost.Title.Text) do task.wait()
                    local success, err = pcall(function()
                        while player.PlayerGui.Interface.Equipment.Enhancement.Materials.Items["1"].Inner.Main.Empty.Visible and stringToNumber(player.PlayerGui.Interface.Topbar.Main.Currencies.Gold.Amount.Text) >= stringToNumber(player.PlayerGui.Interface.Topbar.Main.Currencies.Gold.Amount.Text) and player.PlayerGui.Interface.Equipment.Enhancement.Level.Title.Text ~= "+10" and autoupgradeperk do task.wait()
                            press(player.PlayerGui.Interface.Equipment.Enhancement.Materials.Enhance_Auto_Add)
                            task.wait(.025)
                        end
                        while not player.PlayerGui.Interface.Equipment.Enhancement.Materials.Items["1"].Inner.Main.Empty.Visible and stringToNumber(player.PlayerGui.Interface.Topbar.Main.Currencies.Gold.Amount.Text) >= stringToNumber(player.PlayerGui.Interface.Topbar.Main.Currencies.Gold.Amount.Text) and player.PlayerGui.Interface.Equipment.Enhancement.Level.Title.Text ~= "+10" and autoupgradeperk do task.wait()
                            press(player.PlayerGui.Interface.Equipment.Enhancement.Press)
                            task.wait(.025)
                        end
                    end)
                    if not success then warn(err) end
                end
            end
        end
    })

    MacLib:SetFolder("NorthHubAOTR")
    tabs.Settings:InsertConfigSection("Left")

    Window.onUnloaded(function()
        print("Unloaded!")
    end)

    tabs.Main:Select()
    MacLib:LoadAutoLoadConfig()
    task.spawn(function()
        local autohidetimer = os.clock() + 120
        local success = false
        if AutoHide then task.wait()

            UserInputService.InputBegan:Connect(function(input, gameProcessed)
                if not gameProcessed and input.KeyCode == Enum.KeyCode.RightControl then
                    macUI.Enabled = true
                end
            end)
            
            while os.clock() < autohidetimer do task.wait()
                while macUI and macUI.Enabled do
                    if togglemacUI() then
                        success = true
                        break
                    end
                    task.wait(.1)
                end
                if success then
                    print("auto hide successful")
                    break
                end
            end
        end
    end)
end

if game.GameId == 1663370770 and getgenv().MO == true then

    local character = player.Character or player.CharacterAdded:Wait()

    while not character do task.wait()
        character = player.Character
    end

    local hrp = character:FindFirstChild("HumanoidRootPart")

    while not hrp do task.wait()
        hrp = character:FindFirstChild("HumanoidRootPart")
    end

    local humanoid = character:FindFirstChildOfClass("Humanoid")

    while not humanoid do task.wait()
        humanoid = character:FindFirstChildOfClass("Humanoid")
    end

    if not NetworkClient:FindFirstChild('ClientReplicator') then
        sendNotification("Error", "Current Server is Bugged, serverhopping..", 5)
        task.wait(3)
        serverhop()
    end

    local MacLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/ImSa1f/dwadaw/refs/heads/main/vasst"))()

    local windowWidth = math.clamp(screenSize.X * 0.6, 350, 800)
    local windowHeight = math.clamp(screenSize.Y * 0.6, 200, 650)

    local Window = MacLib:Window({
        Title = "North Hub",
        Subtitle = "discord.gg/northhub",
        Size = UDim2.fromOffset(windowWidth, windowHeight),
        DragStyle = 1,
        DisabledWindowControls = {},
        ShowUserInfo = false,
        Keybind = Enum.KeyCode.RightControl,
        AcrylicBlur = true,
    })

    local macUI

    while not macUI do task.wait()
        for i,v in pairs(coreGui:GetDescendants()) do
            if v.Name == "ScreenGui" and v:FindFirstChild("Base") then
                macUI = v
            end
        end
        for i, x in ipairs(gethui():GetChildren()) do
            if x.Name == "ScreenGui" and x:FindFirstChild("Base") then 
                macUI = x
            end
        end
    end


    local function togglemacUI()
        if macUI then
            macUI.Enabled = not macUI.Enabled
            return true
        else
            return false
        end
    end

    local function createButtonUI()
        if not macUI or not macUI.Parent then
            error("macUI or macUI.Parent is not defined")
        end

        local buttonGui = Instance.new("ScreenGui")
        buttonGui.Name = "ButtonUI"
        buttonGui.Parent = macUI.Parent

        local backgroundFrame = Instance.new("Frame")
        backgroundFrame.Name = "BackgroundFrame"
        backgroundFrame.Size = UDim2.new(0, 60, 0, 60)
        backgroundFrame.Position = UDim2.new(1, -70, -0.03, -30)
        backgroundFrame.BackgroundColor3 = Color3.new(1, 0, 0)
        backgroundFrame.BorderSizePixel = 0
        backgroundFrame.BackgroundTransparency = 1 
        backgroundFrame.Parent = buttonGui

        local button = Instance.new("ImageButton")
        button.Name = "OpenButton"
        button.Image = "rbxassetid://107491175530182"
        button.Size = UDim2.new(0, 100, 0, 100)
        button.Position = UDim2.new(0.5, -45, 0.5, -45)
        button.BackgroundTransparency = 1
        button.Parent = backgroundFrame

        return button
    end


    if UserInputService.TouchEnabled then
        local button = createButtonUI()
        button.MouseButton1Click:Connect(togglemacUI)
    end

    local globalSettings = {
        UIBlurToggle = Window:GlobalSetting({
            Name = "UI Blur",
            Default = Window:GetAcrylicBlurState(),
            Callback = function(bool)
                Window:SetAcrylicBlurState(bool)
                Window:Notify({
                    Title = Window.Settings.Title,
                    Description = (bool and "Enabled" or "Disabled") .. " UI Blur",
                    Lifetime = 5
                })
            end,
        }),
        NotificationToggler = Window:GlobalSetting({
            Name = "Notifications",
            Default = Window:GetNotificationsState(),
            Callback = function(bool)
                Window:SetNotificationsState(bool)
                Window:Notify({
                    Title = Window.Settings.Title,
                    Description = (bool and "Enabled" or "Disabled") .. " Notifications",
                    Lifetime = 5
                })
            end,
        }),
        ShowUserInfo = Window:GlobalSetting({
            Name = "Show User Info",
            Default = Window:GetUserInfoState(),
            Callback = function(bool)
                Window:SetUserInfoState(bool)
                Window:Notify({
                    Title = Window.Settings.Title,
                    Description = (bool and "Showing" or "Redacted") .. " User Info",
                    Lifetime = 5
                })
            end,
        })
    }

    local tabGroups = {
        TabGroup1 = Window:TabGroup()
    }

    local tabs = {
        Autotrain = tabGroups.TabGroup1:Tab({ Name = "Auto Train", Image = "rbxassetid://80798080840782" }),
        Notify = tabGroups.TabGroup1:Tab({ Name = "Notify", Image = "rbxassetid://93347906587647" }),
        Autocook = tabGroups.TabGroup1:Tab({ Name = "Auto Cook", Image = "rbxassetid://77137042306566" }),
        Misc = tabGroups.TabGroup1:Tab({ Name = "Misc", Image = "rbxassetid://121157752745208" }),
        Risky = tabGroups.TabGroup1:Tab({ Name = "Risky", Image = "rbxassetid://113446708604407" }),
        Stats = tabGroups.TabGroup1:Tab({ Name = "Stats", Image = "rbxassetid://106804767297733" }),
        Settings = tabGroups.TabGroup1:Tab({ Name = "Settings", Image = "rbxassetid://10734950309" })
    }

    local sections = {
        Trainingleft = tabs.Autotrain:Section({ Side = "Left" }),
        Trainingright = tabs.Autotrain:Section({ Side = "Right" }),

        Notifyleft = tabs.Notify:Section({ Side = "Left" }),
        Notifyright = tabs.Notify:Section({ Side = "Right" }),

        Autocookleft = tabs.Autocook:Section({ Side = "Left" }),
        Autocookright = tabs.Autocook:Section({ Side = "Right" }),

        Miscleft = tabs.Misc:Section({ Side = "Left" }),
        Miscright = tabs.Misc:Section({ Side = "Right" }),

        Riskyleft = tabs.Risky:Section({ Side = "Left" }),
        Riskyright = tabs.Risky:Section({ Side = "Right" }),

        Statsleft = tabs.Stats:Section({ Side = "Left" }),
        Statsright = tabs.Stats:Section({ Side = "Right" }),
    }

    local Trainingleft = sections.Trainingleft
    local Trainingright = sections.Trainingright

    local Notifyleft = sections.Notifyleft
    local Notifyright = sections.Notifyright

    local Autocookleft  = sections.Autocookleft
    local Autocookright = sections.Autocookright

    local Miscleft = sections.Miscleft
    local Miscright = sections.Miscright

    local Riskyleft = sections.Riskyleft
    local Riskyright = sections.Riskyright

    local Statsleft = sections.Statsleft
    local Statsright = sections.Statsright


    function SimulateClick(button,cmd)
        pcall(function()
            if getconnections then
            local string = {
                ha = "MouseButton1Click",
                ez = "MouseButton1Down",
                la = "Activated",
            }
            for i,v in pairs(string) do
                for i,v in pairs(getconnections(button[v])) do
                    v[cmd]()
                end
            end
        end
        end)
    end

    local espToggles = {}
    local CESP = false
    local panicdelay = 0.5
    local panicdashdelay = 3
    local CurrentRegening = false
    local panicangle = math.random(35, 90)
    local VIM = game:GetService("VirtualInputManager")
    local panicdashdebounce = false
    local ministam = 20
    local regenstamina
    local regentoamt = 50
    local autopanic
    local UIS = game:GetService("UserInputService")
    local Mouse = game.Players.LocalPlayer:GetMouse()
    local holdclick
    local CurrentGanker = nil
    local currentlyviewing = nil
    local macroruin
    local playmacroruinaudio = false
    local playopssound = false
    local opjoinedsound = 93133248032532 --98451938135974
    local copjoinedsound = 5476307813--79616283404367
    local staffjoinedsound = 76424256393028--78820995273583
    local gettinggankedsound = 1843497734--85873567825777
    local streetfightersound = 1836349031
    local flowstatesound = 14145625743
    local movingAlready = false
    local OPsData = nil
    local selectedposition
    local highlightplayers = false
    pcall(function()
        OPsData = readfile("MOoppositions.json")
    end)
    local OPSNotifier = false
    local SleepNotifier
    local alreadynotifieduser = nil
    local macroruindebounce = false
    local NoFoodNotify
    local LogOnNoFood
    local webhookUrl
    local camera = workspace.CurrentCamera
    local rs = game:GetService("RunService")
    local ESP
    local wanted = { "Owner", "Associates.", "Mod", "Trial Mod", "sircroc!" }
    local WhitelistedStats = {
        "Durability",
        "UpperBodyMuscle",
        "RunningSpeed",
        "Fat",
        "StrikingPower",
        "StrikingSpeed",
        "LowerBodyMuscle",
        "Height",
        "Stamina",
    }
    local oldVolume = nil
    local CurrentlyPlaying = {}
    local copnotifier
    local staffnotifier
    local disableOnStaff
    local flownotifier = false
    local flowconnection = nil
    local sfnotifier = false
    local sfconnection = nil
    local acknowledged = false
    local acook = false
    local SelectedFood = ""
    local abn
    local TotalServings = 1
    local absbox
    local autotrain
    local traintype
    local trainspeed
    local isrunning = false
    local startPunching = false
    local currentcombo
    local m2already = false
    local strikepower
    local durability
    local DuraTool = ""
    local AutoWalkAfterPushedBack
    local AutoWalkToPosition
    local AutoWalkBackPosition
    local ft
    local st
    local taketurns = false
    local durainprogress = false
    local stopAtHP = 20
    local SkillXP = false
    local AutoStop = false
    local LogOnNotEnoughMoney = false
    local WalkBackWhenFar = false
    local FatigueToStop = 65
    local LogOnFatigued = false
    local autosleepLog, autosleepRes, autosleepwalk = false, false, false
    local AutoSleepPaths = {
        ["Noi"] = {
            ["IsInsideDist"] = 90,

            ["Sequence"] = {
                CFrame.new(
                    -563.773621,
                    47.9251785,
                    -239.531036,
                    -0.023773279,
                    2.32641151e-09,
                    -0.999717355,
                    -4.37537873e-09,
                    1,
                    2.43111575e-09,
                    0.999717355,
                    4.43193793e-09,
                    -0.023773279
                ), -- NOI INSIDE
                CFrame.new(
                    -491.393372,
                    47.1251755,
                    -334.181793,
                    0.707333982,
                    5.5018571e-08,
                    0.706879497,
                    2.09656843e-08,
                    1,
                    -9.8812194e-08,
                    -0.706879497,
                    8.47134345e-08,
                    0.707333982
                ), --midpoint1
                CFrame.new(
                    -637.209961,
                    47.125164,
                    -446.7258,
                    0.0272168536,
                    7.69836674e-08,
                    0.999629557,
                    6.81569645e-09,
                    1,
                    -7.71977682e-08,
                    -0.999629557,
                    8.91425156e-09,
                    0.0272168536
                ), --HospitalLoaded
            },
        },

        ["Karate"] = {
            ["IsInsideDist"] = 90,

            ["Sequence"] = {
                CFrame.new(
                    -664.119202,
                    47.6938782,
                    -611.250977,
                    -0.00150513474,
                    -8.3909228e-08,
                    0.999998868,
                    1.02445374e-09,
                    1,
                    8.39108623e-08,
                    -0.999998868,
                    1.15074972e-09,
                    -0.00150513474
                ), -- karate inside
                CFrame.new(
                    -725.983948,
                    47.7645721,
                    -574.489563,
                    -0.999990106,
                    -5.69174006e-08,
                    0.00445292145,
                    -5.67966332e-08,
                    1,
                    2.7247351e-08,
                    -0.00445292145,
                    2.69941687e-08,
                    -0.999990106
                ), --midpoint1
                CFrame.new(
                    -726.560303,
                    46.7939758,
                    -458.533325,
                    -0.896284282,
                    -4.07478096e-09,
                    0.443480015,
                    -3.75909188e-08,
                    1,
                    -6.6783997e-08,
                    -0.443480015,
                    -7.65282664e-08,
                    -0.896284282
                ), --HospitalLoaded
            },
        },
    }
    local trainingsTodo = {}
    local enabledToggles = {}
    local sleepanims = {
        "rbxassetid://5110906576",
        "rbxassetid://4959794246",
        "rbxassetid://5110983609",
        "rbxassetid://4959795216",
        "rbxassetid://4959793113",
        "rbxassetid://5110953707",
        "rbxassetid://5110982040",
        "rbxassetid://5110919996",
    }
    local disabledFeaturesRunning = false
    local ESPDistance = 10000
    local strikespeed = false
    local rhythmcheckdebounce = false
    local autoeat = false
    local detectnofood = false
    local stopAEinCombat = false
    local FillUp = 80
    local EatAt = 30
    local autosupplement = false
    local selectedsupplement = nil
    local machines = false
    local treadselect = nil
    local machinetype = nil
    local CurrentRegening = false
    local ping = "@everyone"
    local statcheck = false
    local RhythmToggle = false
    local RunToPercent = 50
    local waittostamina = 70
    local PunchStartPercent = 55
    local PunchEndPercent = 20
    local Roadwork = false
    local RWCanSprint = false
    local CPRangeTilNext = 7
    local PointRangeTilNext = 6
    local m1speedslider = 0.1
    local DrinkAmm = 1
    local LastMachine = nil
    local spuseM2 = false
    local ssuseM2 = false
    local autostarve = false
    local staminabelowpercent = 20
    local ASisrunning = false
    local PFS = game:GetService("PathfindingService")
    local HRP = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")
    local pathStatus = Enum.PathStatus
    local player = game.Players.LocalPlayer
    local autobuyitem = false
    local itemselected = nil
    local StopInCombat = false
    local StopKnocked = false
    local autosprintcombat = false
    local holdingW = false
    local disableall = false
    local began, ended = nil, nil
    local moveto, donebuying = false, false
    local buydistances = 60
    local foodAvailable
    task.spawn(function()
    local dontopen = false
    local buyammount = 8
    local suppammount = 8
    local Folder = Instance.new("Folder", Workspace)
    Folder.Name = "Waypoints"
    end)
    shared.currentPoint = nil
    local MOfoods = {
        "Donut",
        "Coffee",
        "Bagel",
        "EZ Taco",
        "Omelette",
        "Hotdog",
        "Pancakes",
        "Tofu Beef Soup",
        "Pie",
        "Tokito Sake",
        "Hamburger",
        "Chicken Fries",
        "Ramen",
        "Chicken",
        "Curry",
        "Steak",
        "Steak Fried Rice",
        "Braised Potatoes",
        "Sunny side up egg",
        "Onigiri",
        "Marinade Lobster",
    }
    local recipes = {
        ["Steak"] = {
            ["Seasoning"] = 1,
            ["Raw Beef"] = 1,
        },
        ["Chicken"] = {
            ["Seasoning"] = 1,
            ["Raw Chicken"] = 1,
        },
        ["Sunny Side up Egg"] = {
            ["Egg"] = 1,
        },
        ["Onigri"] = {
            ["Rice"] = 2,
            ["Seasoning"] = 1,
            ["Seaweed"] = 1,
            ["Soy Sauce"] = 1,
        },
        ["Omelette"] = {
            ["Egg"] = 2,
            ["Seasoning"] = 1,
        },
        ["Braised Potato"] = {
            ["Potato"] = 2,
            ["Soy Sauce"] = 1,
            ["Onion"] = 1,
            ["Seasoning"] = 1,
        },
        ["Steak Fried Rice"] = {
            ["Rice"] = 1,
            ["Egg"] = 2,
            ["Onion"] = 1,
            ["Carrot"] = 1,
            ["Raw Beef"] = 1,
            ["Tomato"] = 1,
            ["Seasoning"] = 1,
            ["Spice"] = 1,
        },
        ["Curry"] = {
            ["Spice"] = 1,
            ["Potato"] = 1,
            ["Carrot"] = 1,
            ["Raw Beef"] = 1,
            ["Rice"] = 2,
            ["Onion"] = 1,
        },
        ["Marinade Lobster"] = {
            ["Seasoning"] = 1,
            ["Raw Lobster"] = 1,
            ["Spice"] = 1,
        },
    }

    local NoSupplement = false
    local buysupplement = false
    local GoingForFood = false
    local GoingForSupp = false

    function CheckForFood()
        if SelectedFood == nil then
            return false
        end
        for i, v in pairs(recipes[SelectedFood]) do
            if game.Players.LocalPlayer.Backpack:FindFirstChild(i) == nil then
                return false
            end
            if game.Players.LocalPlayer.Backpack:FindFirstChild(i).Quantity.Value < v then
                return false
            end
        end
        return true
    end

    function GetItemTable()
        local tbl = {}

        for i, v in pairs(workspace.Map:GetChildren()) do
            if v:FindFirstChild("Shopnoid") or (v.Name == "Lao Stand shop") then
                if v.Name == "Lao Stand shop" then
                    for _, item in pairs(v:GetChildren()) do
                        if item.Name and item.Name:match(":") then
                            local foodname = item.Name:split(":")[1]
                            if table.find(MOfoods, foodname) then
                                table.insert(tbl, item)
                            end
                        end
                    end
                elseif v:FindFirstChild("Shopnoid") then
                    local foodname = v.Name:split(":")[1]
                    if table.find(MOfoods, foodname) then
                        table.insert(tbl, v)
                    end
                end
            end
        end
        

        return tbl
    end

    function GetSupplementTable()
        local tbl2 = {}
        local keywords = {"Protein", "Scalar", "Fat Burner", "BCAA"}
    
        for i, v in pairs(workspace.Map:GetChildren()) do
            for _, keyword in pairs(keywords) do
                if v.Name:find(keyword) then
                    table.insert(tbl2, v)
                    break
                end
            end
        end
    
        return tbl2
    end
    
    local ItemTable = GetItemTable()
    local SupplementTable = GetSupplementTable()

    function round(n)
        return math.floor(n) * 1
    end

    function GetPan()
        local bestdistance, pan = nil, nil
        local paninstances = {
            workspace,
            game:GetService("Workspace").Map.Apartments.Apartment2,
            game:GetService("Workspace").Map.HOMRA,
            game:GetService("Workspace").Map.Apartments.Apartment4,
            game:GetService("Workspace").Map.Apartments.Apartment1,
            game:GetService("Workspace").Map["Street House"],
            game:GetService("Workspace")["Organisation Building"],
        }

        for _, instance in pairs(paninstances) do
            for i, v in pairs(instance:GetChildren()) do
                if v.Name == "Stove" or v:FindFirstChild("Stove") then
                    if v:FindFirstChild("Stove") then
                        v = v:FindFirstChild("Stove")
                    end

                    local distance = (
                        v.PanModel.FoodP.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position
                    ).Magnitude

                    if bestdistance == nil and distance <= 5 then
                        bestdistance = distance
                        pan = v.PanModel
                    elseif bestdistance ~= nil and distance <= 5 then
                        if bestdistance > distance and distance <= 5 then
                            bestdistance = distance
                            pan = v.PanModel
                        end
                    end
                end
            end
        end
        return pan
    end

    function playsound(id)
        local sound = Instance.new("Sound", game.CoreGui)
        sound.SoundId = "rbxassetid://" .. id
        sound.Volume = 10
        sound.Looped = true
        sound:Play()
        return sound
    end

    function createPath(point)
        local currentPath = PFS:FindPathAsync(HRP.Position, point)
        local pathExists = false

        if currentPath.Status == pathStatus.Success then
            pathExists = true

            spawn(function()
                while pathExists and task.wait() and Roadwork and shared.currentPoint ~= nil do
                    player.Character.Humanoid.WalkToPoint = shared.currentPoint
                end
            end)

            for i, v in pairs(currentPath:GetWaypoints()) do
                if Roadwork == false then
                    shared.currentPoint = nil
                    break
                end
                repeat
                    task.wait()
                    shared.currentPoint = v.Position
                until (HRP.Position - v.Position).Magnitude < CPRangeTilNext or Roadwork == false
            end
        elseif currentPath.Status ~= pathStatus.Success or shared.currentPoint == nil then
            pathExists = false
        end
    end

    function Callback(answer)
        acknowledged = true
        UserSettings():GetService("UserGameSettings").MasterVolume = oldVolume
        oldVolume = nil
        for i, v in pairs(CurrentlyPlaying) do
            v:Stop()
            game.Debris:AddItem(v, 0.01)
        end
        CurrentlyPlaying = {}
        task.delay(1, function()
            acknowledged = false
        end)

        if answer == "OMG FLOW" and game:GetService("Workspace"):FindFirstChild("XinFolder") then
            local QuestMarker = Instance.new("BillboardGui")
            local ImageLabel = Instance.new("ImageLabel")

            QuestMarker.Name = "ESP"
            QuestMarker.Parent = game:GetService("Workspace").XinFolder:FindFirstChildOfClass("Model").HumanoidRootPart
            QuestMarker.AlwaysOnTop = true
            QuestMarker.Size = UDim2.new(0, 50, 0, 50)

            ImageLabel.Parent = QuestMarker
            ImageLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            ImageLabel.BackgroundTransparency = 1.000
            ImageLabel.Size = UDim2.new(1, 0, 1, 0)
            ImageLabel.Image = "rbxassetid://2334137638"
            ImageLabel.ImageColor3 = Color3.fromRGB(255, 85, 0)
        elseif answer == "LIGHTWORK" and game:GetService("Workspace"):FindFirstChild("AokiFolder") then
            local QuestMarker = Instance.new("BillboardGui")
            local ImageLabel = Instance.new("ImageLabel")

            QuestMarker.Name = "ESP"
            QuestMarker.Parent = game:GetService("Workspace").AokiFolder:FindFirstChildOfClass("Model").HumanoidRootPart
            QuestMarker.AlwaysOnTop = true
            QuestMarker.Size = UDim2.new(0, 50, 0, 50)

            ImageLabel.Parent = QuestMarker
            ImageLabel.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            ImageLabel.BackgroundTransparency = 1.000
            ImageLabel.Size = UDim2.new(1, 0, 1, 0)
            ImageLabel.Image = "rbxassetid://2334137638"
            ImageLabel.ImageColor3 = Color3.fromRGB(255, 85, 0)
        end
    end

    local Bindable = Instance.new("BindableFunction")
    Bindable.OnInvoke = Callback

    function GetSkill()
        local lol = game:GetService("Players").LocalPlayer.PlayerGui.BackpackGUI.Frame

        for i, v in pairs(lol:GetChildren()) do
            if v.ClassName == "ImageLabel" then
                if tostring(v.ImageColor3) == "0.419608, 0.32549, 0.137255" then
                    if game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool") then
                        if game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool"):FindFirstChild("Skill") then
                            return game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool"), v
                        end
                    end
                elseif tostring(v.ImageColor3) == "0.211765, 0.211765, 0.211765" then
                    if game.Players.LocalPlayer.Backpack:FindFirstChild(v.ToolName.Text) then
                        if
                            game.Players.LocalPlayer.Backpack:FindFirstChild(v.ToolName.Text):FindFirstChild("Skill")
                        then
                            return game.Players.LocalPlayer.Backpack:FindFirstChild(v.ToolName.Text), v
                        end
                    end
                end
            end
        end

        return nil, nil
    end

    function disableAllTraining()
        if strikespeed then enabledToggles["strikespeed"] = true; strikespeed = false end
        if strikepower then enabledToggles["strikepower"] = true; strikepower = false end
        if autotrain then enabledToggles["autotrain"] = true; autotrain = false end
        if durability then enabledToggles["durability"] = true; durability = false end
        if machines then enabledToggles["machines"] = true; machines = false end

        Window:Notify({
            Title = "Training Disabled",
            Description = "All training toggles have been disabled.",
            Lifetime = 5
        })

    end
    
    function restoreTraining()
        for toggle, _ in pairs(enabledToggles) do
            if toggle == "strikespeed" then strikespeed = true end
            if toggle == "strikepower" then strikepower = true end
            if toggle == "autotrain" then autotrain = true end
            if toggle == "durability" then durability = true end
            if toggle == "machines" then machines = true end
        end
        enabledToggles = {}

        Window:Notify({
            Title = "Training Restored",
            Description = "All training toggles have been restored.",
            Lifetime = 5
        })
    end
    
    function Notifier(v)
        if v ~= nil then
            if v:IsInGroup(15987464) and copnotifier or v:IsInGroup(7677568) and copnotifier then
                if oldVolume == nil then
                    oldVolume = UserSettings():GetService("UserGameSettings").MasterVolume
                end
                local level = 10 / 10
                UserSettings():GetService("UserGameSettings").MasterVolume = level
                CurrentlyPlaying[#CurrentlyPlaying + 1] = playsound(copjoinedsound)

                game.StarterGui:SetCore("SendNotification", {
                    Title = "FUCK 12 (Cop)",
                    Text = v.Name,
                    Duration = math.huge,
                    Button1 = "NIII",
                    Callback = Bindable,
                })
            end

                if table.find(wanted, v:GetRoleInGroup(4800422)) and staffnotifier then
                    if disableOnStaff then
                    disableAllTraining()
                end

                if oldVolume == nil then
                    oldVolume = UserSettings():GetService("UserGameSettings").MasterVolume
                end
                local level = 10 / 10
                UserSettings():GetService("UserGameSettings").MasterVolume = level
                CurrentlyPlaying[#CurrentlyPlaying + 1] = playsound(staffjoinedsound)

                game.StarterGui:SetCore("SendNotification", {
                    Title = "Staff Joined Kid Be Careful",
                    Text = v.Name,
                    Duration = math.huge,
                    Button1 = "fuck him",
                    Callback = Bindable,
                })
                if oldVolume == nil then
                    oldVolume = UserSettings():GetService("UserGameSettings").MasterVolume
                end
            end
        else
            if game:GetService("Workspace"):FindFirstChild("XinFolder") and flownotifier then
                if oldVolume == nil then
                    oldVolume = UserSettings():GetService("UserGameSettings").MasterVolume
                end
                local level = 10 / 10
                UserSettings():GetService("UserGameSettings").MasterVolume = level
                CurrentlyPlaying[#CurrentlyPlaying + 1] = playsound(flowstatesound)

                game.StarterGui:SetCore("SendNotification", {
                    Title = "Flow NPC",
                    Text = "LUKE XIN",
                    Duration = math.huge,
                    Button1 = "no way!",
                    Callback = Bindable,
                })
            end

            if game:GetService("Workspace"):FindFirstChild("AokiFolder") and sfnotifier then
                if oldVolume == nil then
                    oldVolume = UserSettings():GetService("UserGameSettings").MasterVolume
                end
                local level = 10 / 10
                UserSettings():GetService("UserGameSettings").MasterVolume = level
                CurrentlyPlaying[#CurrentlyPlaying + 1] = playsound(streetfightersound)

                game.StarterGui:SetCore("SendNotification", {
                    Title = "SF NPC",
                    Text = "STREET FIGHTER",
                    Duration = math.huge,
                    Button1 = "free asf",
                    Callback = Bindable,
                })
            end
        end
    end

    game:GetService("Workspace").Live.DescendantAdded:Connect(function(child)
        if child.Name == "Attacking" and child.Parent ~= game.Players.LocalPlayer.Character and macroruin then
            local playerCharacter = game.Players.LocalPlayer.Character
            if playerCharacter and playerCharacter:FindFirstChild("HumanoidRootPart") and child.Parent:FindFirstChild("HumanoidRootPart") then
                local distance = (child.Parent.HumanoidRootPart.Position - playerCharacter.HumanoidRootPart.Position).Magnitude
                if distance <= 5 then
                    local playerListGui = game.Players.LocalPlayer.PlayerGui:FindFirstChild("PlayerList")
                    if playerListGui and playerListGui:FindFirstChild("Main") and playerListGui.Main:FindFirstChild("SF") then
                        local holder = playerListGui.Main.SF:FindFirstChild("Holder")
                        if holder then
                            local playerLabel = holder:FindFirstChild(child.Parent.Name)
                            if playerLabel then
                                CurrentGanker = playerLabel.Player.Title.Text .. " [" .. child.Parent.Name .. "]"
                            end
                        end
                    end
                end
            end
        end
    end)
    
    --[[
    if getgenv().spectateList == nil then
        getgenv().spectateList = true

        task.spawn(function()
            local gankedLists = {}
            local plrList = game:GetService("Players").LocalPlayer.PlayerGui.PlayerList.Main.SF.Holder

            while spectateList and task.wait() do
                pcall(function()
                    if game.Players.LocalPlayer.PlayerGui:FindFirstChild("PlayerList") ~= nil then
                        plrList = game:GetService("Players").LocalPlayer.PlayerGui.PlayerList.Main.SF.Holder

                        if gankedLists[plrList] ~= true then
                            gankedLists[plrList] = true
                            repeat
                                task.wait()
                            until game:IsLoaded() and game.Players.LocalPlayer.Character ~= nil
                            repeat
                                task.wait()
                            until game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")

                            for i, v in pairs(plrList:GetChildren()) do
                                if v:IsA("ImageButton") and v.Name ~= game.Players.LocalPlayer.Name then
                                    v.User.Activated:Connect(function()
                                        if currentlyviewing ~= nil then
                                            if currentlyviewing:FindFirstChild("Player") ~= nil then
                                                if currentlyviewing == v then
                                                    currentlyviewing.Player.Title.TextColor3 = Color3.fromRGB(255, 255, 255)
                                                    workspace.CurrentCamera.CameraSubject = game.Players.LocalPlayer.Character:WaitForChild("Humanoid")
                                                    currentlyviewing = nil
                                                    return
                                                end
                                                currentlyviewing.Player.Title.TextColor3 = Color3.fromRGB(255, 255, 255)
                                            elseif currentlyviewing:FindFirstChild("Player") == nil then
                                                workspace.CurrentCamera.CameraSubject = game.Players.LocalPlayer.Character:WaitForChild("Humanoid")
                                                currentlyviewing = nil
                                            end
                                        end

                                        local viewplr = workspace.Live:FindFirstChild(v.Name)
                                        if viewplr == nil then
                                            return
                                        end
                                        if viewplr:FindFirstChild("Humanoid") ~= nil then
                                            workspace.CurrentCamera.CameraSubject = viewplr:WaitForChild("Humanoid")
                                            v.Player.Title.TextColor3 = LibraryColor
                                            currentlyviewing = v
                                            task.spawn(function()
                                                while (currentlyviewing == v) and task.wait(0.5) do
                                                    local viewplr = workspace.Live:FindFirstChild(v.Name)
                                                    if viewplr == nil then
                                                        workspace.CurrentCamera.CameraSubject = game.Players.LocalPlayer.Character:WaitForChild("Humanoid")
                                                        currentlyviewing = nil
                                                        break
                                                    end
                                                end
                                            end)
                                        end
                                    end)
                                end
                            end

                            plrList.ChildAdded:Connect(function(v)
                                    if v:IsA("ImageButton") and v.Name ~= game.Players.LocalPlayer.Name then
                                    v.User.Activated:Connect(function()
                                        if currentlyviewing ~= nil then
                                            if currentlyviewing:FindFirstChild("Player") ~= nil then
                                                if currentlyviewing == v then
                                                    currentlyviewing.Player.Title.TextColor3 = Color3.fromRGB(255, 255, 255)
                                                    workspace.CurrentCamera.CameraSubject = game.Players.LocalPlayer.Character:WaitForChild("Humanoid")
                                                    currentlyviewing = nil
                                                    return
                                                end
                                                currentlyviewing.Player.Title.TextColor3 = Color3.fromRGB(255, 255, 255)
                                            elseif currentlyviewing:FindFirstChild("Player") == nil then
                                                workspace.CurrentCamera.CameraSubject = game.Players.LocalPlayer.Character:WaitForChild("Humanoid")
                                                currentlyviewing = nil
                                            end
                                        end

                                        local viewplr = workspace.Live:FindFirstChild(v.Name)
                                        if viewplr == nil then
                                            return
                                        end
                                        if viewplr:FindFirstChild("Humanoid") ~= nil then
                                            workspace.CurrentCamera.CameraSubject = viewplr:WaitForChild("Humanoid")
                                            v.Player.Title.TextColor3 = LibraryColor
                                            currentlyviewing = v
                                            task.spawn(function()
                                                while (currentlyviewing == v) and task.wait(0.5) do
                                                    local viewplr = workspace.Live:FindFirstChild(v.Name)
                                                    if viewplr == nil then
                                                        workspace.CurrentCamera.CameraSubject =
                                                            game.Players.LocalPlayer.Character:WaitForChild("Humanoid")
                                                        currentlyviewing = nil
                                                        break
                                                    end
                                                end
                                            end)
                                        end
                                    end)
                                end
                            end)
                        end
                    end
                end)
            end
        end)
    end
    --]]

    function round(p8, p9)
        if not p9 then
            return math.floor(p8 + 0.5)
        end
        local v15 = math.floor(p8 * 10 ^ p9 + 0.5) / 10 ^ p9
        local v16 = string.len(v15)
        local v17 = string.sub(v15, v16, v16)
        local v18 = v16 - 1
        if string.sub(v15, v18, v18) == "." then
            v15 = v15 .. "0"
        end
        return v15
    end
    
    if typeof(getgc) ~= "nil" then
        local StatViewerLabels = nil
    
        shared.StatUpdate = function(v)
            if statcheck ~= true then
                return
            end
    
            if not v or typeof(v) ~= "table" then
                warn("Invalid StatTable data")
                return
            end
    
            -- Initialize StatViewerLabels if it doesn't exist
            StatViewerLabels = StatViewerLabels or {}
    
            -- Update all stats dynamically
            for i, statValue in pairs(v) do
                if table.find(WhitelistedStats, i) then
                    local displayValue
    
                    -- Check if the stat is a table or number
                    if typeof(statValue) == "table" and statValue[1] then
                        displayValue = round(statValue[1], 3)
                    elseif typeof(statValue) == "number" then
                        displayValue = round(statValue, 3)
                    else
                        displayValue = tostring(statValue) -- Fallback for unexpected types
                    end
    
                    -- Update label or create a new one
                    if StatViewerLabels[i] then
                        StatViewerLabels[i]:Refresh(i .. " - " .. displayValue)
                    else
                        StatViewerLabels[i] =     Statsright:Label({Text = (i .. " - " .. displayValue)})  
                    end
                end
            end
        end
    
        function StatTable()
            local ls = game.Players.LocalPlayer.Backpack:FindFirstChild("LocalS")
            if not ls then
                warn("LocalS script not found in Backpack")
                return nil
            end
    
            ls = getsenv(ls)
            for _, v in pairs(ls) do
                if typeof(v) == "function" then
                    for _, upval in pairs(debug.getupvalues(v)) do
                        if typeof(upval) == "table" and upval["Height"] then
                            return upval
                        end
                    end
                end
            end
            warn("Stat table not found")
            return nil
        end

        

    function GetBed()
        local bestdistance, bed = math.huge, nil
    
        for _, v in pairs(game:GetService("Workspace"):GetChildren()) do
            if v.Name:find("Bed") and not v:FindFirstChild("OccupiedBy") then
                local distance = (v.Matress.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                if distance < bestdistance then
                    bestdistance = distance
                    bed = v
                end
            end
        end
    
        if bed == nil then
            for _, v in pairs(game:GetService("Workspace"):GetChildren()) do
                if v.Name:find("Map") then
                    for i, x in pairs(v.Apartments:GetChildren()) do
                        if x.Name:find("Apartment") then
                            for _, bedObject in pairs(x:GetDescendants()) do
                                if bedObject.Name == "Bed" and bedObject.Parent:IsA("Model") then
                                    local distance = (bedObject.Matress.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                                    local Owner = bedObject:FindFirstChild("Owner") and bedObject.Owner.Value or nil
                                    if Owner == tostring(game.Players.LocalPlayer.UserId) then
                                        return bedObject
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    
        return bed
    end
    
    function GetMachineType(v)
        if v:FindFirstChild("Screen") then
            return "Treadmill"
        elseif v:FindFirstChildOfClass("MeshPart") and v:FindFirstChild("Barbell") then
            return "Bench"
        elseif not v:FindFirstChildOfClass("MeshPart") and v:FindFirstChild("Barbell") then
            return "Squat"
        else
            return "nil"
        end
    end

    function ClosestMachine()
        local bestdistance, machine = nil, nil
        local machineinstances =
            { workspace.Naniwa, workspace["Organisation Building"], workspace.Map, workspace:GetChildren()[1436] }

        for _, instance in pairs(machineinstances) do
            for i, v in pairs(instance:GetChildren()) do
                if GetMachineType(v) == machinetype and v.Name == "Machine" then
                    if v:FindFirstChild("Machine") then
                        v = v:FindFirstChild("Machine")
                    end
                    local distance = (v.Base.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                    local MaxActivationDist = v.ClickDetector.MaxActivationDistance

                    if distance <= MaxActivationDist then
                        if bestdistance == nil and machine == nil then
                            bestdistance = distance
                            machine = v
                        elseif bestdistance > distance then
                            bestdistance = distance
                            machine = v
                        end
                    end
                end
            end
        end

        return machine
    end

    function ChargeRhythm(combatTool)
        if not RhythmToggle then
            return
        end

        if game.Players.LocalPlayer.Character.HumanoidRootPart.RhythmUI.Enabled == false and combatTool.Parent == game.Players.LocalPlayer.Character
        then
            VIM:SendKeyEvent(true, "R", false, game)
            task.wait(0.1)
        elseif
            game.Players.LocalPlayer.Character.HumanoidRootPart.RhythmUI.Enabled == true
            and combatTool.Parent == game.Players.LocalPlayer.Character
            and game.Players.LocalPlayer.Character.Rhythm.Value ~= 100
            and not rhythmcheckdebounce
        then
            rhythmcheckdebounce = true
            task.spawn(function()
                local oldRhythm = game.Players.LocalPlayer.Character.Rhythm.Value
                task.wait(0.1)
                if game.Players.LocalPlayer.Character.Rhythm.Value < oldRhythm then
                    VIM:SendKeyEvent(true, "R", false, game)
                    task.wait(0.1)
                    oldRhythm = game.Players.LocalPlayer.Character.Rhythm.Value
                    repeat
                        task.wait()
                    until game.Players.LocalPlayer.Character.Rhythm.Value == 100
                        or game.Players.LocalPlayer.Character.Rhythm.Value < oldRhythm
                        or combatTool.Parent ~= game.Players.LocalPlayer.Character
                else
                    repeat
                        task.wait()
                    until game.Players.LocalPlayer.Character.Rhythm.Value == 100
                        or game.Players.LocalPlayer.Character.Rhythm.Value < oldRhythm
                        or combatTool.Parent ~= game.Players.LocalPlayer.Character
                end
                rhythmcheckdebounce = false
            end)
        end
    end

    function IsSleeping()
        for i, v in pairs(game.Players.LocalPlayer.Character.Humanoid:GetPlayingAnimationTracks()) do
            if table.find(sleepanims, v.Animation.AnimationId) then
                return true
            end
        end
        return false
    end

    function webhook(title, desc, important)
        pcall(function()
            local url = webhookUrl 
            print("webhook?")
            if url == "" then
                return
            end

            local data

            data = {
                ["content"] = ping .. " Say Bismillah!",
                ["username"] = "North Hub!",
                ["avatar_url"] = "https://cdn.discordapp.com/attachments/1217810814808100864/1311374885519626292/40xf09fa4ac.webp?ex=6748a088&is=67474f08&hm=7fb5f8a50fd943873502273a86acdc73ae7159195c5dd507112a1107756159c6&",
                ["embeds"] = {
                    {
                        ["author"] = {
                            ["name"] = "Mighty Omega | " .. title,
                            ["icon_url"] = "https://cdn.discordapp.com/attachments/1217810814808100864/1311374880222216283/sticker.png?ex=6748a087&is=67474f07&hm=872700320dfda92393373f163671b0b7219a4b57c6d3d4804fefa67216104eba&",
                        },
                        ["description"] = desc,
                        ["color"] = 110335,
                    },
                },
            }

            local porn = httpService:JSONEncode(data)

            local headers = { ["content-type"] = "application/json" }
            request = http_request or request or HttpPost or syn.request or http.request
            local sex = { Url = url, Body = porn, Method = "POST", Headers = headers }
            warn("Sending webhook notification...")
            request(sex)
        end)
    end

    function sleepWalk(point)
        task.spawn(function()
            shared.AllowSprinting = false
    
            while task.wait(0.1) and autosleepwalk do
                pcall(function()
                    local actionscript = getsenv(game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("LocalS"))
                    local StamPercent = (
                        game.Players.LocalPlayer.Character.CurrentStamina.Value / game.Players.LocalPlayer.Character.MaxStamina.Value) * 100
                    local LowStam = ministam
    
                    if isrunning == false and StamPercent >= 100 and shared.AllowSprinting then
                        actionscript.runPrompt()
                        isrunning = true
                        task.wait(1)
                    elseif isrunning == true and shared.AllowSprinting then
                        repeat StamPercent = (game.Players.LocalPlayer.Character.CurrentStamina.Value/ game.Players.LocalPlayer.Character.MaxStamina.Value) * 100
                            task.wait()
                        until StamPercent <= LowStam
                            or StamPercent == 100
                            or autosleepwalk == false
                            or shared.AllowSprinting == false
    
                        actionscript.stopSprint()
                        isrunning = false
                    elseif isrunning == true and shared.AllowSprinting == false then
                        actionscript.stopSprint()
                        isrunning = false
                    end
                end)
            end
    
            shared.AllowSprinting = false
        end)
    
        local plr = game.Players.LocalPlayer
        local char = plr.Character or plr.CharacterAdded:Wait()
        local hum = char:WaitForChild("Humanoid")
        local PFS = game:GetService("PathfindingService")
        local HRP = char:WaitForChild("HumanoidRootPart")
    
        local currentPath
        local ran = pcall(function()
            currentPath = PFS:CreatePath({
                AgentRadius = 2,
                AgentHeight = 5,
                AgentCanJump = true,
                AgentJumpHeight = hum.JumpHeight,
                AgentMaxSlope = hum.MaxSlopeAngle,
                WaypointSpacing = 4
            })
            currentPath:ComputeAsync(HRP.Position, point.Position)
        end)
    
        if not ran or currentPath.Status ~= Enum.PathStatus.Success then
            print("Failed to find path, retrying with point position...")
            return false
        end
    
        print("Path found successfully.")
        _G.OngoingPath = true
    
        task.spawn(function()
            while _G.OngoingPath and task.wait() and autosleepwalk do
                pcall(function()
                    if (HRP.Position - _G.currentPoint).Magnitude > 5 then
                        hum:MoveTo(_G.currentPoint)
                    end
                end)
            end
        end)
    
        local lastbroken, LBinit, NotMoving = false, false, false
        local oldhumanpos, lastupdate = nil, nil
        local jumpDebounce = false
        local useOldMethod, TimesBroken, verifiedMoving = false, 0, false
    
        for _, v in pairs(currentPath:GetWaypoints()) do
            if not _G.OngoingPath then
                print("Pathfinding stopped.")
                return false
            end
    
            if v.Action == Enum.PathWaypointAction.Jump and not jumpDebounce then
                jumpDebounce = true
                task.spawn(function()
                    hum:ChangeState(Enum.HumanoidStateType.Jumping)
                    task.wait(0.7)
                    jumpDebounce = false
                end)
            end
    
            local part = Instance.new("Part")
            part.Shape = "Ball"
            part.Material = "Neon"
            part.Size = Vector3.new(0.6, 0.6, 0.6)
            part.Position = v.Position + Vector3.new(0, 6, 0)
            part.Anchored = true
            part.CanCollide = false
            part.Parent = game.Workspace
    
            local oldpos = HRP.Position
            local updatedelay = false
    
            if lastupdate == nil then
                lastupdate = tick()
            else
                if (tick() - lastupdate) >= 2 then
                    lastupdate = tick()
                    oldhumanpos = HRP.Position
                end
            end
    
            if NotMoving and lastbroken and TimesBroken >= 3 then
                useOldMethod = true
            end
    
            if useOldMethod then
                if autosleepwalk == false then
                    game.Debris:AddItem(part, 0.01)
                    return
                end
                shared.AllowSprinting = true
                useOldMethod = true
                hum:MoveTo(v.Position)
                hum.MoveToFinished:Wait()
                game.Debris:AddItem(part, 0.01)
            else
                repeat
                    task.wait()
                    if autosleepwalk == false then
                        game.Debris:AddItem(part, 0.01)
                        return
                    end
                    _G.currentPoint = v.Position
                    if verifiedMoving then
                        shared.AllowSprinting = true
                    end
    
                    if
                        (HRP.Position - v.Position).Magnitude > 5
                        and (HRP.Position - part.Position).Magnitude > 4
                    then
                        if oldpos ~= HRP.Position and not lastbroken and not updatedelay then
                            task.spawn(function()
                                updatedelay = true
                                oldpos = HRP.Position
                                task.delay(1, function()
                                    updatedelay = false
                                end)
                            end)
                        elseif oldpos == HRP.Position and not lastbroken then
                            oldpos = HRP.Position
                            lastbroken = true
                            verifiedMoving = false
                            NotMoving = true
                            break
                        elseif oldpos == HRP.Position and lastbroken and not LBinit then
                            LBinit = true
                            task.spawn(function()
                                shared.AllowSprinting = false
                                task.wait(1)
                                if oldpos == HRP.Position and not jumpDebounce then
                                    if TimesBroken <= 0 then
                                        jumpDebounce = true
                                        task.spawn(function()
                                            hum:ChangeState(Enum.HumanoidStateType.Jumping)
                                            task.wait(0.7)
                                            jumpDebounce = false
                                        end)
                                    end
                                end
    
                                oldpos = HRP.Position
                                lastbroken = false
                                LBinit = false
                                TimesBroken = TimesBroken + 1
                            end)
                        end
                    elseif oldhumanpos ~= nil then
                        if (HRP.Position - oldhumanpos).Magnitude <= 0.05 and not jumpDebounce then
                            jumpDebounce = true
                            task.spawn(function()
                                hum:ChangeState(Enum.HumanoidStateType.Jumping)
                                task.wait(0.7)
                                jumpDebounce = false
                            end)
                            oldhumanpos = nil
                            NotMoving = true
                            break
                        end
                    end
                    if (HRP.Position - oldpos).Magnitude > 1 then
                        verifiedMoving = true
                    end
                until (HRP.Position - v.Position).Magnitude < PointRangeTilNext
                    or (HRP.Position - part.Position).Magnitude < 5
                    or _G.OngoingPath ~= true
                    or autosleepwalk == false
                game.Debris:AddItem(part, 0.01)
            end
        end
    
        _G.OngoingPath = false
        print("Pathfinding completed successfully.")
        return true
    end

    function moveToBoth(point, position)
			task.spawn(function()
				shared.AllowSprinting = false

				while task.wait(0.1) and (detectnofood or buysupplement) do
					pcall(function()
						local actionscript = getsenv(game:GetService("Players").LocalPlayer.Backpack.LocalS)
                        local StamPercent = (game.Players.LocalPlayer.Character.CurrentStamina.Value/ game.Players.LocalPlayer.Character.MaxStamina.Value) * 100
						local LowStam = ministam

						if isrunning == false and StamPercent >= 50 and shared.AllowSprinting then
							actionscript.runPrompt()
							isrunning = true
							task.wait(1)
						elseif isrunning == true and shared.AllowSprinting and StamPercent <= ministam then
							repeat StamPercent = (game.Players.LocalPlayer.Character.CurrentStamina.Value/ game.Players.LocalPlayer.Character.MaxStamina.Value) * 100 task.wait()
							until StamPercent <= LowStam or buysupplement == false or detectnofood == false or shared.AllowSprinting == false
							if StamPercent <= ministam or shared.AllowSprinting == false or buysupplement == false or detectnofood == false  then
								actionscript.stopSprint()
							end
							isrunning = false
						elseif isrunning == true and shared.AllowSprinting == false then
							actionscript.stopSprint()
							isrunning = false
						end
					end)
				end

				shared.AllowSprinting = false
			end)

        local plr = game.Players.LocalPlayer
        local char = plr.Character or plr.CharacterAdded:Wait()
        local hum = char:WaitForChild("Humanoid")
        local PFS = game:GetService("PathfindingService")
        local HRP = char:WaitForChild("HumanoidRootPart")
    
        local targetPosition = position or point.Position
    
        local currentPath
        local ran = pcall(function()
            currentPath = PFS:CreatePath({
                AgentRadius = 2,
                AgentHeight = 5,
                AgentCanJump = true,
                AgentJumpHeight = hum.JumpHeight,
                AgentMaxSlope = hum.MaxSlopeAngle,
                WaypointSpacing = 4
            })
            currentPath:ComputeAsync(HRP.Position, targetPosition)
        end)
    
        if not ran or currentPath.Status ~= Enum.PathStatus.Success then
            return false
        end
    
        _G.OngoingPath = true
    
        task.spawn(function()
            while _G.OngoingPath and task.wait() and (detectnofood or buysupplement) do
                pcall(function()
                    if (HRP.Position - _G.currentPoint).Magnitude > 5 then
                        hum:MoveTo(_G.currentPoint)
                    end
                end)
            end
        end)
    
        local lastbroken, LBinit, NotMoving = false, false, false
        local oldhumanpos, lastupdate = nil, nil
        local jumpDebounce = false
        local useOldMethod, TimesBroken, verifiedMoving = false, 0, false
    
        for _, v in pairs(currentPath:GetWaypoints()) do
            if not _G.OngoingPath then
                return false
            end
    
            if v.Action == Enum.PathWaypointAction.Jump and not jumpDebounce then
                jumpDebounce = true
                task.spawn(function()
                    hum:ChangeState(Enum.HumanoidStateType.Jumping)
                    task.wait(0.7)
                    jumpDebounce = false
                end)
            end
    
            local part = Instance.new("Part")
            part.Shape = "Ball"
            part.Material = "Neon"
            part.Size = Vector3.new(0.6, 0.6, 0.6)
            part.Position = v.Position + Vector3.new(0, 6, 0)
            part.Anchored = true
            part.CanCollide = false
            part.Parent = game.Workspace
    
            local oldpos = HRP.Position
            local updatedelay = false
    
            if lastupdate == nil then
                lastupdate = tick()
            else
                if (tick() - lastupdate) >= 2 then
                    lastupdate = tick()
                    oldhumanpos = HRP.Position
                end
            end
    
            if NotMoving and lastbroken and TimesBroken >= 3 then
                useOldMethod = true
            end
    
            if useOldMethod then
                if not (detectnofood or buysupplement) then
                    game.Debris:AddItem(part, 0.01)
                    return
                end
                shared.AllowSprinting = true
                useOldMethod = true
                hum:MoveTo(v.Position)
                hum.MoveToFinished:Wait()
                game.Debris:AddItem(part, 0.01)
            else
                repeat
                    task.wait()
                    if not (detectnofood or buysupplement) then
                        game.Debris:AddItem(part, 0.01)
                        return
                    end
                    _G.currentPoint = v.Position
                    if verifiedMoving then
                        shared.AllowSprinting = true
                    end
    
                    if
                        (HRP.Position - v.Position).Magnitude > 5
                        and (HRP.Position - part.Position).Magnitude > 4
                    then
                        if oldpos ~= HRP.Position and not lastbroken and not updatedelay then
                            task.spawn(function()
                                updatedelay = true
                                oldpos = HRP.Position
                                task.delay(1, function()
                                    updatedelay = false
                                end)
                            end)
                        elseif oldpos == HRP.Position and not lastbroken then
                            oldpos = HRP.Position
                            lastbroken = true
                            verifiedMoving = false
                            NotMoving = true
                            break
                        elseif oldpos == HRP.Position and lastbroken and not LBinit then
                            LBinit = true
                            task.spawn(function()
                                shared.AllowSprinting = false
                                task.wait(1)
                                if oldpos == HRP.Position and not jumpDebounce then
                                    if TimesBroken <= 0 then
                                        jumpDebounce = true
                                        task.spawn(function()
                                            hum:ChangeState(Enum.HumanoidStateType.Jumping)
                                            task.wait(0.7)
                                            jumpDebounce = false
                                        end)
                                    end
                                end
    
                                oldpos = HRP.Position
                                lastbroken = false
                                LBinit = false
                                TimesBroken = TimesBroken + 1
                            end)
                        end
                    elseif oldhumanpos ~= nil then
                        if (HRP.Position - oldhumanpos).Magnitude <= 0.05 and not jumpDebounce then
                            jumpDebounce = true
                            task.spawn(function()
                                hum:ChangeState(Enum.HumanoidStateType.Jumping)
                                task.wait(0.7)
                                jumpDebounce = false
                            end)
                            oldhumanpos = nil
                            NotMoving = true
                            break
                        end
                    end
                    if (HRP.Position - oldpos).Magnitude > 1 then
                        verifiedMoving = true
                    end
                until position and (HRP.Position - position).Magnitude < 5 or (HRP.Position - v.Position).Magnitude < PointRangeTilNext or (HRP.Position - part.Position).Magnitude < 5 or _G.OngoingPath ~= true or not (detectnofood or buysupplement)
                game.Debris:AddItem(part, 0.01)
            end
        end
    
        _G.OngoingPath = false
        return true
    end
    
    function ASworkaround()
        local newSequence
    
        for _, v in pairs(AutoSleepPaths) do
            local InsidePos = v["Sequence"][1]
            local MinimumDist = v["IsInsideDist"]
            local IsCorrectPlace = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - InsidePos.Position).Magnitude
                <= MinimumDist
    
            if IsCorrectPlace then
                newSequence = v["Sequence"]
                break
            end
        end
    
        if not newSequence then
            print("No valid sequence found for ASworkaround.")
            return false
        end
    
        autosleepwalk = true
    
        for i, v in pairs(newSequence) do
            local result = sleepWalk(v.Position)
            if result ~= true then
                print("Failed at step ", i)
                autosleepwalk = false
                return false
            else
                print("Completed Step ", i)
            end
        end
    
        print("ASworkaround completed successfully.")
        return true
    end

    function moveToPoint(targetPosition)
        local Humanoid = player.Character:WaitForChild("Humanoid")
        local HumanoidRootPart = player.Character:WaitForChild("HumanoidRootPart")
        local path = PFS:CreatePath({
                AgentRadius = 2,
                AgentHeight = 5,
                AgentCanJump = true,
                AgentJumpHeight = Humanoid.JumpHeight,
                AgentMaxSlope = Humanoid.MaxSlopeAngle,
                WaypointSpacing = 4
            })
    
        path:ComputeAsync(HumanoidRootPart.Position, targetPosition)
    
        if path.Status == Enum.PathStatus.Success then
            for _, waypoint in pairs(path:GetWaypoints()) do
                if waypoint.Action == Enum.PathWaypointAction.Jump then
                    task.wait()
                    Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                end
    
                local waypointPart = Instance.new("Part")
                waypointPart.Shape = Enum.PartType.Ball
                waypointPart.Material = Enum.Material.Neon
                waypointPart.Size = Vector3.new(0.6, 0.6, 0.6)
                waypointPart.Position = waypoint.Position
                waypointPart.Transparency = 1
                waypointPart.Anchored = true
                waypointPart.CanCollide = false
                waypointPart.Parent = Folder
                Humanoid:MoveTo(waypoint.Position)

                local finished = Humanoid.MoveToFinished:Wait()
    
                if not finished then
                    print("MoveTo failed. Aborting...")
                    waypointPart:Destroy()
                    break
                end
    
                waypointPart:Destroy()
            end
        else
            warn("Pathfinding failed: " .. path.Status.Name)
        end
    end
    
    function BSworkaround()
        local newSequence
    
        for _, v in pairs(AutoSleepPaths) do
            local InsidePos = v["Sequence"][1]
            local MinimumDist = v["IsInsideDist"]
            local IsCorrectPlace = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - InsidePos.Position).Magnitude
                <= MinimumDist
    
            if IsCorrectPlace then
                newSequence = v["Sequence"]
                break
            end
        end
    
        if not newSequence then
            print("No valid sequence found for ASworkaround.")
            return false
        end
    
        detectnofood = true
    
        for i, v in pairs(newSequence) do
            local result = sleepWalk(v.Position)
            if result ~= true then
                print("Failed at step ", i)
                detectnofood = false
                return false
            else
                print("Completed Step ", i)
            end
        end
    
        print("ASworkaround completed successfully.")
        return true
    end

    function maintenancechecks()
        if GoingForSupp or GoingForFood then
            task.wait()
        else 
            local Fatigue = tonumber(game:GetService("Players").LocalPlayer.PlayerGui.MainGui.Utility.BodyFatigue.Text:split(" ")[3]:split("%")[1])
            local movedBackToOriginalPos = false
            local actionscript = getsenv(game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("LocalS"))
    
            if AutoStop then
                local Fatigue = tonumber(game:GetService("Players").LocalPlayer.PlayerGui.MainGui.Utility.BodyFatigue.Text:split(" ")[3]:split("%")[1])
                if Fatigue >= FatigueToStop then
                    disableAllTraining()
                    if macroruin then
                        webhook("Macro Notifier", "Max Fatigue Reached!")
                    end
        
                    if LogOnFatigued then
                        if macroruin then
                            webhook("Macro Notifier", "Logging. Fatigue full")
                            task.wait(3)
                        end
        
                        repeat
                            task.wait()
                        until not game.Players.LocalPlayer.PlayerGui.MainGui.Utility.CombatTag.Visible
                        game:shutdown()
                        return
                    elseif autosleepRes or autosleepLog then
                        autosleepwalk = true
                        local GUI = game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("TreadmillMachineGUI") or game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("BarbellMachineGUI") or game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("SquatMachineGUI")
        
                        if game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool") then
                            game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
                        end
        
                        if GUI then
                            task.spawn(function()
                                if getconnections then
                                SimulateClick(GUI.Frame.Close, "Function")
                                else
                                press(GUI.Frame.Close)
                                end
                            end)
                            task.wait(1)
                        end
        
                        local sleepWalkBack = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
        
                        if macroruin then
                            webhook("Auto Sleep", "Starting Pathfinding to a bed")
                            task.wait()
                        end
        
                        _G.currentPoint = nil
                        _G.OngoingPath = false
    
                        local UnoccupiedBed = GetBed()
    
                        function fallbackAndRetry()
                            local fallbackPosition = CFrame.new(-780, 47, -300)
                            sleepWalk(fallbackPosition)
                            return GetBed()
                        end
                    
                        local UnoccupiedBed = GetBed()
                    
                        while not (UnoccupiedBed and UnoccupiedBed:FindFirstChild("Matress")) do
                            UnoccupiedBed = fallbackAndRetry()
                        end
                    
                        local Mattress = UnoccupiedBed.Matress
                        local PlayerPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
                        local IsCloseEnough = (Mattress.Position - PlayerPosition).Magnitude <= (UnoccupiedBed.ClickDetector.MaxActivationDistance or 0)
                    
                        if not IsCloseEnough then
                            local sleepResult = sleepWalk(Mattress.CFrame)
                    
                            if sleepResult ~= true then
                                local workaroundResult = ASworkaround()
                    
                                if workaroundResult ~= true then
                                    UnoccupiedBed = fallbackAndRetry()
                    
                                    if UnoccupiedBed and UnoccupiedBed:FindFirstChild("Matress") then
                                        sleepResult = sleepWalk(UnoccupiedBed.Matress.CFrame)
                                    end
                    
                                    if sleepResult ~= true then
                                        return webhook("Auto Sleep", "Sleep walk workaround was unsuccessful")
                                    end
                                else
                                    UnoccupiedBed = GetBed()
                    
                                    if UnoccupiedBed and UnoccupiedBed:FindFirstChild("Matress") then
                                        sleepResult = sleepWalk(UnoccupiedBed.Matress.CFrame)
                                    end
                    
                                    if sleepResult ~= true then
                                        return webhook("Auto Sleep", "Sleep walk workaround was unsuccessful")
                                    end
                                end
                            end
                        end
    
                        autosleepwalk = false
        
                        repeat task.wait()
                            if UnoccupiedBed then
                            if UnoccupiedBed:FindFirstChild("OccupiedBy") == nil then
                                fireclickdetector(UnoccupiedBed.ClickDetector)
                                task.wait(1)
                                if UnoccupiedBed:FindFirstChild("OccupiedBy") then
                                    if UnoccupiedBed:FindFirstChild("OccupiedBy").Value == game.Players.LocalPlayer.Character then
                                        break
                                    end
                                end
                            else
                                if UnoccupiedBed.OccupiedBy.Value ~= game.Players.LocalPlayer.Character then
                                    UnoccupiedBed = GetBed()
                                else
                                    break
                                end
        
                                local sleepResult = sleepWalk(UnoccupiedBed:FindFirstChild("Blanket").CFrame)
        
                                if sleepResult ~= true then
                                    return webhook("Auto Sleep", "Sleep walk was unsuccessful")
                                end
                            end
                        end
                        until IsSleeping()
        
                        if macroruin then
                            webhook("Auto Sleep", "Successfully reached bed, sleeping fatigue off")
                            task.wait()
                        end
        
                        repeat
                            local Fatigue = tonumber(game.Players.LocalPlayer.PlayerGui.MainGui.Utility.BodyFatigue.Text:split(" ")[3]:split("%")[1])
                            task.wait()
                        until Fatigue <= 0
        
                        if autosleepLog then
                            if macroruin then
                                webhook("Auto Sleep", "Logging. Fatigue 0%")
                                task.wait(3)
                            end
        
                            repeat task.wait() until not game.Players.LocalPlayer.PlayerGui.MainGui.Utility.CombatTag.Visible
                            game:shutdown()
                            return
                        elseif autosleepRes then
                            fireclickdetector(UnoccupiedBed.ClickDetector)
                            task.wait(1)
        
                            autosleepwalk = true
        
                            if macroruin then
                                webhook("Auto Sleep", "0% Fatigue! heading towards last spot")
                            end
        
                            if not UnoccupiedBed.Parent.Name:find("Apartment") then
                                local trainWalk = sleepWalk(sleepWalkBack)
        
                                if trainWalk ~= true then
                                    autosleepwalk = false
                                    return webhook("Auto Sleep", "Pathfinding after sleeping was unsuccessful")
                                end
        
                                local distancefromSpot = (sleepWalkBack.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
        
                                if distancefromSpot <= 1 then
                                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(sleepWalkBack.Position)
                                    task.wait(0.3)
                                    game:GetService("TweenService"):Create(game.Players.LocalPlayer.Character.HumanoidRootPart, TweenInfo.new(0.3), { ["CFrame"] = sleepWalkBack }):Play()
                                    task.wait(0.3)
                                elseif distancefromSpot <= 10 and distancefromSpot > 1 then
                                    game.Players.LocalPlayer.Character.Humanoid:MoveTo(sleepWalkBack.Position)
                                    game.Players.LocalPlayer.Character.Humanoid.MoveToFinished:Wait()
                                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(sleepWalkBack.Position)
                                    task.wait(0.3)
                                    game:GetService("TweenService"):Create(game.Players.LocalPlayer.Character.HumanoidRootPart, TweenInfo.new(0.3), { ["CFrame"] = sleepWalkBack }):Play()
                                    task.wait(0.3)
                                end
                            end
        
                            autosleepwalk = false
                            restoreTraining()
                            --task.wait(0.3)
                            --game:GetService("TweenService"):Create(game.Players.LocalPlayer.Character.HumanoidRootPart, TweenInfo.new(0.3), { ["CFrame"] = sleepWalkBack }):Play()
                            if macroruin then
                                webhook("Macro Notifier", "Successfully resumed training after sleeping")
                            end
                        end
                    end
                end
            end
    
            if LogOnNotEnoughMoney and machines then
                local Money = tonumber(game:GetService("Players").LocalPlayer.PlayerGui.MainGui.Utility.Money.Text:split("$")[2])
    
                if Money ~= nil then
                    if Money < 65 then
                        if macroruin then
                            webhook("Macro Notifier", "Not Enough Money to Continue Machines")
                            task.wait(3)
                        end
    
                        repeat task.wait()
                        until game.Players.LocalPlayer.PlayerGui.MainGui.Utility.CombatTag.Visible == false
                        game:shutdown()
                    end
                end
            end
    
            if autoeat then
                local hungerpercent = (game:GetService("Players").LocalPlayer.PlayerGui.MainGui.Utility.StomachBar.BarF.Bar.AbsoluteSize.X / game:GetService("Players").LocalPlayer.PlayerGui.MainGui.Utility.StomachBar.BarF.AbsoluteSize.X) * 100
                local foodfound = false
            
                if hungerpercent <= EatAt then
                    for i, v in pairs(MOfoods) do
                        local food = game.Players.LocalPlayer.Backpack:FindFirstChild(v) or game.Players.LocalPlayer.Character:FindFirstChild(v)
            
                        if food then
                            foodfound = true
                            function AutoEat()
                                if stopAEinCombat and game.Players.LocalPlayer.PlayerGui.MainGui.Utility.CombatTag.Visible then
                                    return
                                end
            
                                while hungerpercent < FillUp and autoeat do
                                    hungerpercent = (game:GetService("Players").LocalPlayer.PlayerGui.MainGui.Utility.StomachBar.BarF.Bar.AbsoluteSize.X / game:GetService("Players").LocalPlayer.PlayerGui.MainGui.Utility.StomachBar.BarF.AbsoluteSize.X) * 100
                                    food = game.Players.LocalPlayer.Backpack:FindFirstChild(v) or game.Players.LocalPlayer.Character:FindFirstChild(v)
                                    if not food then
                                        break
                                    end
            
                                    if food.Parent ~= game.Players.LocalPlayer.Character then
                                        game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
                                        task.wait(0.1)
                                        game.Players.LocalPlayer.Character.Humanoid:EquipTool(food)
                                        task.wait(0.1)
                                    end
            
                                    food:Activate()
                                    task.wait(3) 
                                end
            
                                game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
                            end
            
                            if hungerpercent < FillUp and autoeat then
                                AutoEat()
                            end
                            break
                        end
                    end
            
                    if not foodfound then
                        if NoFoodNotify then
                            webhook("Macro Notifier", "You ran out of food.")
                            disableAllTraining()
                        end
            
                        if LogOnNoFood then
                            if NoFoodNotify then
                                webhook("No Food Notifier", "You ran out of food. Logging.")
                                task.wait(3)
                            end
            
                            repeat task.wait()
                            until not game.Players.LocalPlayer.PlayerGui.MainGui.Utility.CombatTag.Visible
                            game:shutdown()
                        end
                    end
                end
            end
            
            if autosupplement then
                for supplement, isSelected in pairs(selectedsupplement) do
                    if isSelected then
                        if game:GetService("Players").LocalPlayer.PlayerGui.MainGui.Utility.VisualFrame:FindFirstChild(supplement) == nil and game.Players.LocalPlayer.Backpack:FindFirstChild(supplement) then
                            local oldQuantity = nil
                            game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
                            task.wait(0.1)
                            game.Players.LocalPlayer.Character.Humanoid:EquipTool(game.Players.LocalPlayer.Backpack:FindFirstChild(supplement))
                            task.wait(0.1)
                            oldQuantity = game.Players.LocalPlayer.Character:FindFirstChild(supplement).Quantity.Value
                            game.Players.LocalPlayer.Character:FindFirstChild(supplement):Activate()
                            task.wait(0.1)
                            repeat
                                local took = false
                                if game.Players.LocalPlayer.Character:FindFirstChild(supplement) == nil then
                                    took = true
                                else
                                    if game.Players.LocalPlayer.Character:FindFirstChild(supplement).Quantity.Value ~= oldQuantity then
                                        took = true
                                    end
                                end
                                task.wait()
                            until took == true
                            game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
                            task.wait(0.1)
                        end
                    end
                end
            end
    
            if autosupplement2 then
                pcall(function()
                    for supplement, isSelected in pairs(selectedsupplement) do
                        if isSelected then
                            if game:GetService("Players").LocalPlayer.PlayerGui.MainGui.Utility.VisualFrame:FindFirstChild(supplement) == nil 
                                and game.Players.LocalPlayer.Backpack:FindFirstChild(supplement) then
                                game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
                                task.wait(0.1)
                                game.Players.LocalPlayer.Character.Humanoid:EquipTool(game.Players.LocalPlayer.Backpack:FindFirstChild(supplement))
                                task.wait(0.1)
                                local oldQuantity = game.Players.LocalPlayer.Character:FindFirstChild(supplement).Quantity.Value
                                repeat
                                    local took = false
                                    if game.Players.LocalPlayer.Character:FindFirstChild(supplement) == nil 
                                        or game.Players.LocalPlayer.Character:FindFirstChild(supplement).Quantity.Value ~= oldQuantity - DrinkAmm then
                                        game.Players.LocalPlayer.Character:FindFirstChild(supplement):Activate()
                                    end
                                    if game.Players.LocalPlayer.Character:FindFirstChild(supplement) == nil 
                                        or game.Players.LocalPlayer.Character:FindFirstChild(supplement).Quantity.Value == oldQuantity - DrinkAmm then
                                        took = true
                                    end
                                    task.wait()
                                until took == true
                                game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
                                task.wait(0.1)
                            end
                        end
                    end
                end)
            end
    
            if buysupplement then task.wait()
                if GoingForFood or autosleepwalk then task.wait() end
            
                for supplement, isSelected in pairs(selectedsupplement) do
                    if isSelected then
                        if not game:GetService("Players").LocalPlayer.PlayerGui.MainGui.Utility.VisualFrame:FindFirstChild(supplement) and not game.Players.LocalPlayer.Backpack:FindFirstChild(supplement) and not game.Players.LocalPlayer.Character:FindFirstChild(supplement) then
                            NoSupplement = true
                        else
                            NoSupplement = false
                        end
                    end
                end
            
                local Fatigue = tonumber(game:GetService("Players").LocalPlayer.PlayerGui.MainGui.Utility.BodyFatigue.Text:split(" ")[3]:split("%")[1])
                if Fatigue < FatigueToStop and NoSupplement then
                    GoingForSupp = true
                    local movedBackToOriginalPos = false
                    local actionscript = getsenv(game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("LocalS"))
                    local OriginalPos = character.PrimaryPart.Position
                    local lookAtRotation = character.PrimaryPart.CFrame
                    disableAllTraining()
                    task.wait(0.3)
                    game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
            
                    for supplement, isSelected in pairs(selectedsupplement) do
                        if isSelected then
                            for _, v in pairs(SupplementTable) do
                                if v.Name:find(supplement) then
                                    moveToBoth(v.Head, v.Head.Position)
                                    for i = 1, suppammount do
                                        if not buysupplement then break end
                                        actionscript.stopSprint()
                                        fireclickdetector(v.ClickDetector)
                                        task.wait(1.1)
                                    end
                                end
                            end
                        end
                    end
                    moveToBoth(nil, OriginalPos)
                    GoingForSupp = false
                    restoreTraining()
                    actionscript.stopSprint()
                    task.wait(0.4)
                    game:GetService("TweenService"):Create(game.Players.LocalPlayer.Character.HumanoidRootPart, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), { CFrame = CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.Position, game.Players.LocalPlayer.Character.HumanoidRootPart.Position + lookAtRotation.LookVector) }):Play()
                end
            end
            
            if detectnofood then task.wait()
                if autosleepwalk or GoingForSupp then task.wait() end
            
                for _, v in pairs(MOfoods) do
                    local food = game.Players.LocalPlayer.Backpack:FindFirstChild(v) or game.Players.LocalPlayer.Character:FindFirstChild(v)
                    if food then
                        foodAvailable = true
                        break
                    else
                        foodAvailable = false
                    end
                end
            
                local Fatigue = tonumber(game:GetService("Players").LocalPlayer.PlayerGui.MainGui.Utility.BodyFatigue.Text:split(" ")[3]:split("%")[1])
                if Fatigue < FatigueToStop and not foodAvailable then
                    local movedBackToOriginalPos = false
                    local actionscript = getsenv(game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("LocalS"))
                    GoingForFood = true
                    local lookAtRotation = character.PrimaryPart.CFrame
                    disableAllTraining()
                    task.wait(0.5)
                    game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
            
                    local closestFood, closestDistance = nil, math.huge
                    local OriginalPos = character.PrimaryPart.Position
            
                    moveToBoth(nil, selectedposition)
            
                    for _, v in pairs(ItemTable) do
                        local distance = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.Head.Position).Magnitude
                        if distance < closestDistance then
                            closestDistance = distance
                            closestFood = v
                        end
                    end
            
                    if closestFood then
                        moveToBoth(closestFood.Head, closestFood.Head.Position)
                        local foodsnear = {}
            
                        for _, v in pairs(ItemTable) do
                            local distance = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.Head.Position).Magnitude
                            if distance <= 120 then
                                table.insert(foodsnear, v)
                            end
                        end
            
                        for _, v in pairs(foodsnear) do
                            for _ = 1, buyammount do
                                actionscript.stopSprint()
                                fireclickdetector(v.ClickDetector)
                                task.wait(1.1)
                            end
                        end
            
                        moveToBoth(nil, OriginalPos)
                        GoingForFood = false
                        restoreTraining()
                        actionscript.stopSprint()
                        task.wait(0.4)
                        game:GetService("TweenService"):Create(game.Players.LocalPlayer.Character.HumanoidRootPart, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), { CFrame = CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.Position, game.Players.LocalPlayer.Character.HumanoidRootPart.Position + lookAtRotation.LookVector) }):Play()
                    end
                end
            end

        end
    end
    
    function automacrosprint()
        if CurrentRegening then
            shared.AllowSprinting = false
            VIM:SendKeyEvent(true, "W", false, game)
            task.wait(0.5)
        else
            shared.AllowSprinting = true
            VIM:SendKeyEvent(true, "W", false, game)
            task.wait(0.5)
        end
    end

    function panicdash()
        if not panicdashdebounce then
            panicdashdebounce = true
            local haha = { "W", "A", "S", "D" }
            local randomdirection = haha[math.random(1, #haha)]

            VIM:SendKeyEvent(false, "W", false, game)
            task.wait()
            VIM:SendKeyEvent(true, randomdirection, false, game)
            task.wait(0.02)
            VIM:SendKeyEvent(true, "Q", false, game)
            task.wait()
            VIM:SendKeyEvent(false, "Q", false, game)
            task.wait(0.02)
            VIM:SendKeyEvent(false, randomdirection, false, game)
            task.wait()
            VIM:SendKeyEvent(true, "W", false, game)
            task.wait()
            task.delay(panicdashdelay, function()
                panicdashdebounce = false
            end)
            if CurrentRegening == false then
                automacrosprint()
            end
        end
    end

    function StaminaCheck(lowstam, stamto)
        if lowstam == nil then
            lowstam = ministam
        end
        function GetStamina()
            return (game.Players.LocalPlayer.Character.CurrentStamina.Value/ game.Players.LocalPlayer.Character.MaxStamina.Value) * 100
        end

        function LowStamina()
            if stamto == nil then
                if regenstamina then
                    stamto = regentoamt
                else
                    stamto = ministam
                end
            end

            if CurrentRegening == false then
                task.spawn(function()
                    repeat
                        task.wait()
                        CurrentRegening = true
                    until GetStamina() >= stamto
                    CurrentRegening = false
                end)
            end
        end

        if GetStamina() <= lowstam and CurrentRegening == false then
            LowStamina()
        end
    end

    function panicstamcheck()
        function GetStamina()
            return (game.Players.LocalPlayer.Character.CurrentStamina.Value/ game.Players.LocalPlayer.Character.MaxStamina.Value) * 100
        end

        function LowStamina()
            if CurrentRegening == false then
                task.spawn(function()
                    repeat
                        task.wait()
                        shared.AllowSprinting = false
                        CurrentRegening = true
                    until GetStamina() >= regentoamt
                    CurrentRegening = false
                end)
            end
        end

        if GetStamina() <= ministam then
            LowStamina()
        end
    end

    local ESPObjects = {}

    function removeESP(plrobj)
        if ESPObjects[plrobj] then
            if ESPObjects[plrobj].NameLabel then ESPObjects[plrobj].NameLabel:Remove() end
            if ESPObjects[plrobj].HPLabel then ESPObjects[plrobj].HPLabel:Remove() end
            if ESPObjects[plrobj].StyleLabel then ESPObjects[plrobj].StyleLabel:Remove() end
            if ESPObjects[plrobj].Highlight then ESPObjects[plrobj].Highlight:Destroy() end
            ESPObjects[plrobj] = nil
        end
    end
    
    function esp(plrobj)
        if plrobj == game.Players.LocalPlayer or ESP == false then
            return
        end

        removeESP(plrobj)
    
        local NameLabel = Drawing.new("Text")
        NameLabel.Visible = false
        NameLabel.Center = true
        NameLabel.Outline = true
        NameLabel.Font = 1
        NameLabel.Color = Color3.fromRGB(0, 255, 0)
        NameLabel.Size = 14
    
        local HPLabel = Drawing.new("Text")
        HPLabel.Visible = false
        HPLabel.Center = true
        HPLabel.Outline = true
        HPLabel.Font = 1
        HPLabel.Color = Color3.fromRGB(255, 0, 0)
        HPLabel.Size = 14
    
        local StyleLabel = Drawing.new("Text")
        StyleLabel.Visible = false
        StyleLabel.Center = true
        StyleLabel.Outline = true
        StyleLabel.Font = 1
        StyleLabel.Color = Color3.fromRGB(255, 255, 255)
        StyleLabel.Size = 14
    
        local style
    
        function FindStyle()
            pcall(function()
                local tool = plrobj.Character:FindFirstChildOfClass("Tool")
                if tool and tool:FindFirstChild("Style") then
                    style = tool.Name
                else
                    for _, v in pairs(plrobj.Backpack:GetChildren()) do
                        if v:FindFirstChild("Style") then
                            style = v.Name
                            return
                        end
                    end
                    style = "None"
                end
            end)
        end
    
        FindStyle()
    
        local highlight
        if highlightplayers then
            highlight = Instance.new("Highlight")
            highlight.Adornee = plrobj.Character
            highlight.FillColor = Color3.fromRGB(128, 0, 255)
            highlight.FillTransparency = 0.5
            highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
            highlight.OutlineTransparency = 0
            highlight.Parent = plrobj.Character
        end
    
        ESPObjects[plrobj] = {
            NameLabel = NameLabel,
            HPLabel = HPLabel,
            StyleLabel = StyleLabel,
            Highlight = highlight
        }
    
        local renderstepped
        renderstepped = rs.RenderStepped:Connect(function()
            pcall(function()
                local distance = (plrobj.Character.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
    
                if not plrobj.Character or not plrobj.Character:FindFirstChild("Head") or distance > ESPDistance or not game.Players:FindFirstChild(plrobj.Name) or ESP == false then
                    removeESP(plrobj)
                    renderstepped:Disconnect()
                    return
                end
    
                local plr_pos, plr_onscreen = camera:WorldToViewportPoint(plrobj.Character.Head.Position)
    
                if plr_onscreen then
                    local ToolEquipped = plrobj.Character:FindFirstChildOfClass("Tool") or { Name = "nil" }
    
                    NameLabel.Position = Vector2.new(plr_pos.X, plr_pos.Y - 50)
                    NameLabel.Text = "[" .. plrobj.Name .. "][" .. round(distance) .. "]"
                    NameLabel.Visible = true
    
                    HPLabel.Position = Vector2.new(plr_pos.X, plr_pos.Y - 35)
                    HPLabel.Text = "[" .. round((plrobj.Character.Humanoid.Health / plrobj.Character.Humanoid.MaxHealth) * 100) .. "% HP]"
                    HPLabel.Visible = true
    
                    StyleLabel.Position = Vector2.new(plr_pos.X, plr_pos.Y - 20)
                    StyleLabel.Text = "[" .. style .. "][" .. ToolEquipped.Name .. "]"
                    StyleLabel.Visible = true
                else
                    NameLabel.Visible = false
                    HPLabel.Visible = false
                    StyleLabel.Visible = false
                end
            end)
        end)
    end

    function Candyesp()
        for i, v in pairs(workspace.Event:GetDescendants()) do
            if v:IsA("MeshPart") and v.Parent.Name == "" and v.Parent:IsA("Model") and v.Parent:FindFirstChildOfClass("ClickDetector") and not v.Parent:FindFirstChildOfClass("Humanoid") then
                local NameLabel = Drawing.new("Text")
                NameLabel.Visible = false
                NameLabel.Center = true
                NameLabel.Outline = true
                NameLabel.Font = 1
                NameLabel.Color = Color3.fromRGB(255, 99, 71)
                NameLabel.Size = 14
    
                local renderstepped
                renderstepped = game:GetService("RunService").RenderStepped:Connect(function()
                    pcall(function()
                        if not espToggles[v] then
                            NameLabel:Remove()
                            renderstepped:Disconnect()
                            return
                        end
    
                        local camera = game.Workspace.CurrentCamera
                        local distance = (v.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
    
                        if not v or not v.Parent or distance > ESPDistance then
                            NameLabel:Remove()
                            renderstepped:Disconnect()
                            espToggles[v] = nil
                            return
                        end
    
                        local obj_pos, obj_onscreen = camera:WorldToViewportPoint(v.Position)
    
                        if obj_onscreen then
                            NameLabel.Position = Vector2.new(obj_pos.X, obj_pos.Y - 50)
                            NameLabel.Text = "[Halloween Candy][" .. math.floor(distance) .. "]"
                            NameLabel.Visible = true
                        else
                            NameLabel.Visible = false
                        end
                    end)
                end)
    
                espToggles[v] = {
                    label = NameLabel,
                    connection = renderstepped
                }
            end
        end
    end
    
    function RemoveAllESP()
        for _, espData in pairs(espToggles) do
            if espData.label then
                espData.label:Remove()
            end
            if espData.connection then
                espData.connection:Disconnect()
            end
        end
        espToggles = {}
    end
    
    function GetPunchingBag()
        local bestdistance, bag = nil, nil
        local baginstances = {
            workspace.Map["Bag Wrestling"],
            workspace.Map,
            workspace["Kung Fu Dojo"].Bag,
            workspace.Map.Model,
            workspace["Organisation Building"],
            workspace["Judo Dojo"].bags,
            workspace:GetChildren()[37],
            workspace,
        }
    
        for _, instance in pairs(baginstances) do
            for _, v in pairs(instance:GetChildren()) do
                if v.Name == "PunchingBag" or v:FindFirstChild("PunchingBag") then
                    if v:FindFirstChild("PunchingBag") then
                        v = v.PunchingBag
                    end
                    local distance = (v.bag.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                    if distance <= 10 and (not bestdistance or distance < bestdistance) then
                        bestdistance = distance
                        bag = v
                    end
                end
            end
        end
    
        return bag
    end
    
    function GetStyle()
        local tool = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool")
        if tool ~= nil then
            if tool:FindFirstChild("Style") then
                return tool
            end
        end

        for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
            if v:FindFirstChild("Style") then
                return v
            end
        end

        return nil
    end

    function GetClosestRoadwork()
        local rw, bestdistance = nil, nil

        for i, v in pairs(workspace.Map:GetChildren()) do
            if v.Name:find("Roadwork") then
                local Closest = 100
                local distance = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.Head.Position).Magnitude

                if distance <= Closest then
                    if rw and bestdistance then
                        if distance < bestdistance then
                            rw = v
                            bestdistance = distance
                        end
                    else
                        rw = v
                        bestdistance = distance
                    end
                end
            end
        end

        return rw
    end

    function GetDuraBuy()
        local bestdistance, durabuy = nil, nil
        local durainstances = {
            workspace.Map,
            workspace.kUREtRAINER,
        }
    
        for _, instance in pairs(durainstances) do
            for i, v in pairs(instance:GetChildren()) do
                if v.Name == "Durability Training: $140" then
                    local clickDetector = v:FindFirstChildOfClass("ClickDetector")
                    if clickDetector then
                        local distance = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.PrimaryPart.Position).Magnitude
                        local MaxActivationDist = clickDetector.MaxActivationDistance
    
                        if distance <= MaxActivationDist then
                            if bestdistance == nil or bestdistance > distance then
                                bestdistance = distance
                                durabuy = v
                            end
                        end
                    end
                end
            end
        end
    
        return durabuy
    end

    function duraturn(main, support)
        if not durability then return end
    
        function waitForHealth(character)
            repeat task.wait() until character.Humanoid.Health >= character.Humanoid.MaxHealth
            task.wait(0.5)
        end
    
        function equipTool(tool)
            if tool and tool.Parent ~= game.Players.LocalPlayer.Character then
                game.Players.LocalPlayer.Character.Humanoid:EquipTool(tool)
                task.wait(0.2)
            end
        end
    
        function activateTool(tool, waitTime)
            if tool.Parent == game.Players.LocalPlayer.Character then
                tool:Activate()
                task.wait(waitTime or 0.2)
            end
        end
    
        if main.Character.Humanoid.Health < main.Character.Humanoid.MaxHealth then
            waitForHealth(main.Character)
        end
    
        local distance = (main.Character.HumanoidRootPart.Position - support.Character.HumanoidRootPart.Position).Magnitude
        if not GetDuraBuy() and not SkillXP then return end
    
        if distance > 17 and distance <= 200 then
            repeat
                distance = (main.Character.HumanoidRootPart.Position - support.Character.HumanoidRootPart.Position).Magnitude
                task.wait()
            until distance <= 17
            task.wait(0.5)
        end
    
        local mychar = game.Players.LocalPlayer.Character
        if support.Character.Name == mychar.Name and durability then
            if not SkillXP then
                repeat task.wait() until main.Character:FindFirstChild("DuraTrain") or not durability
    
                local combatTool = GetStyle() or game.Players.LocalPlayer.Backpack:FindFirstChild(DuraTool)
                equipTool(combatTool)
    
                repeat
                    local healthpercent = (main.Character.Humanoid.Health / main.Character.Humanoid.MaxHealth) * 100
                    if healthpercent > stopAtHP and main.Character:FindFirstChild("DuraTrain") then
                        if RhythmToggle then ChargeRhythm(combatTool) end
                        activateTool(combatTool, 0.05)
                    end
                    task.wait()
                until healthpercent <= stopAtHP or not main.Character:FindFirstChild("DuraTrain")
    
                task.wait(0.1)
                game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
                task.wait(0.9)
            else
                repeat
                    local SkillTool, SkillHotbar = GetSkill()
                    local healthpercent = (main.Character.Humanoid.Health / main.Character.Humanoid.MaxHealth) * 100
    
                    if healthpercent > stopAtHP and SkillTool and SkillHotbar and not SkillHotbar.CD.Visible then
                        equipTool(SkillTool)
                        activateTool(SkillTool, 1)
                        repeat task.wait() until SkillHotbar.CD.Visible
                    end
                    task.wait()
                until healthpercent <= stopAtHP or not durability or not SkillXP
    
                task.wait(0.1)
                game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
                task.wait(0.9)
            end
        elseif main.Character.Name == mychar.Name and durability then
            if not SkillXP then
                local Dura = GetDuraBuy()
                local BeforeDuraDonePos = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
    
                if main.Character.Humanoid.Health < main.Character.Humanoid.MaxHealth then
                    waitForHealth(main.Character)
                end
    
                local durTool = game.Players.LocalPlayer.Backpack:FindFirstChild("Durability Training")
                if not durTool then
                    repeat
                        fireclickdetector(Dura.ClickDetector)
                        task.wait(1)
                    until game.Players.LocalPlayer.Backpack:FindFirstChild("Durability Training")
                    durTool = game.Players.LocalPlayer.Backpack:FindFirstChild("Durability Training")
                end
                equipTool(durTool)
                activateTool(durTool)
    
                repeat
                    local healthpercent = (game.Players.LocalPlayer.Character.Humanoid.Health / game.Players.LocalPlayer.Character.Humanoid.MaxHealth) * 100
                    if healthpercent <= stopAtHP then
                        activateTool(durTool, 1)
                    end
                    task.wait()
                until healthpercent <= stopAtHP or not durability
    
                task.wait(1)
                if AutoWalkAfterPushedBack then
                    local distance = (BeforeDuraDonePos - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                    if distance > 2 then
                        game.Players.LocalPlayer.Character.Humanoid:MoveTo(BeforeDuraDonePos)
                        game.Players.LocalPlayer.Character.Humanoid.MoveToFinished:Wait()
                    end
                end
            else
                repeat
                    local healthpercent = (game.Players.LocalPlayer.Character.Humanoid.Health / game.Players.LocalPlayer.Character.Humanoid.MaxHealth) * 100
                    task.wait()
                until healthpercent <= stopAtHP or not durability or not SkillXP
            end
        end
    end
    
    function GetSSBuy()
        local bestdistance, ss = nil, nil
        local ssinstances = {workspace.Map, workspace.kUREtRAINER}
        local player = game.Players.LocalPlayer
        local originalPosition = player.Character.HumanoidRootPart.Position
        for _, instance in ipairs(ssinstances) do
            for _, v in ipairs(instance:GetChildren()) do
                if v.Name:find("Strike Speed Training") or v:FindFirstChild("Strike Speed Training: $180") then
                    local target = v:FindFirstChild("Strike Speed Training: $180") or v
                    local distance = (player.Character.HumanoidRootPart.Position - target.Head.Position).Magnitude
                    local MaxActivationDist = target.ClickDetector.MaxActivationDistance

                    if distance <= MaxActivationDist then
                        if not bestdistance or bestdistance > distance then
                            bestdistance, ss = distance, target
                        end
                    elseif distance > MaxActivationDist then
                        if distance < buydistances then
                        moveto, ss = true, target
                        end
                    end
                end
            end
        end

        return ss
    end
    
    function updateCombo(v)
        if v.Name == "Attacking" then
            currentcombo = v.Value
        end
    end

    function manageCombatTool()
        local combatTool = GetStyle()

        if combatTool and combatTool.Parent ~= game.Players.LocalPlayer.Character then
            game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
            task.wait(0.3)
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(combatTool)
            task.wait(0.1)
        end
    end

    function handleStrikeSpeed(ssbuy, originalPosition)
        pcall(function()
        local strikeSpeedTool = player.Backpack:FindFirstChild("Strike Speed Training") or player.Character:FindFirstChild("Strike Speed Training")
        local ssbuy = GetSSBuy()
        local bagpos = GetPunchingBag()
        local OriginalPos = character.PrimaryPart.Position
        local actionscript = getsenv(game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("LocalS"))

        if not strikeSpeedTool then
            if moveto then
                donebuying = false
                actionscript.runPrompt()
                moveToPoint(ssbuy.Head.Position)
                task.wait()
                fireclickdetector(ssbuy.ClickDetector)
                task.wait()
                moveToPoint(OriginalPos)
                actionscript.stopSprint()
                maintenancechecks()
                maintenancechecks()
                local myVector = character.HumanoidRootPart.Position
                local bagPos = bagpos.bag.Position 
                if myVector and bagPos then
                    local distance = (myVector - bagPos).Magnitude
                    if distance > 2 then
                        local direction = (bagPos - myVector).Unit
                        if direction then
                            local targetPosition = myVector + direction * (distance - 3) 
                            character.Humanoid:MoveTo(targetPosition)
                            character.Humanoid.MoveToFinished:Wait()
                        end
                    end
                elseif distance < 1 then
                    local direction = (bagPos - myVector).Unit
                    if direction then
                        local targetPosition = myVector + direction * (distance + 2) 
                        character.Humanoid:MoveTo(targetPosition)
                        character.Humanoid.MoveToFinished:Wait()
                    end
                end
                task.wait(0.2)
                local targetPosition = bagpos.bag.Position
                local humanoidRootPart = game.Players.LocalPlayer.Character.HumanoidRootPart
                local lookAtRotation = CFrame.lookAt(humanoidRootPart.Position, Vector3.new(targetPosition.X, humanoidRootPart.Position.Y, targetPosition.Z))
                game:GetService("TweenService"):Create(humanoidRootPart,TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut),{ CFrame = CFrame.new(humanoidRootPart.Position, humanoidRootPart.Position + lookAtRotation.LookVector) }):Play()
                strikeSpeedTool = player.Backpack:FindFirstChild("Strike Speed Training")
                moveto, donebuying = false, true
                if strikeSpeedTool and donebuying then
                    player.Character.Humanoid:EquipTool(strikeSpeedTool)
                end
            else
                donebuying = false
                player.Character.Humanoid:UnequipTools()
                task.wait(0.1)
                fireclickdetector(ssbuy.ClickDetector)
                task.wait(0.5)
                strikeSpeedTool = player.Backpack:FindFirstChild("Strike Speed Training")
                if strikeSpeedTool then
                    maintenancechecks()
                    maintenancechecks()
                    player.Character.Humanoid:EquipTool(strikeSpeedTool)
                end
                donebuying = true
            end
        elseif strikeSpeedTool then
            repeat task.wait(0.5)
            player.Character.Humanoid:EquipTool(strikeSpeedTool)
            task.wait(0.3)
            strikeSpeedTool:Activate()
            until player.PlayerGui:FindFirstChild("SpeedTraining")
        end
    
        task.wait(0.2)
        repeat
            task.wait(0.5)
            if not player.PlayerGui:FindFirstChild("SpeedTraining") and player.Character:FindFirstChild("Strike Speed Training") and donebuying then
                strikeSpeedTool:Activate()
            elseif not player.PlayerGui:FindFirstChild("SpeedTraining") and player.Backpack:FindFirstChild("Strike Speed Training") and donebuying then
                player.Character.Humanoid:EquipTool(strikeSpeedTool)
                task.wait(0.3)
                strikeSpeedTool:Activate()
            end
        until player.PlayerGui:FindFirstChild("SpeedTraining")
        end)
    end

    function combatLoop()
        while strikespeed do task.wait()
            local bag = GetPunchingBag()
            local ssbuy = GetSSBuy()
            local combatTool = GetStyle()

            if bag and ssbuy then
                if game.Players.LocalPlayer.PlayerGui:FindFirstChild("SpeedTraining") == nil then
                    handleStrikeSpeed(ssbuy, game.Players.LocalPlayer.Character.HumanoidRootPart.Position)
                end
            end
            manageCombatTool()

            local m2nextturn = false
            repeat
                if RhythmToggle then
                    ChargeRhythm(combatTool)
                end

                if game.Players.LocalPlayer.PlayerGui.SpeedTraining then
                    if game.Players.LocalPlayer.PlayerGui.SpeedTraining.CanHit.Value and combatTool.Parent == game.Players.LocalPlayer.Character then
                        if not m2nextturn then
                            repeat
                                combatTool:Activate()
                                task.wait(m1speedslider)
                            until game.Players.LocalPlayer.PlayerGui.SpeedTraining.CanHit.Value == false or combatTool.Parent == game.Players.LocalPlayer.Backpack
                        else
                            if ssuseM2 then
                                repeat
                                    local successm2 = currentcombo == 5
                                    if successm2 then break end
                                    local VIM = game:GetService("VirtualInputManager")
                                    VIM:SendMouseButtonEvent(0, 500, 1, true, game, 1)
                                    task.wait(0.1)
                                    VIM:SendMouseButtonEvent(0, 500, 1, false, game, 1)
                                    task.wait(0.5)
                                until successm2 or combatTool.Parent == game.Players.LocalPlayer.Backpack
                            end
                            m2nextturn = false
                        end

                        local Jaja = tick()
                        repeat
                            task.wait()
                            if currentcombo == 4 and ssuseM2 then
                                m2nextturn = true
                            end
                        until not game.Players.LocalPlayer.PlayerGui.SpeedTraining.CanHit.Value or (tick() - Jaja) >= 0.5

                        if currentcombo == 4 and not m2nextturn and ssuseM2 then
                            m2nextturn = true
                        end
                    end
                    task.wait()
                end
            until not game.Players.LocalPlayer.PlayerGui:FindFirstChild("SpeedTraining") or not strikespeed
        end
    end
    
    function debuffCheck()
        if game.Players.LocalPlayer.Character.Ragdolled.Value == true then
            return false
        end

        return true
    end


    -- TOGGLES ETC

    Trainingleft:Header({Text = "Auto Train"})  
    Trainingleft:Label({Text = "Pushup/Squat Lowest Stam Is 15"})  

    Trainingleft:Toggle({
        Name = "Auto Train",
        Default = false,
        Callback = function(Value)
            autotrain = Value

            while autotrain and task.wait() do
                StaminaCheck()
                maintenancechecks()
                pcall(function()
                    if traintype ~= nil and trainspeed ~= nil then
                        if traintype ~= "Stamina" then
                            if game.Players.LocalPlayer.Character:FindFirstChild(traintype) and not CurrentRegening then
                                if trainspeed == "Slow" and not isrunning and debuffCheck() then
                                    local oldFatigue = tonumber(game.Players.LocalPlayer.PlayerGui.MainGui.Utility.BodyFatigue.Text:split(" ")[3]:split("%")[1])
                                    game.Players.LocalPlayer.Character[traintype]:Activate()
                                    local curtime = tick()
                                    repeat task.wait()
                                    until tonumber(game.Players.LocalPlayer.PlayerGui.MainGui.Utility.BodyFatigue.Text:split(" ")[3]:split("%")[1]) ~= oldFatigue or (tick() - curtime) >= 5 or not game.Players.LocalPlayer.Character:FindFirstChild(traintype)
                                elseif trainspeed == "Fast" and not isrunning and debuffCheck() then
                                    local StamPercent = (game.Players.LocalPlayer.Character.CurrentStamina.Value / game.Players.LocalPlayer.Character.MaxStamina.Value) * 100
                                    if StamPercent >= ministam or not autotrain then
                                    game.Players.LocalPlayer.Character[traintype]:Activate()
                                    end
                                end
                            elseif game.Players.LocalPlayer.Backpack:FindFirstChild(traintype) and not isrunning and not CurrentRegening then
                                local StamPercent = (game.Players.LocalPlayer.Character.CurrentStamina.Value / game.Players.LocalPlayer.Character.MaxStamina.Value) * 100
                                if StamPercent >= ministam or not autotrain then
                                game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
                                task.wait(0.1)
                                game.Players.LocalPlayer.Character.Humanoid:EquipTool(game.Players.LocalPlayer.Backpack:FindFirstChild(traintype))
                                task.wait(0.1)
                            
                            end
                            end
                        elseif traintype == "Stamina" then
                            while task.wait(0.1) and autotrain and traintype == "Stamina" do
                                pcall(function()
                                    local actionscript = getsenv(game:GetService("Players").LocalPlayer.Backpack.LocalS)
                                    local StamPercent = (game.Players.LocalPlayer.Character.CurrentStamina.Value / game.Players.LocalPlayer.Character.MaxStamina.Value) * 100

                                    if not isrunning and StamPercent >= 100 and autotrain then
                                        actionscript.runPrompt()
                                        isrunning = true
                                        task.wait(1)
                                    elseif isrunning and autotrain then
                                        repeat
                                            StamPercent = (game.Players.LocalPlayer.Character.CurrentStamina.Value / game.Players.LocalPlayer.Character.MaxStamina.Value) * 100
                                            task.wait()
                                        until StamPercent <= ministam or not autotrain

                                        if StamPercent < 100 or not autotrain then
                                            actionscript.stopSprint()
                                            maintenancechecks()
                                        end
                                        isrunning = false
                                    end
                                end)
                            end
                        end
                    end
                end)
            end
        end
    },"Auto Training")

    Trainingright:Header({Text = "Auto Train Settings"})  

    Trainingright:Toggle({
        Name = "Regen Stamina",
        Default = false,
        Callback = function(Value)
            regenstamina = Value
        end
    },"Regen Stamina")

    Trainingright:Slider({
        Name = "Minimum Stamina %",
        Minimum = 0,
        Maximum = 100,
        Default = ministam,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(Value)
            ministam = Value
        end
    },"Min Stam")

    Trainingright:Slider({
        Name = "Regen Stamina %",
        Minimum = 0,
        Maximum = 100,
        Default = regentoamt,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(Value)
            regentoamt = Value
        end
    },"Regen Stam")

    Trainingright:Slider({
        Name = "After Set %",
        Minimum = 0,
        Maximum = 100,
        Default = waittostamina,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(Value)
            waittostamina = Value
        end
    },"After Set Stamina")

    Trainingleft:Dropdown({
        Name = "Train Type",
        Options = {"Push up", "Squat", "Stamina"},
        Callback = function(Value)
            traintype = Value
        end
    },"Train Type")

    Trainingleft:Dropdown({
        Name = "Train Speed",
        Options = {"Fast", "Slow"},
        Callback = function(Value)
            trainspeed = Value
        end
    },"Train Speed")
    
    Trainingleft:Divider()

    Trainingleft:Header({Text = "Striking Speed"})  
    
    Trainingleft:Toggle({
        Name = "Strike Speed", 
        Default = false, 
        Callback = function(Value)
            strikespeed = Value
            local comboconnection

            if strikespeed then
                comboconnection = game.Players.LocalPlayer.Character.ChildAdded:Connect(updateCombo)
            else
                if comboconnection then
                    comboconnection:Disconnect()
                end
            end

            local originalPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.Position

            while strikespeed do task.wait()
                local ssbuy = GetSSBuy()

                if ssbuy then
                    combatLoop()
                end
            end
        end
    },"Strike Speed")

    Trainingright:Divider()

    Trainingright:Header({Text = "Striking Speed Settings"})  

    Trainingright:Toggle({
        Name = "SS Use M2",
        Default = false,
        Callback = function(Value)
            ssuseM2 = Value
        end
    },"SS Use M2")
  
    Trainingright:Slider({
        Name = "SS Purchase Distance",
        Minimum = 0,
        Maximum = 100,
        Default = buydistances,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(Value)
            buydistances = Value
        end
    },"SS Purchase Distance")

    Trainingright:Slider({
        Name = "SS Punch Speed",
        Minimum = 0,
        Maximum = 1,
        Default = m1speedslider,
        DisplayMethod = "Round",
        Precision = 1,
        Callback = function(Value)
            m1speedslider = Value
        end
    },"SS Punch Speed")

    Trainingleft:Divider()

    Trainingleft:Header({Text = "Striking Power"})  

    Trainingleft:Toggle({Name = "Strike Power",Default = false,Callback = function(Value)
            strikepower = Value
    
            local comboconnection
            comboconnection = game.Players.LocalPlayer.Character.ChildAdded:Connect(function(v)
                if not strikepower then
                    comboconnection:Disconnect()
                    return
                end
                if v.Name == "Attacking" and strikepower then
                    currentcombo = v.Value
                end
            end)
    
            startPunching = false
            local reequipdebounce = false
    
            while task.wait() and strikepower do
                local bag = GetPunchingBag()
                local combatTool = GetStyle()
    
                if bag and strikepower then
                    StamPercent = (game.Players.LocalPlayer.Character.CurrentStamina.Value / game.Players.LocalPlayer.Character.MaxStamina.Value) * 100
                    maintenancechecks()
    
                    if not startPunching then
                        if StamPercent < RunToPercent then
                            repeat
                                StamPercent = (game.Players.LocalPlayer.Character.CurrentStamina.Value / game.Players.LocalPlayer.Character.MaxStamina.Value) * 100
                                task.wait()
                            until StamPercent >= RunToPercent or not strikepower
    
                            startPunching = true
                        elseif StamPercent > RunToPercent then
                            while task.wait(0.1) and strikepower and not startPunching do
                                if not strikepower then
                                    return
                                end
                                pcall(function()
                                    local actionscript = getsenv(game:GetService("Players").LocalPlayer.Backpack.LocalS)
                                    local StamPercent = (game.Players.LocalPlayer.Character.CurrentStamina.Value / game.Players.LocalPlayer.Character.MaxStamina.Value) * 100
    
                                    if not isrunning and StamPercent > RunToPercent and strikepower then
                                        actionscript.runPrompt()
                                        isrunning = true
                                        task.wait(1)
                                    elseif isrunning and strikepower then
                                        repeat
                                            StamPercent = (game.Players.LocalPlayer.Character.CurrentStamina.Value / game.Players.LocalPlayer.Character.MaxStamina.Value) * 100
                                            task.wait()
                                        until StamPercent <= RunToPercent or StamPercent == 100 or not strikepower
    
                                        if StamPercent <= RunToPercent and strikepower then
                                            actionscript.stopSprint()
                                            startPunching = true
                                        end
                                        isrunning = false
                                    end
                                end)
                            end
                        end
                    elseif startPunching and StamPercent > RunToPercent and StamPercent > PunchStartPercent and StamPercent > PunchEndPercent then
                        startPunching = false
                    elseif startPunching and strikepower and combatTool then
                        repeat
                            local StamPercent = (game.Players.LocalPlayer.Character.CurrentStamina.Value / game.Players.LocalPlayer.Character.MaxStamina.Value) * 100
                            task.wait()
                        until StamPercent >= PunchStartPercent or not strikepower or PunchStartPercent < RunToPercent
    
                        maintenancechecks()
                        if combatTool.Parent == game.Players.LocalPlayer.Backpack and strikepower and not reequipdebounce then
                            reequipdebounce = true
                            game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
                            task.wait(0.1)
                            game.Players.LocalPlayer.Character.Humanoid:EquipTool(combatTool)
                            task.wait(0.1)
                            reequipdebounce = false
                        end
    
                        repeat
                            maintenancechecks()
                            task.wait()
                            if not strikepower  then
                                return
                            end
                            task.wait()
                            StamPercent = (game.Players.LocalPlayer.Character.CurrentStamina.Value / game.Players.LocalPlayer.Character.MaxStamina.Value) * 100
                            pcall(function()
                                if strikepower and RhythmToggle then
                                    ChargeRhythm(combatTool)
                                end
    
                                if combatTool.Parent == game.Players.LocalPlayer.Character and not CurrentRegening then
                                    repeat
                                        StamPercent = (game.Players.LocalPlayer.Character.CurrentStamina.Value / game.Players.LocalPlayer.Character.MaxStamina.Value) * 100
                                        if combatTool.Parent == game.Players.LocalPlayer.Character then
                                            combatTool:Activate()
                                        end
                                        task.wait()
                                    until (currentcombo and currentcombo == 4) or combatTool.Parent == game.Players.LocalPlayer.Backpack or StamPercent <= PunchEndPercent or not startPunching or StamPercent >= 90
    
                                    if currentcombo then
                                        if currentcombo == 4 and not m2already and StamPercent >= PunchEndPercent and spuseM2 then
                                            repeat
                                                local successm2 = false
    
                                                if game.Players.LocalPlayer.Character:FindFirstChild("Attacking") and game.Players.LocalPlayer.Character.Attacking.Value == 5 then
                                                    successm2 = true
                                                end
                                                StamPercent = (game.Players.LocalPlayer.Character.CurrentStamina.Value / game.Players.LocalPlayer.Character.MaxStamina.Value) * 100
                                                local VIM = game:GetService("VirtualInputManager")
                                                VIM:SendMouseButtonEvent(0, 500, 1, true, game, 1)
                                                task.wait()
                                                VIM:SendMouseButtonEvent(0, 500, 1, false, game, 1)
                                                task.wait()
                                            until successm2 or not strikepower or StamPercent >= 90 or combatTool.Parent == game.Players.LocalPlayer.Backpack
                                            task.wait(0.1)
                                            m2already = true
                                        elseif currentcombo == 4 and m2already and StamPercent >= PunchEndPercent and spuseM2 then
                                            currentcombo = nil
                                            m2already = false
                                        end
                                    end
                                    task.wait()
                                end
                            end)
                        until not strikepower or StamPercent <= PunchEndPercent or StamPercent >= 90
                        startPunching = false
                    end
                end
            end
        end
    },"Strike Power")

    Trainingright:Divider()

    Trainingright:Header({Text = "Striking Power Settings"})  

    Trainingright:Toggle({
        Name = "SP Use M2",
        Default = false,
        Callback = function(Value)
            spuseM2 = Value
        end
    },"SP Use M2")

    Trainingright:Slider({
        Name = "SP Run to %",
        Minimum = 0,
        Maximum = 100,
        Default = RunToPercent,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(Value)
            RunToPercent = Value
        end
    },"SP Run to %")

    Trainingright:Slider({
        Name = "SP Punch Start %",
        Minimum = 0,
        Maximum = 100,
        Default = PunchStartPercent,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(Value)
            PunchStartPercent = Value
        end
    },"SP Punch Start %")

    Trainingright:Slider({
        Name = "SP Punch End %",
        Minimum = 0,
        Maximum = 100,
        Default = PunchEndPercent,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(Value)
            PunchEndPercent = Value
        end
    },"SP Punch End %")

    Trainingleft:Divider()

    Trainingleft:Header({Text = "Machines"})  

    Trainingleft:Toggle({Name = "Machines",Default = false,Callback = function(Value)
            machines = Value

            while task.wait() and machines do
                pcall(function()
                    if game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("TreadmillMachineGUI") and machines and machinetype ~= nil and treadselect ~= nil then
                        local GUI = game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("TreadmillMachineGUI")
                        if GUI and machines then
                            if not GUI.Frame3.Visible then
                                StaminaCheck(waittostamina - 1, waittostamina)
                            end
                            if GUI.Frame.Visible and machines and CurrentRegening == false then
                                if getconnections then
                                    SimulateClick(GUI.Frame.StatPickF[treadselect], "Function")
                                else
                                    press(GUI.Frame.StatPickF[treadselect])
                                end
                                task.wait(0.1)
                            elseif GUI.Frame2.Visible and machines and CurrentRegening == false then
                                local i = 5
                                repeat
                                    if not GUI.Frame2.Visible then
                                        break
                                    end
                                    if getconnections then
                                        SimulateClick(GUI.Frame2.ListF[tostring(i)], "Function")
                                    else
                                        press(GUI.Frame2.ListF[tostring(i)])
                                    end
                                    task.wait(0.1)
                                    i = i - 1
                                until i <= 0
                            elseif GUI.Frame3.Visible and machines and CurrentRegening == false then
                                if GUI.Frame3.Start.Visible and machines and CurrentRegening == false then
                                    task.spawn(function()
                                        if getconnections then
                                            SimulateClick(GUI.Frame3.Start, "Function")
                                        else
                                            press(GUI.Frame3.Start)
                                        end
                                    end)
                                    task.wait(0.1)
                                elseif not GUI.Frame3.Start.Visible and machines and CurrentRegening == false then
                                    StaminaCheck()
                                    if GUI.Frame3.TrainingF.ButtonTemplate.Visible and machines then
                                        if tostring(GUI.Frame3.TrainingF.ButtonTemplate.Input.TextColor3) == "1, 1, 1" and CurrentRegening == false then
                                            task.wait(0.07)
                                            VIM:SendKeyEvent(true, GUI.Frame3.TrainingF.ButtonTemplate.Input.Text, false, game)
                                            task.wait()
                                            VIM:SendKeyEvent(false, GUI.Frame3.TrainingF.ButtonTemplate.Input.Text, false, game)
                                            task.wait()
                                        end
                                    end
                                end
                            end
                        end
                    elseif game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("BarbellMachineGUI") or game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("SquatMachineGUI") and machinetype ~= nil then
                        local GUI = game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("BarbellMachineGUI") or game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("SquatMachineGUI")
                        if GUI and machines then
                            if GUI.Frame.Visible then
                                StaminaCheck(99, 100)
                                task.wait()
                            end
                            if GUI.Frame.Visible and machines and CurrentRegening == false then
                                local i = 6
                                repeat
                                    if not GUI.Frame.Visible then
                                        break
                                    end
                                    if getconnections then
                                        SimulateClick(GUI.Frame.ListF["Barbell " .. tostring(i) .. " Weight"], "Function")
                                    else
                                        press(GUI.Frame.ListF["Barbell " .. tostring(i) .. " Weight"])
                                    end
                                    task.wait(0.1)
                                    i = i - 1
                                until i <= 0
                            elseif GUI.Frame2.Visible and machines and CurrentRegening == false then
                                if GUI.Frame2.Start.Visible and machines and CurrentRegening == false then
                                    task.spawn(function()
                                        if getconnections then
                                            SimulateClick(GUI.Frame2.Start, "Function")
                                        else
                                            press(GUI.Frame2.Start)
                                        end
                                    end)
                                    task.wait(0.1)
                                elseif not GUI.Frame2.Start.Visible and machines and CurrentRegening == false then
                                    StaminaCheck()
                                    local Icon = GUI.Frame2.LiftingF:FindFirstChild("LiftIcon")
                                    if GUI.Frame2.LiftingF.Visible and machines then
                                        if Icon and CurrentRegening == false then
                                            task.wait(0.07)
                                            if getconnections then
                                                SimulateClick(Icon, "Function")
                                            else
                                                press(Icon)
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    else
                        maintenancechecks()
                        if LastMachine ~= nil then
                            if (LastMachine.Base.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= LastMachine.ClickDetector.MaxActivationDistance and GetMachineType(LastMachine) == machinetype then
                                task.wait(1.3)
                                fireclickdetector(LastMachine.ClickDetector)
                                task.wait(0.5)
                            elseif GetMachineType(LastMachine) ~= machinetype then
                                LastMachine = nil
                            end
                        end
                        local MachineQuery = ClosestMachine()
                        if MachineQuery ~= nil and debuffCheck() and machinetype ~= nil then
                            LastMachine = MachineQuery
                            task.wait(1.3)
                            fireclickdetector(LastMachine.ClickDetector)
                            task.wait(0.5)
                        elseif MachineQuery == nil and debuffCheck() and machinetype ~= nil and WalkBackWhenFar and LastMachine ~= nil then
                            game.Players.LocalPlayer.Character.Humanoid:MoveTo(LastMachine.Base)
                            task.wait(2)
                        end
                    end
                end)
            end
            if not machines and LastMachine ~= nil then
                LastMachine = nil
            end
        end
    },"Machines")

    Trainingleft:Dropdown({
        Name = "Machine",
        Options = {"Bench", "Squat", "Treadmill"},
        Callback = function(Value)
            machinetype = Value
        end
    },"Machine Option:")

    Trainingleft:Dropdown({
        Name = "Treadmill Option",
        Options = {"Stamina", "RunningSpeed"},
        Callback = function(Value)
            treadselect = Value
        end
    },"Treadmill Option:")

    Trainingleft:Divider()

    Trainingleft:Header({Text = "Durability"})

    Trainingleft:Label({Text = "Make sure both accs have same settings"})

    Trainingleft:Label({Text = "You need 2 accounts that are using the script"})  
    
    Trainingleft:Toggle({Name = "Durability",Default = false,Callback = function(Value)
        durability = Value
        while task.wait() and durability do
            if ft ~= nil and st ~= nil and durability then
                if game.Players.LocalPlayer.Name == ft or game.Players.LocalPlayer.Name == st and durability then
                    local ftplr = game.Players:FindFirstChild(ft)
                    local stplr = game.Players:FindFirstChild(st)
                    if ftplr.Character and stplr.Character and not durainprogress and durability then
                        local distancebetweenplrs = (ftplr.Character.HumanoidRootPart.Position - stplr.Character.HumanoidRootPart.Position).Magnitude
                        if distancebetweenplrs <= 10 and GetDuraBuy() ~= nil or SkillXP and distancebetweenplrs <= 10 then
                            durainprogress = true
                            if taketurns then
                                repeat
                                    task.wait()
                                until ftplr.Character.Humanoid.Health >= ftplr.Character.Humanoid.MaxHealth or not durability
                                maintenancechecks()
                                duraturn(ftplr, stplr)
                                task.wait()
                                repeat
                                    task.wait()
                                until stplr.Character.Humanoid.Health >= stplr.Character.Humanoid.MaxHealth or not durability
                                maintenancechecks()
                                duraturn(stplr, ftplr)
                            else
                                repeat
                                    task.wait()
                                until ftplr.Character.Humanoid.Health >= ftplr.Character.Humanoid.MaxHealth or not durability
                                maintenancechecks()
                                duraturn(ftplr, stplr)
                            end
                            durainprogress = false
                        end
                    end
                end
            end
        end
    end
    },"Durability")
    
    Trainingleft:Input({
        Name = "First Turn",
        Default = "",
        Callback = function(txt)
            ft = txt
        end
    },"FT Turn")

    Trainingleft:Input({
        Name = "Second Turn",
        Default = "",
        Callback = function(txt)
            st = txt
        end
    },"SC Turn")

    Trainingright:Divider()

    Trainingright:Header({Text = "Durability Setting's"})

    Trainingright:Label({Text = "For the XP Mode Have Skills In Hotbar"})  

    Trainingright:Label({Text = "(Farms Skill XP)"})  

    Trainingright:Toggle({
        Name = "Take Turns",
        Default = false,
        Callback = function(Value)
            taketurns = Value
        end
    },"Take Turns")

    Trainingright:Toggle({
        Name = "Auto Walk After Pushed Back",
        Default = false,
        Callback = function(Value)
            AutoWalkAfterPushedBack = Value
        end
    },"Auto Walk After Pushed Back")

    Trainingright:Toggle({
        Name = "Auto Walk Back To Position",
        Default = false,
        Callback = function(Value)
            AutoWalkToPosition = Value
            while AutoWalkToPosition do task.wait()
                if GoingForSupp or GoingForFood or autosleepwalk then
                    task.wait()
                else
                    local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")
                    if humanoidRootPart and (strikespeed or strikepower or durability) and not autosleepwalk then
                        local distance = (AutoWalkBackPosition.Position - humanoidRootPart.Position).Magnitude
                        if distance > 1 then
                            pcall(function()
                            humanoid:MoveTo(AutoWalkBackPosition.Position)
                            humanoid.MoveToFinished:Wait()
                            end)
                        else
                            task.wait(0.1)
                        end
                    end
                end
            end
        end
    }, "Auto Move To Set")
    
    
    Trainingright:Button({
        Name = "Set Walk Back Spot",
        Callback = function()
            local humanoidRootPart = game.Players.LocalPlayer.Character.HumanoidRootPart
            AutoWalkBackPosition = humanoidRootPart.CFrame
            Window:Notify({
                Title = "North Hub",
                Description = "Set Walk Back Spot!",
                Lifetime = 5
            })
        end
    })

    Trainingright:Dropdown({
        Name = "DuraTool",
        Options = {"Metal Bat", "Revolver", "Default"},
        Callback = function(Value)
            DuraTool = Value
        end
    },"Dura Tool")

    Trainingright:Slider({
        Name = "Health % to Stop",
        Minimum = 0,
        Maximum = 100,
        Default = stopAtHP,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(Value)
            stopAtHP = Value
        end
    },"Health To Stop At")

    Trainingright:Toggle({
        Name = "Skill XP mode",
        Default = false,
        Callback = function(Value)
            SkillXP = Value
        end
    },"Skill XP Mode")

    Trainingright:Divider()

    Trainingright:Header({Text = "Extra Settings"})  

    Trainingright:Toggle({
        Name = "Use Rhythm on Trainings",
        Default = false,
        Callback = function(Value)
            RhythmToggle = Value
        end
    },"Use Rhythm On Trainings")

    Trainingright:Toggle({
        Name = "Walk Back When Far",
        Default = false,
        Callback = function(Value)
            WalkBackWhenFar = Value
        end
    },"Walk Back")

    Trainingright:Toggle({
        Name = "Log When Money Out",
        Default = false,
        Callback = function(Value)
            LogOnNotEnoughMoney = Value
        end
    },"Log When No Cash")

    Trainingright:Toggle({
        Name = "Log when No Food",
        Default = false,
        Callback = function(Value)
            LogOnNoFood = Value
        end
    },"Log When No Food")

    local RespawnConnection

    Trainingright:Toggle({
        Name = "Log After Gripped",
        Default = false,
        Callback = function(Value)
            logwhengripped = Value
            if logwhengripped then
                RespawnConnection = game.Players.LocalPlayer.CharacterAdded:Connect(function()
                    game.Players.LocalPlayer:kick('Gripped')
                end)
            else
                if RespawnConnection then
                    RespawnConnection:Disconnect()
                    RespawnConnection = nil
                end
            end
        end
    }, "Log when gripped")



    Notifyleft:Header({Text = "Notifiers"})  
    Notifyleft:Label({Text = "If You Need Disabling Enable That Feature First."})  

    Notifyleft:Toggle({
        Name = "Staff Notifier",
        Default = false,
        Callback = function(Value)
            staffnotifier = Value
            if staffnotifier then
                for _, v in pairs(game.Players:GetPlayers()) do
                    if staffnotifier then
                        Notifier(v)
                    end
                end
            end
        end
    },"Staff Notifier")

    Notifyleft:Toggle({
        Name = "Disable All When Staff Joins",
        Default = false,
        Callback = function(Value)
            disableOnStaff = Value
        end
    },"Disable When Staff Joins")

    Notifyleft:Divider()

    Notifyleft:Header({Text = "Cops"})  

    Notifyleft:Toggle({
        Name = "Cop Notifier",
        Default = false,
        Callback = function(Value)
            copnotifier = Value
            if copnotifier then
                for _, v in pairs(game.Players:GetPlayers()) do
                    if copnotifier then
                        Notifier(v)
                    end
                end
            end
        end
    },"Cop Notifier")

    Notifyleft:Divider()

    Notifyleft:Header({Text = "NPC's"})  

    Notifyleft:Toggle({
        Name = "Flow NPC Notifier",
        Default = false,
        Callback = function(Value)
            flownotifier = Value
            if flownotifier then
                if game:GetService("Workspace"):FindFirstChild("XinFolder") then
                    local NPC = workspace:FindFirstChild("XinFolder") and workspace.XinFolder:FindFirstChild("Luke Xin")
                    if NPC and NPC:IsA("Model") then
                        Notifier()
                        local humanoidRootPart = NPC:FindFirstChild("HumanoidRootPart")
                        if humanoidRootPart then
                            local billboardGui = Instance.new("BillboardGui")
                            billboardGui.Parent = humanoidRootPart
                            billboardGui.Adornee = humanoidRootPart
                            billboardGui.Size = UDim2.new(0, 50, 0, 50)
                            billboardGui.StudsOffset = Vector3.new(0, 2, 0)
                            billboardGui.AlwaysOnTop = true
    
                            local imageLabel = Instance.new("ImageLabel")
                            imageLabel.Parent = billboardGui
                            imageLabel.Size = UDim2.new(1, 0, 1, 0)
                            imageLabel.Image = "rbxassetid://104832225542320"
                            imageLabel.BackgroundTransparency = 1
                        end
                    end
                end
                flowconnection = workspace.Live.ChildAdded:Connect(function()
                    if flownotifier then
                        local NPC = workspace:FindFirstChild("XinFolder") and workspace.XinFolder:FindFirstChild("Luke Xin")
                        if NPC and NPC:IsA("Model") then
                            local humanoidRootPart = NPC:FindFirstChild("HumanoidRootPart")
                            if humanoidRootPart then
                                local billboardGui = Instance.new("BillboardGui")
                                billboardGui.Parent = humanoidRootPart
                                billboardGui.Adornee = humanoidRootPart
                                billboardGui.Size = UDim2.new(0, 50, 0, 50)
                                billboardGui.StudsOffset = Vector3.new(0, 2, 0)
                                billboardGui.AlwaysOnTop = true
    
                                local imageLabel = Instance.new("ImageLabel")
                                imageLabel.Parent = billboardGui
                                imageLabel.Size = UDim2.new(1, 0, 1, 0)
                                imageLabel.Image = "rbxassetid://104832225542320"
                                imageLabel.BackgroundTransparency = 1
                            end
                        end
                    end
                end)
            else
                if flowconnection then
                    flowconnection:Disconnect()
                end
                local NPC = workspace:FindFirstChild("XinFolder") and workspace.XinFolder:FindFirstChild("Luke Xin")
                if NPC then
                    local humanoidRootPart = NPC:FindFirstChild("HumanoidRootPart")
                    if humanoidRootPart then
                        local billboardGui = humanoidRootPart:FindFirstChildOfClass("BillboardGui")
                        if billboardGui then
                            billboardGui:Destroy()
                        end
                    end
                end
            end
        end
    },"Flow NPC Notifier")
    
    Notifyleft:Toggle({
        Name = "Street Fighter Notifier",
        Default = false,
        Callback = function(Value)
            sfnotifier = Value
            if sfnotifier then
                if game:GetService("Workspace"):FindFirstChild("AokiFolder") then
                    local NPC = workspace:FindFirstChild("AokiFolder") and workspace.AokiFolder:FindFirstChild("NPC")
                    if NPC and NPC:IsA("Model") then
                        Notifier()
                        local humanoidRootPart = NPC:FindFirstChild("HumanoidRootPart")
                        if humanoidRootPart then
                            local billboardGui = Instance.new("BillboardGui")
                            billboardGui.Parent = humanoidRootPart
                            billboardGui.Adornee = humanoidRootPart
                            billboardGui.Size = UDim2.new(0, 50, 0, 50)
                            billboardGui.StudsOffset = Vector3.new(0, 2, 0)
                            billboardGui.AlwaysOnTop = true
    
                            local imageLabel = Instance.new("ImageLabel")
                            imageLabel.Parent = billboardGui
                            imageLabel.Size = UDim2.new(1, 0, 1, 0)
                            imageLabel.Image = "rbxassetid://104832225542320"
                            imageLabel.BackgroundTransparency = 1
                        end
                    end
                end
                sfconnection = workspace.ChildAdded:Connect(function(child)
                    if sfnotifier then
                        if child.ClassName == "Folder" and child.Name == "AokiFolder" then
                            local NPC = workspace:FindFirstChild("AokiFolder") and workspace.AokiFolder:FindFirstChild("NPC")
                            if NPC and NPC:IsA("Model") then
                                local humanoidRootPart = NPC:FindFirstChild("HumanoidRootPart")
                                if humanoidRootPart then
                                    local billboardGui = Instance.new("BillboardGui")
                                    billboardGui.Parent = humanoidRootPart
                                    billboardGui.Adornee = humanoidRootPart
                                    billboardGui.Size = UDim2.new(0, 50, 0, 50)
                                    billboardGui.StudsOffset = Vector3.new(0, 2, 0)
                                    billboardGui.AlwaysOnTop = true
    
                                    local imageLabel = Instance.new("ImageLabel")
                                    imageLabel.Parent = billboardGui
                                    imageLabel.Size = UDim2.new(1, 0, 1, 0)
                                    imageLabel.Image = "rbxassetid://104832225542320"
                                    imageLabel.BackgroundTransparency = 1
                                end
                            end
                        end
                    end
                end)
            else
                if sfconnection then
                    sfconnection:Disconnect()
                end
                local NPC = workspace:FindFirstChild("AokiFolder") and workspace.AokiFolder:FindFirstChild("NPC")
                if NPC then
                    local humanoidRootPart = NPC:FindFirstChild("HumanoidRootPart")
                    if humanoidRootPart then
                        local billboardGui = humanoidRootPart:FindFirstChildOfClass("BillboardGui")
                        if billboardGui then
                            billboardGui:Destroy()
                        end
                    end
                end
            end
        end
    },"SF Notifier")
    
    Notifyleft:Divider()

    Notifyright:Header({Text = "Macro Ruiner"})  

    Notifyright:Label({Text = "Go to your executor's folder to add ops"})  
    Notifyright:Label({Text = "Executor/workspace/MOoppositions.json"})  

    Notifyright:Toggle({
        Name = "Macro Ruiner Notifier",
        Default = false,
        Callback = function(Value)
            macroruin = Value
            if macroruin then
                local connection
                connection = game:GetService("CoreGui").RobloxPromptGui.promptOverlay.ChildAdded:Connect(function(child)
                    if not macroruin then
                        connection:Disconnect()
                        return
                    end
                    if child.Name == "ErrorPrompt" and child:FindFirstChild("MessageArea") and child.MessageArea:FindFirstChild("ErrorFrame") then
                        task.wait(0.5)
                        webhook("Macro Ruin Notifier", "You were disconnected. Reason:\n" .. child.MessageArea.ErrorFrame.ErrorMessage.Text)
                    end
                end)
            end
    
            local sound
            function stopSound()
                if sound and sound.IsPlaying then
                    sound:Stop()
                end
                UserSettings():GetService("UserGameSettings").MasterVolume = oldVolume or 0.5
            end
    
            while macroruin and task.wait() do
                if game.Players.LocalPlayer.PlayerGui.MainGui.Utility.CombatTag.Visible and not macroruindebounce and alreadynotifieduser ~= CurrentGanker and CurrentGanker then
                    macroruindebounce = true
                    alreadynotifieduser = CurrentGanker
                    if playmacroruinaudio then
                        if oldVolume == nil then
                            oldVolume = UserSettings():GetService("UserGameSettings").MasterVolume
                        end
                        local level = 10 / 10
                        UserSettings():GetService("UserGameSettings").MasterVolume = level
                        CurrentlyPlaying[#CurrentlyPlaying + 1] = playsound(gettinggankedsound)
                        game.StarterGui:SetCore("SendNotification", {
                            Title = "Macro Ganker!",
                            Text = "Getting Ganked By:".. CurrentGanker,
                            Duration = math.huge,
                            Button1 = "Stop niii!",
                            Callback = Bindable,
                        })
                    end
                    webhook("Macro Ruin Notifier", "You are getting macro ganked! Get your get back!\n" .. CurrentGanker)
                    task.wait(0.5)
                    macroruindebounce = false
                end
            end
        end
    },"Macro Ruiner Notifier") 

    Notifyright:Toggle({
        Name = "Play Audio When Ganked",
        Default = false,
        Callback = function(Value)
            playmacroruinaudio = Value
        end
    },"Play Audio When Ganked")
    
    Notifyright:Divider()

    Notifyright:Header({Text = "OP'S"})  

    pcall(function()
        if writefile then
            if not OPsData then
                local defaultData = {"PlayerUserIdHere", "AnotherPlayerUserIdHere", "BeSureToAddCommaAfter"}
                writefile("MOoppositions.json", httpService:JSONEncode(defaultData))
            end
            pcall(function()
                OPsData = httpService:JSONDecode(readfile("MOoppositions.json"))
            end)
            Notifyright:Toggle({
                Name = "Notify when OPs join",
                Default = false,
                Callback = function(Value)
                    OPSNotifier = Value
                    OPsData = httpService:JSONDecode(readfile("MOoppositions.json"))
                    for _, v in ipairs(game.Players:GetPlayers()) do
                        if table.find(OPsData, tostring(v.UserId)) then
                            if playopssound then
                                if oldVolume == nil then
                                    oldVolume = UserSettings():GetService("UserGameSettings").MasterVolume
                                end
                                local level = 10 / 10
                                UserSettings():GetService("UserGameSettings").MasterVolume = level
                                CurrentlyPlaying[#CurrentlyPlaying + 1] = playsound(opjoinedsound)
                                game.StarterGui:SetCore("SendNotification", {
                                    Title = "Ops Joined!",
                                    Text = "Op Joined:".. v.Name,
                                    Duration = math.huge,
                                    Button1 = v.Name .. " K Till My Bones Decay!",
                                    Callback = Bindable,
                                })
                            end
                            webhook("Opposition Detected", "DisplayName: " .. v.DisplayName .. "\nUsername: " .. v.Name .. "\nUserId: " .. tostring(v.UserId))
                        end
                    end
                    while OPSNotifier and task.wait() do
                        OPsData = httpService:JSONDecode(readfile("MOoppositions.json"))
                    end
                end
            })
        end
    end)

    Notifyright:Toggle({
        Name = "Play Audio When Ops Join",
        Default = false,
        Callback = function(Value)
            playopssound = Value
        end
    },"Play Audio When Ops Join")

    Notifyleft:Header({Text = "Sleep"})  

    Notifyleft:Toggle({
        Name = "Notify When Done Sleeping(0%)",
        Default = false,
        Callback = function(Value)
            SleepNotifier = Value

            while task.wait() and SleepNotifier do
                if IsSleeping() then
                    local Fatigue = tonumber(game.Players.LocalPlayer.PlayerGui.MainGui.Utility.BodyFatigue.Text:split(" ")[3]:split("%")[1])
                    if Fatigue <= 0 then
                        webhook("Sleep Notifier", "You're done sleeping! GET YO ASS UP!!!")
                        task.wait(60)
                    end
                end
            end
        end
    },"Notify When Sleeping")


    Notifyright:Divider()

    Notifyright:Header({Text = "Food"})  

    Notifyright:Toggle({
        Name = "Notify & Stop when No Food",
        Default = false,
        Callback = function(Value)
            NoFoodNotify = Value
        end
    },"Notify N Stop When No Food")

    dataTable = {
        discId = "",
        webhookUrl = "",
    }

    
    pcall(function()
        if isfile("NorthOmega.json") then
            local data = httpService:JSONDecode(readfile("NorthOmega.json"))
            dataTable["discId"] = data["discId"]
            dataTable["webhookUrl"] = data["webhookUrl"]
        else
            local data = httpService:JSONEncode(dataTable)
            writefile("NorthOmega.json", data)
        end
    end)

    Notifyright:Divider()

    Notifyright:Header({Text = "Webhook"})  

    Notifyright:Input({
        Name = "Webhook Url",
        Default = "",
        TextDisappear = true,
        Callback = function(txt)
            webhookUrl = txt
            dataTable["webhookUrl"] = webhookUrl
            local data = httpService:JSONEncode(dataTable)
            if writefile then
                writefile("NorthOmega.json", data)
            end
        end
    },"WebhookUrl")

    if dataTable["webhookUrl"] ~= "" then
        webhookUrl = dataTable["webhookUrl"]
        --Notifyright:Refresh(dataTable["webhookUrl"])
    end

    Notifyright:Input({
        Name = "Discord User Id",
        Default = "",
        TextDisappear = true,
        Callback = function(txt)
            if tonumber(txt) == nil then
                ping = "@everyone"
            else
                ping = "<@" .. txt .. ">"
                dataTable["discId"] = txt
                local data = httpService:JSONEncode(dataTable)
                if writefile then
                    writefile("NorthOmega.json", data)
                end
            end
        end
    },"DiscordId")

    if dataTable["discId"] ~= "" then
        ping = "<@" .. dataTable["discId"] .. ">"
    end

    Notifyright:Button({
        Name = "Test Webhook",
        Callback = function()
            webhook("Webhook Test", "<3")
        end
    })

    Autocookleft:Header({Text = "Auto Cooking"})  

    pcall(function()
        Autocookleft:Toggle({
            Name = "Auto Cook",
            Default = false,
            Callback = function(Value)
                acook = Value

                while task.wait() and acook do
                    if CheckForFood() and acook then
                        local Pan

                        repeat
                            task.wait()
                        until GetPan() ~= nil or not acook
                        if not acook then
                            return
                        end
                        Pan = GetPan()

                        game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
                        task.wait()
                        for i, v in pairs(recipes[SelectedFood]) do
                            local tool = game.Players.LocalPlayer.Backpack:FindFirstChild(i)
                            game.Players.LocalPlayer.Character.Humanoid:EquipTool(tool)
                            task.wait()
                            if not acook then
                                return
                            end
                            local potdebounce = false
                            repeat
                                if Pan.Ingredients:FindFirstChild(i) then
                                    if Pan.Ingredients:FindFirstChild(i).Value ~= v and not potdebounce then
                                        potdebounce = true
                                        VIM:SendKeyEvent(true, "E", false, game)
                                        task.wait(0.1)
                                        VIM:SendKeyEvent(false, "E", false, game)
                                        task.wait(0.1)
                                        potdebounce = false
                                    end
                                elseif not Pan.Ingredients:FindFirstChild(i) and not potdebounce then
                                    potdebounce = true
                                    VIM:SendKeyEvent(true, "E", false, game)
                                    task.wait(0.1)
                                    VIM:SendKeyEvent(false, "E", false, game)
                                    task.wait(0.1)
                                    potdebounce = false
                                end
                            until Pan.Ingredients:FindFirstChild(i) and Pan.Ingredients:FindFirstChild(i).Value == v or not acook
                            if not acook then
                                return
                            end
                            task.wait()
                            game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
                            task.wait(0.1)
                        end
                        task.wait()
                        game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
                        task.wait()
                        if Pan and acook then
                            if not acook then
                                return
                            end
                            fireclickdetector(Pan.ClickDetector)
                            task.wait()
                            repeat
                                task.wait()
                            until Pan.FoodP.TimeG.TextLabel.Text == "!!" or not acook
                            if not acook then
                                return
                            end
                            fireclickdetector(Pan.ClickDetector)
                            task.wait()
                        end
                    end
                end
            end
        },"Auto Cook")

        local foodlist = {}
        for i, v in pairs(recipes) do
            foodlist[#foodlist + 1] = i
        end

        Autocookright:Header({Text = "Auto Cook Setting's"})  

        Autocookright:Dropdown({
            Name = "Food to Auto Cook",
            Options = foodlist,
            Callback = function(Value)
                SelectedFood = Value
            end
        },"Food To Cook")


        Autocookleft:Divider()

        Autocookleft:Header({Text = "Auto Buy"})  

        absbox = Autocookleft:Input({
            Name = "Serving's",
            Callback = function(txt)
                if tonumber(txt) ~= nil then
                    if tonumber(txt) > 8 then
                        absbox:Refresh("8")
                        TotalServings = 8
                    elseif tonumber(txt) < 1 then
                        absbox:Refresh("1")
                        TotalServings = 1
                    else
                        TotalServings = tonumber(txt)
                    end
                else
                    absbox:Refresh("1")
                end
            end
        },"Serving Amm")

        Autocookleft:Button({
            Name = "Auto Buy Ingredients to Serving",
            Callback = function()
                if SelectedFood ~= nil then
                    for i, v in pairs(recipes[SelectedFood]) do
                        local finished = false
                        local start = tick()
                        local timesbought = 0
                        local required = v
        
                        if TotalServings > 1 then
                            required = v * TotalServings
                            if required > 15 then
                                required = 15
                            end
                        end

                        Window:Notify({
                            Title = "Auto Buy",
                            Description = "Auto Buying RN: " .. i .. "(" .. timesbought .. "/" .. required .. ")",
                            Lifetime = 5
                        })
        
                        function GetPossibleBuyingRN()
                            local ingreds = {}
        
                            for _, child in pairs(workspace["Grocery Suburb"]:GetChildren()) do
                                if child.Name:find(i) then
                                    table.insert(ingreds, child)
                                end
                            end
        
                            return ingreds
                        end
        
                        local ingredLocations = GetPossibleBuyingRN()
        
                        repeat
                            for _, child in pairs(ingredLocations) do
                                local distance = (child.Head.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
        
                                if distance <= 5 then
                                    repeat
                                        fireclickdetector(child.ClickDetector)
                                        task.wait(0.1)
                                    until child.Name ~= "Purchased!"
                                    timesbought = timesbought + 1

                                    Window:Notify({
                                        Title = "Auto Buy Update",
                                        Description = "Auto Buying RN: " .. i .. "(" .. timesbought .. "/" .. required .. ")",
                                        Lifetime = 5
                                    })

                                    task.wait(0.5)
                                end
                                task.wait()
                            end
        
                            if game.Players.LocalPlayer.Backpack:FindFirstChild(i) then
                                if timesbought >= required or game.Players.LocalPlayer.Backpack:FindFirstChild(i).Quantity.Value >= 15 then
                                    finished = true
                                    break
                                end
                            elseif (tick() - start) >= 1200 then
                                Window:Notify({
                                    Title = "Auto Buy Error",
                                    Description = "Auto Buy Timed Out!",
                                    Lifetime = 5
                                })

                                return
                            end
                            task.wait()
                        until finished
                    end
                    Window:Notify({
                        Title = "Auto Buy Complete",
                        Description = "Finished Buying Ingredients for " .. TotalServings .. " Serving(s)",
                        Lifetime = 5
                    })

                end
            end
        },"Auto Buy Ingredients")       

        absbox:Refresh("1") 
    end)

    Miscleft:Header({Text = "Food Stuff"})  

    Miscleft:Toggle({
        Name = "Auto Eat",
        Default = false,
        Callback = function(Value)
            autoeat = Value
        end
    },'Auto Eat')
    


    Miscright:Header({Text = "Food Settings"})  

    Miscright:Slider({
        Name = "Eat at Hunger %",
        Minimum = 0,
        Maximum = 100,
        Default = 30,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(Value)
            EatAt = Value
        end
    },"Auto Eat Hunger %")


    Miscright:Slider({
        Name = "Fill up to Hunger %",
        Minimum = 0,
        Maximum = 100,
        Default = FillUp,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(Value)
            FillUp = Value
        end
    },"Fill Up To Hunger %")


    Miscright:Toggle({
        Name = "Dont Eat When In Combat",
        Default = false,
        Callback = function(Value)
            stopAEinCombat = Value
        end
    },"Dont Eat When In Combat")

    Miscleft:Divider()

    Miscleft:Header({Text = "Supplements"})  

    Miscleft:Toggle({
        Name = "Auto Supplement",
        Default = false,
        Callback = function(Value)
            autosupplement = Value
        end
    },"Auto Supplement")

    Miscleft:Toggle({
        Name = "Auto Multiple Supplements",
        Default = false,
        Callback = function(Value)
            autosupplement2 = Value
        end
    },"Auto Multiple Supplements")

    Miscright:Slider({
        Name = "Supplements Amm",
        Minimum = 0,
        Maximum = 12,
        Default = DrinkAmm,
        Precision = 0,
        Callback = function(Value)
            DrinkAmm = Value
        end
    },"Supplements Amm")

    Miscleft:Dropdown({
        Name = "Supplement",
        Search = true,
        Multi = true,
        Required = false,
        Options = {"BCAA", "Protein Shake", "Fat Burner", "Scalar"},
        Default = nil,
        Callback = function(Value)
            selectedsupplement = Value
        end,
    }, "SelectedSupplement")

    Miscright:Divider()

    Miscright:Header({Text = "Extra"})  


    Miscright:Toggle({
        Name = "Hold Click (Tools)",
        Default = false,
        Callback = function(Value)
            holdclick = Value

            while task.wait() and holdclick do
                if UIS:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) then
                    while UIS:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) and task.wait() do
                        pcall(function()
                            if UIS:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) then
                                game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool"):Activate()
                            end
                        end)
                    end
                end
            end
        end
    },"Hold Click")

    Miscright:Toggle({
        Name = "Auto Sprint (Combat)",
        Default = false,
        Callback = function(Value)
            autosprintcombat = Value

            local actionscript = getsenv(game:GetService("Players").LocalPlayer.Backpack.LocalS)

            if autosprintcombat then
                began = game:GetService("UserInputService").InputBegan:Connect(function(input, chat)
                    if chat then
                        return
                    end
                    if input.KeyCode == Enum.KeyCode.W and not holdingW and autosprintcombat then
                        actionscript.runPrompt()
                        holdingW = true
                    end
                end)

                ended = game:GetService("UserInputService").InputEnded:Connect(function(input, chat)
                    if chat then
                        return
                    end
                    if input.KeyCode == Enum.KeyCode.W and holdingW and autosprintcombat then
                        holdingW = false
                    end
                end)
            else
                if began and ended then
                    began:Disconnect()
                    ended:Disconnect()
                end
            end
        end
    },"Auto Sprint")

    Miscright:Toggle({
        Name = "Auto Open Crate",
        Default = false,
        Callback = function(Value)
            autoOpenCrate = Value
            while task.wait(0.3) and autoOpenCrate do
                local crateGUI = game:GetService("Players").LocalPlayer.PlayerGui.CrateGUI
                local animationHolder = crateGUI.Animation.Holder
                if animationHolder.Visible == true then
                    local attemptCount = 0
                    while animationHolder.Visible and attemptCount < 4 do
                        press(animationHolder.Accept)
                        attemptCount = attemptCount + 1
                        task.wait(0.2)
                    end
                    if animationHolder.Visible then
                        press(animationHolder.Decline)
                    end
                else
                    local halloweenCrate = crateGUI.Main.Holder.Crates.Items["Halloween Crate #1"]
                    press(halloweenCrate.Open)
                end
            end
        end
    },"Auto Open Crate")


    Miscright:Toggle({
        Name = "Auto Open MCrate",
        Default = false,
        Callback = function(Value)
            autoOpenCrate = Value
            while task.wait(0.3) and autoOpenCrate do
                local crateGUI = game:GetService("Players").LocalPlayer.PlayerGui.CrateGUI
                local animationHolder = crateGUI.Animation.Holder
                if animationHolder.Visible == true then
                    local attemptCount = 0
                    while animationHolder.Visible and attemptCount < 4 do
                        press(animationHolder.Accept)
                        attemptCount = attemptCount + 1
                        task.wait(0.2)
                    end
                    if animationHolder.Visible then
                        press(animationHolder.Decline)
                    end
                else
                    local halloweenCrate = game:GetService("Players").LocalPlayer.PlayerGui.CrateGUI.Main.Holder.Crates.Items["Mystery Crate #2"]
                    press(halloweenCrate.Open)
                end
            end
        end
    },"Auto Open MCrate")

    local convertoptions = {}

    pcall(function()
    for i, v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.HalloweenGUI.Main.Holder.SF.Hold:GetChildren()) do
        if v:IsA("ImageLabel") then
            table.insert(convertoptions, v.Name)
        end
    end
    end)

    Miscright:Dropdown({
        Name = "Convert",
        Options = convertoptions,
        Callback = function(Value)
            convertoptions = Value
        end
    })

    Miscright:Toggle({
        Name = "Auto Convert Candy",
        Default = false,
        Callback = function(Value)
            AutoConvertCandy = Value
            while task.wait(0.3) and AutoConvertCandy do
                local args = {
                    [1] = "\t \240\159\146\128 \t \t\240\159\145\185\240\159\145\185              \240\159\146\128\t \t\240\159\146\128\240\159\145\185 \t \t\240\159\146\128\240\159\146\128   \240\159\145\185\240\159\146\128   \t \t  \240\159\146\128\240\159\146\128\t  \t          ",
                    [2] = "Exchange",
                    [3] = convertoptions
                }
                game:GetService("Players").LocalPlayer.PlayerGui.HalloweenGUI.LocalScript.RemoteFunction:InvokeServer(unpack(args))
            end
        end
    })


    --[[
    local ClanList = {}

    pcall(function()
        for _, v in pairs(game:GetService("ReplicatedStorage").Events.ClansPercentage:GetChildren()) do
            if v:IsA("IntValue") and v.Name ~= "No Special Clan" then
                table.insert(ClanList, v.Name)
            end
        end
    end)
    
    Miscright:Dropdown({
        Name = "Clan List",
        Search = true,
        Multi = true,
        Required = false,
        Options = ClanList,
        Default = nil,
        Callback = function(Value)
            SelectedClan = Value
        end
    })
    -]]
    
    
    
    
    Miscright:Divider()

    Miscright:Header({Text = "Disable Training's"})  

    Miscright:Toggle({
        Name = "Disable When In Combat",
        Default = false,
        Callback = function(Value)
            StopInCombat = Value

            while task.wait() and StopInCombat do
                if game.Players.LocalPlayer.PlayerGui.MainGui.Utility.CombatTag.Visible then
                    disableAllTraining()
                    task.wait(2)
                end
            end
        end
    },"Disable Trainings When In Combat")

    Miscright:Toggle({
        Name = "Disable When Knocked",
        Default = false,
        Callback = function(Value)
            StopKnocked = Value

            while task.wait() and StopKnocked do
                if game.Players.LocalPlayer.Character:FindFirstChild("Ragdolled").Value == true then
                    disableAllTraining()
                    task.wait(2)
                end
            end
        end
    },"Disable Trainings When Knocked")

    Miscright:Divider()

    Miscright:Header({Text = "ServerH / RJ"})  

    Miscright:Button({
        Name = "Serverhop to Lowest Server",
        Callback = function()
            local Api = "https://games.roblox.com/v1/games/"

            local _place = game.PlaceId
            local _servers = Api .. _place .. "/servers/Public?sortOrder=Asc&limit=100"
            function ListServers(cursor)
                local Raw = game:HttpGet(_servers .. ((cursor and "&cursor=" .. cursor) or ""))
                return httpService:JSONDecode(Raw)
            end

            local Server, Next
            repeat
                local Servers = ListServers(Next)
                Server = Servers.data[1]
                Next = Servers.nextPageCursor
            until Server

            TeleportService:TeleportToPlaceInstance(_place, Server.id, player)
        end
    })

    Miscright:Button({
        Name = "Serverhop to Random Server",
        Callback = function()
            local httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
            if httprequest then
                local servers = {}
                local PlaceID = game.PlaceId
                local req = httprequest({Url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true", PlaceID)})
                local body = httpService:JSONDecode(req.Body)

                if body and body.data then
                    for _, v in ipairs(body.data) do
                        if type(v) == "table" and v.playing < v.maxPlayers and v.id ~= game.JobId then
                            table.insert(servers, v.id)
                        end
                    end
                end

                if #servers > 0 then
                    TeleportService:TeleportToPlaceInstance(PlaceID, servers[math.random(1, #servers)], player)
                end
            end
        end
    })

    Miscright:Button({
        Name = "Rejoin",
        Callback = function()

            TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, player)
        end
    })

    Miscleft:Divider()

    Miscleft:Header({Text = "Disable/Sleep Setting's"})  

    Miscleft:Label({Text = "Note: consider auto sleep as risky | Do Nothing is default"})  

    Miscleft:Toggle({
        Name = "Auto Panic",
        Default = false,
        Callback = function(Value)
            autopanic = Value

            function IsInCombat()
                local status

                local suc = pcall(function()
                    if game.Players.LocalPlayer:FindFirstChild("PlayerGui") then
                        if game.Players.LocalPlayer.PlayerGui:FindFirstChild("MainGui") then
                            status = game.Players.LocalPlayer.PlayerGui.MainGui.Utility.CombatTag.Visible
                        end
                    end
                end)

                if not suc then
                    status = nil
                end

                return status
            end

            while task.wait() and autopanic do
                if IsInCombat() == true and autopanic then
                    disableAllTraining()
                    game.Players.LocalPlayer.Character.Humanoid:UnequipTools()

                    if macroruin then
                        webhook("Auto Panic", CurrentGanker .. " activated Combat Sequence!")
                    end

                    task.wait(1)

                    task.spawn(function()
                        while task.wait(panicdelay) and autopanic do
                            pcall(function()
                                local chance = math.random(1, 4)
                                if chance >= 2 then
                                    panicangle = panicangle * -1
                                end

                                game.Workspace.CurrentCamera.CFrame = game:GetService("Workspace").CurrentCamera.CFrame * CFrame.Angles(0, math.rad(panicangle), 0)
                                panicangle = math.random(35, 90)
                            end)
                        end
                    end)

                    task.spawn(function()
                        shared.AllowSprinting = false
                        function IsDraining()
                            local lastStamVal = game.Players.LocalPlayer.Character.CurrentStamina.Value

                            task.wait(0.5)
                            if lastStamVal > game.Players.LocalPlayer.Character.CurrentStamina.Value then
                                return true
                            end
                            return false
                        end

                        while task.wait(0.1) and autopanic do
                            pcall(function()
                                local actionscript = getsenv(game:GetService("Players").LocalPlayer.Backpack.LocalS)
                                local StamPercent = (game.Players.LocalPlayer.Character.CurrentStamina.Value / game.Players.LocalPlayer.Character.MaxStamina.Value) * 100
                                local LowStam = ministam

                                if isrunning == false and CurrentRegening == false and shared.AllowSprinting then
                                    actionscript.runPrompt()
                                    isrunning = true
                                    task.wait(1)
                                elseif isrunning == true and shared.AllowSprinting then
                                    repeat
                                        StamPercent = (game.Players.LocalPlayer.Character.CurrentStamina.Value / game.Players.LocalPlayer.Character.MaxStamina.Value) * 100
                                        task.wait()
                                    until CurrentRegening == true or StamPercent == 100 or autopanic == false or shared.AllowSprinting == false or IsDraining() == false

                                    if StamPercent <= ministam or shared.AllowSprinting == false or autopanic == false or CurrentRegening == true then
                                        actionscript.stopSprint()
                                    end
                                    isrunning = false
                                elseif isrunning == true and shared.AllowSprinting == false then
                                    actionscript.stopSprint()
                                    isrunning = false
                                end
                            end)
                        end

                        shared.AllowSprinting = false
                    end)

                    repeat
                        task.wait()
                        pcall(function()
                            panicstamcheck()

                            if game.Players.LocalPlayer.Character.Humanoid.MoveDirection == Vector3.new(0, 0, 0) then
                                automacrosprint()
                            else
                                panicdash()
                            end
                        end)
                    until IsInCombat() == false or autopanic == false
                    shared.AllowSprinting = false
                    if autopanic then
                        if macroruin then
                            webhook("Auto Panic", "Logged Safely!")
                            task.wait()
                        end

                        game:shutdown()
                        return
                    end
                end
            end
        end
    },"Auto Panic")

    Miscleft:Toggle({
        Name = "Auto Disable Macros",
        Default = false,
        Callback = function(Value)
            AutoStop = Value
        end
    },'Auto Disable Macro')
    
    Miscleft:Slider({
        Name = "Stamina Below %",
        Minimum = 0,
        Maximum = 100,
        Default = 20,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(Value)
            staminabelowpercent = Value
        end
    },"Stamina Below %")

    Miscleft:Slider({
        Name = "Fatigue % to Stop",
        Minimum = 0,
        Maximum = 100,
        Default = FatigueToStop,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(Value)
            FatigueToStop = Value
        end
    },"Fatigue % To Stop")

    Miscleft:Dropdown({
        Name = "When Macro Stopped",
        Options = { "Do Nothing", "Log/Leave game", "Auto Sleep & Log", "Auto Sleep & Continue" },
        Callback = function(Value)
            if Value == "Do Nothing" then
                LogOnFatigued = false
                autosleepRes = false
                autosleepLog = false
            elseif Value == "Log/Leave game" then
                LogOnFatigued = true
                autosleepRes = false
                autosleepLog = false
            elseif Value == "Auto Sleep & Log" then
                LogOnFatigued = false
                autosleepRes = false
                autosleepLog = true
            elseif Value == "Auto Sleep & Continue" then
                LogOnFatigued = false
                autosleepRes = true
                autosleepLog = false
            else
                LogOnFatigued = false
                autosleepRes = false
                autosleepLog = false
            end
        end
    },"When Macro Stopped")



    Miscleft:Divider()

    Miscleft:Header({Text = "ESP's"})  

    Miscleft:Toggle({
        Name = "Player ESP",
        Default = false,
        Callback = function(Value)
            ESP = Value
    
            if ESP then
                for _, v in pairs(game.Players:GetPlayers()) do
                    esp(v)
                end
    
                local plrconnection
                plrconnection = game.Players.PlayerAdded:Connect(function(plr)
                    if ESP == false then
                        plrconnection:Disconnect()
                        return
                    end
                    esp(plr)
                end)
    
                game.Players.PlayerRemoving:Connect(function(plr)
                    removeESP(plr)
                end)
            else
                for _, v in pairs(game.Players:GetPlayers()) do
                    removeESP(v)
                end
            end
        end
    },"Player ESP")

    Miscleft:Toggle({
        Name = "Candy ESP",
        Default = false,
        Callback = function(Value)
            CESP = Value
            while CESP do  task.wait(5)
                Candyesp()
            end
            RemoveAllESP()
        end
    },"Candy ESP")

    Miscleft:Slider({
        Name = "ESP Distance",
        Minimum = 0,
        Maximum = 10000,
        Default = 0,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(Value)
            ESPDistance = Value
        end
    },"ESP Distance")
    
    Miscleft:Divider()

    Miscleft:Header({Text = "Starve"})  

    Miscleft:Toggle({
        Name = "Auto Starve",
        Default = false,
        Callback = function(Value)
            autostarve = Value

            while task.wait() and autostarve do
                local actionscript = getsenv(game:GetService("Players").LocalPlayer.Backpack.LocalS)
                local StamPercent = (game.Players.LocalPlayer.Character.CurrentStamina.Value / game.Players.LocalPlayer.Character.MaxStamina.Value) * 100

                if StamPercent >= staminabelowpercent and ASisrunning == false and game.Players.LocalPlayer.Character:FindFirstChild("Ragdolled").Value == false then
                    actionscript.runPrompt()
                    ASisrunning = true
                elseif StamPercent <= staminabelowpercent and ASisrunning then
                    task.wait(0.1)
                    ASisrunning = false
                elseif StamPercent == 100 then
                    task.wait(0.5)
                    if StamPercent == 100 then
                        ASisrunning = false
                    end
                end
            end
        end
    },"Auto Starve")

    if hookmetamethod then
        Backup = hookmetamethod(
            Mouse,
            "__index",
            newcclosure(function(self, idx)
                if idx == "Target" and restockactive and restockpart ~= nil and autojobs then
                    return restockpart
                end

                return Backup(self, idx)
            end)
        )
    end

    Riskyleft:Header({Text = "Jobs"})  

    Riskyleft:Toggle({
        Name = "Auto Job",
        Default = false,
        Callback = function(Value)
		autojobs = Value

		if autojobs == false then
			_G.OngoingPath = false
		end

		local og = Vector3.new(2.6999998092651367, 45.04999923706055, 222.13999938964844)
		local new = Vector3.new(2.7, 45.05, 73.14)
		local AUTOJOBBARRIERS = {}
		AUTOJOBBARRIERS[1] = Instance.new("Part", workspace)
		AUTOJOBBARRIERS[1].Position = Vector3.new(-252.3034210205078, 54.62002182006836, -584.091064453125)
		AUTOJOBBARRIERS[1].Orientation = Vector3.new(0, 0, 0)
		AUTOJOBBARRIERS[1].Size = Vector3.new(28.020000457763672, 21.84000015258789, 3.559999942779541)
		AUTOJOBBARRIERS[1].Anchored = true
		AUTOJOBBARRIERS[1].CanCollide = true
		AUTOJOBBARRIERS[1].Transparency = 1
		AUTOJOBBARRIERS[2] = Instance.new("Part", workspace)
		AUTOJOBBARRIERS[2].Position = Vector3.new(287.8071594238281, 47.193782806396484, -902.21875)
		AUTOJOBBARRIERS[2].Orientation = Vector3.new(0, 0, 0)
		AUTOJOBBARRIERS[2].Size = Vector3.new(2.6999998092651367, 45.04999923706055, 222.13999938964844)
		AUTOJOBBARRIERS[2].Anchored = true
		AUTOJOBBARRIERS[2].CanCollide = true
		AUTOJOBBARRIERS[2].Transparency = 1
		AUTOJOBBARRIERS[4] = Instance.new("Part", workspace)
		AUTOJOBBARRIERS[4].Position = Vector3.new(-285.6453552246094, 48.400028228759766, -564.8450927734375)
		AUTOJOBBARRIERS[4].Orientation = Vector3.new(0, -30, 0)
		AUTOJOBBARRIERS[4].Size = Vector3.new(6.940000534057617, 10.199999809265137, 7.690000057220459)
		AUTOJOBBARRIERS[4].Anchored = true
		AUTOJOBBARRIERS[4].CanCollide = true
		AUTOJOBBARRIERS[4].Transparency = 1
		AUTOJOBBARRIERS[5] = Instance.new("Part", workspace)
		AUTOJOBBARRIERS[5].Position = Vector3.new(-306.9322204589844, 51.81392288208008, -615.2486572265625)
		AUTOJOBBARRIERS[5].Orientation = Vector3.new(0, 90, 0)
		AUTOJOBBARRIERS[5].Size = Vector3.new(34.63999938964844, 15.630000114440918, 5.739999294281006)
		AUTOJOBBARRIERS[5].Anchored = true
		AUTOJOBBARRIERS[5].CanCollide = true
		AUTOJOBBARRIERS[5].Transparency = 1
		AUTOJOBBARRIERS[6] = Instance.new("Part", workspace)
		AUTOJOBBARRIERS[6].Position = Vector3.new(-276.83843994140625, 51.203548431396484, -580.1591796875)
		AUTOJOBBARRIERS[6].Orientation = Vector3.new(0, 0, 0)
		AUTOJOBBARRIERS[6].Size = Vector3.new(2.9099998474121094, 14.970000267028809, 2.179999828338623)
		AUTOJOBBARRIERS[6].Anchored = true
		AUTOJOBBARRIERS[6].CanCollide = true
		AUTOJOBBARRIERS[6].Transparency = 1
		AUTOJOBBARRIERS[8] = Instance.new("Part", workspace)
		AUTOJOBBARRIERS[8].Position = Vector3.new(314.088134765625, 47.193782806396484, -790.2724609375)
		AUTOJOBBARRIERS[8].Orientation = Vector3.new(0, -89, 0)
		AUTOJOBBARRIERS[8].Size = Vector3.new(2.6999998092651367, 45.04999923706055, 55.47999954223633)
		AUTOJOBBARRIERS[8].Anchored = true
		AUTOJOBBARRIERS[8].CanCollide = true
		AUTOJOBBARRIERS[8].Transparency = 1
		AUTOJOBBARRIERS[9] = Instance.new("Part", workspace)
		AUTOJOBBARRIERS[9].Position = Vector3.new(287.8071594238281, 47.193782806396484, -671.853759765625)
		AUTOJOBBARRIERS[9].Orientation = Vector3.new(0, 0, 0)
		AUTOJOBBARRIERS[9].Size = Vector3.new(2.6999998092651367, 45.04999923706055, 218.58999633789062)
		AUTOJOBBARRIERS[9].Anchored = true
		AUTOJOBBARRIERS[9].CanCollide = true
		AUTOJOBBARRIERS[9].Transparency = 1
		AUTOJOBBARRIERS[10] = Instance.new("Part", workspace)
		AUTOJOBBARRIERS[10].Position = Vector3.new(314.088134765625, 47.193782806396484, -779.8624877929688)
		AUTOJOBBARRIERS[10].Orientation = Vector3.new(0, -89, 0)
		AUTOJOBBARRIERS[10].Size = Vector3.new(2.6999998092651367, 45.04999923706055, 55.47999954223633)
		AUTOJOBBARRIERS[10].Anchored = true
		AUTOJOBBARRIERS[10].CanCollide = true
		AUTOJOBBARRIERS[10].Transparency = 1
		AUTOJOBBARRIERS[11] = Instance.new("Part", workspace)
		AUTOJOBBARRIERS[11].Position = Vector3.new(-278.10223388671875, 51.81392288208008, -600.8236694335938)
		AUTOJOBBARRIERS[11].Orientation = Vector3.new(0, 0, 0)
		AUTOJOBBARRIERS[11].Size = Vector3.new(63.4900016784668, 15.630000114440918, 5.739999294281006)
		AUTOJOBBARRIERS[11].Anchored = true
		AUTOJOBBARRIERS[11].CanCollide = true
		AUTOJOBBARRIERS[11].Transparency = 1
		AUTOJOBBARRIERS[98] = Instance.new("Part", workspace)
		AUTOJOBBARRIERS[98].Position = Vector3.new(-1041.891, 59.14, -327.758)
		AUTOJOBBARRIERS[98].Orientation = Vector3.new(0, 0, 0)
		AUTOJOBBARRIERS[98].Size = Vector3.new(59, 32, 186)
		AUTOJOBBARRIERS[98].Anchored = true
		AUTOJOBBARRIERS[98].CanCollide = true
		AUTOJOBBARRIERS[98].Transparency = 1
		AUTOJOBBARRIERS[99] = Instance.new("Part", workspace)
		AUTOJOBBARRIERS[99].Position = Vector3.new(346.556, 25.2, -784.352)
		AUTOJOBBARRIERS[99].Orientation = Vector3.new(0, 90, 0)
		AUTOJOBBARRIERS[99].Size = Vector3.new(7, 1, 4)
		AUTOJOBBARRIERS[99].Anchored = true
		AUTOJOBBARRIERS[99].CanCollide = true
		AUTOJOBBARRIERS[99].Transparency = 1

		if autojobs then
			task.spawn(function()
				shared.AllowSprinting = false

				while task.wait(0.1) and autojobs do
					pcall(function()
						local actionscript = getsenv(game:GetService("Players").LocalPlayer.Backpack.LocalS)
						local StamPercent = (
							game.Players.LocalPlayer.Character.CurrentStamina.Value
							/ game.Players.LocalPlayer.Character.MaxStamina.Value
						) * 100
						local LowStam = ministam

						if isrunning == false and StamPercent >= 100 and shared.AllowSprinting then
							actionscript.runPrompt()
							isrunning = true
							task.wait(1)
						elseif isrunning == true and shared.AllowSprinting then
							repeat
								StamPercent = (
									game.Players.LocalPlayer.Character.CurrentStamina.Value
									/ game.Players.LocalPlayer.Character.MaxStamina.Value
								) * 100
								task.wait()
							until StamPercent <= LowStam
								or StamPercent == 100
								or autojobs == false
								or shared.AllowSprinting == false

							if StamPercent <= ministam or shared.AllowSprinting == false or autojobs == false then
								actionscript.stopSprint()
							end
							isrunning = false
						elseif isrunning == true and shared.AllowSprinting == false then
							actionscript.stopSprint()
							isrunning = false
						end
					end)
				end

				shared.AllowSprinting = false
			end)

            local char = player.Character
			local hum = char.Humanoid
			local PFS = game:GetService("PathfindingService")
			local HRP = char.HumanoidRootPart
			local pathStatus = Enum.PathStatus

			_G.currentPoint = nil
			_G.OngoingPath = false

			function createPath(point)
				local currentPath = PFS:FindPathAsync(HRP.Position, point)
				local pathExists = false

				if currentPath.Status == pathStatus.Success then
					pathExists = true
					_G.OngoingPath = true

					spawn(function()
						while pathExists and task.wait() and _G.currentPoint ~= nil and _G.OngoingPath and autojobs do
							local x, y = pcall(function()
								if (HRP.Position - _G.currentPoint).Magnitude > 5 then
									hum.WalkToPoint = _G.currentPoint
								end
							end)
							if not x then
								warn(y)
							end
						end
					end)

					local lastbroken = false
					local antisusdebounce = false
					local alreadychanced = false
					local oldhumanpos, lastupdate = nil, nil

					for i, v in pairs(currentPath:GetWaypoints()) do
						if _G.OngoingPath ~= true then
							return
						end

						if v.Action == Enum.PathWaypointAction.Jump then
							hum:ChangeState(Enum.HumanoidStateType.Jumping)
						end

						local part = Instance.new("Part")
						part.Shape = "Ball"
						part.Material = "Neon"
						part.Size = Vector3.new(0.6, 0.6, 0.6)
						part.Position = v.Position + Vector3.new(0, 6, 0)
						part.Anchored = true
						part.CanCollide = false
						part.Parent = game.Workspace

						local oldpos = HRP.Position
						local updatedelay = false

						function percentchance(x)
							if 100 * math.random() < x then
								return true
							else
								return false
							end
						end

						if lastupdate == nil then
							lastupdate = tick()
						else
							if (tick() - lastupdate) >= 2 then
								lastupdate = tick()
								oldhumawnpos = HRP.Position
							end
						end

						repeat
							task.wait()
							if autojobs == false then
								game.Debris:AddItem(part, 0.01)
								return
							end
							_G.currentPoint = v.Position

							if percentchance(3) and not antisusdebounce and alreadychanced == false then
								task.spawn(function()
									antisusdebounce = true
									shared.AllowSprinting = false
									task.wait(math.random(1, 3))
									if game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("JobGUI") then
										shared.AllowSprinting = true
									end
									antisusdebounce = false
								end)
							end
							alreadychanced = true

							if
								(HRP.Position - v.Position).Magnitude > 5
								and (HRP.Position - part.Position).Magnitude > 4
							then
								if oldpos ~= HRP.Position and not lastbroken and not updatedelay then
									task.spawn(function()
										updatedelay = true
										oldpos = HRP.Position
										task.delay(1, function()
											updatedelay = false
										end)
									end)
								elseif oldpos == HRP.Position and not lastbroken then
									oldpos = HRP.Position
									lastbroken = true
									break
								elseif oldpos == HRP.Position and lastbroken then
									task.spawn(function()
										task.wait(1)
										if oldpos == HRP.Position then
											hum:ChangeState(Enum.HumanoidStateType.Jumping)
											task.wait(1)
										end

										oldpos = HRP.Position
										lastbroken = false
									end)
								end
							elseif oldhumanpos ~= nil then
								if (HRP.Position - oldhumanpos).Magnitude <= 0.05 then
									hum:ChangeState(Enum.HumanoidStateType.Jumping)
									task.wait(1)
								end
							end
						until (HRP.Position - v.Position).Magnitude < PointRangeTilNext
							or (HRP.Position - part.Position).Magnitude < 5
							or _G.OngoingPath ~= true
							or autojobs == false
						game.Debris:AddItem(part, 0.01)
					end

					_G.OngoingPath = false
				elseif currentPath.Status ~= pathStatus.Success or _G.currentPoint == nil then
					pathExists = false
				end
			end

			local JobStuff = {
				["Convenience"] = {
					JB = workspace.Map.JobBoardModel,
					JBget = Vector3.new(-315.9144592285156, 47.29416275024414, -589.2377319335938),
				},
				["Japanese1"] = {
					JB = workspace.Map.JobBoardModel1,
					JBget = Vector3.new(-1167, 47, -223),
				},
			}

			while task.wait() and autojobs do
				if SelectedJob == nil or JobBoard == nil then
					repeat
						task.wait()
					until SelectedJob ~= nil and JobBoard ~= nil or autojobs == false
				end
				if game.Players.LocalPlayer.Character.Ragdolled.Value then
					disableAllTraining()
					if macroruin then
						webhook("Macro Notifier", "Knocked/Ragdolled while doing Auto Job. Auto Job turned off")
					end
					return
				end
				shared.AllowSprinting = false
				local JB = JobStuff[JobBoard].JB
				local JBget = JobStuff[JobBoard].JBget
				local jbdistance = (HRP.Position - JB.Board.Position).Magnitude
				local jobui = game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("JobGUI")
				local cleared = false

				if jobui == nil then
					if jbdistance <= 9 then
						maintenancechecks()
						repeat
							fireclickdetector(JB.ClickDetector)
							task.wait()
						until game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("JobGUI")
					end
				elseif jobui then
					if
						jobui.Frame.Title.Text:find("Restock") and SelectedJob == "Restock"
						or SelectedJob == "All" and jobui.Frame.Title.Text:find("Restock")
					then
						cleared = true
						AUTOJOBBARRIERS[2].Size = og
					elseif
						jobui.Frame.Title.Text:find("Cleaning") and SelectedJob == "Cleaning"
						or SelectedJob == "All" and jobui.Frame.Title.Text:find("Cleaning")
					then
						if JobBoard == "Convenience" then
							WalkTo(Vector3.new(-370, 47, -582))
						end

						broomjobactive = true

						repeat
							task.wait()

							local annoyingpart = game:GetService("Workspace").Jobs.BroomClean[JobBoard].Part9
							if annoyingpart.Transparency ~= 1 then
								broomjobpart = annoyingpart
								if JobBoard == "Convenience" then
									WalkTo(Vector3.new(-347, 47, -577))
								else
									WalkTo(annoyingpart.Position)
								end
								task.wait(0.1)
								if game.Players.LocalPlayer.Backpack:FindFirstChild("Broom") then
									game.Players.LocalPlayer.Character.Humanoid:EquipTool(
										game.Players.LocalPlayer.Backpack:FindFirstChild("Broom")
									)
									task.wait(0.1)
								end

								VIM:SendMouseButtonEvent(0, 500, 0, true, game, 1)
								task.wait(0.1)
								repeat
									task.wait()
								until annoyingpart.Transparency == 1
							end

							local v = BestBroomSpot()

							if v ~= nil then
								broomjobpart = v
								shared.currentPoint = nil
								WalkTo(v.Position)
								task.wait(0.1)
								if game.Players.LocalPlayer.Backpack:FindFirstChild("Broom") then
									game.Players.LocalPlayer.Character.Humanoid:EquipTool(
										game.Players.LocalPlayer.Backpack:FindFirstChild("Broom")
									)
									task.wait(0.1)
								end

								VIM:SendMouseButtonEvent(0, 500, 0, true, game, 1)
								task.wait(0.1)
								repeat
									task.wait()
								until v.Transparency == 1
							end

						until game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("JobGUI") == nil
							or autojobs == false

						broomjobactive = false

						if JobBoard == "Convenience" then
							game.Players.LocalPlayer.Character.Humanoid:MoveTo(Vector3.new(-370, 47, -582))
							game.Players.LocalPlayer.Character.Humanoid.MoveToFinished:Wait()
						end
						task.spawn(function()
							createPath(JBget)
						end)
					else
                        if getconnections then
						SimulateClick(jobui.Frame.Quit, "Function")
                        else
                        press(jobui.Frame.Quit)
                        end
					end
				end

				if cleared then
					local progress = tonumber(jobui.Frame.Progress.Text:split("/")[1]:split(":")[2])

					if progress == 0 then
						AUTOJOBBARRIERS[2].Size = og
						task.delay(math.random(1, 3), function()
							shared.AllowSprinting = true
						end)
						createPath(workspace.Jobs.SupplyDelivery[JobBoard].Part1.Position)
						shared.AllowSprinting = false
					elseif progress == 1 then
						AUTOJOBBARRIERS[2].Size = new
						task.delay(math.random(1, 3), function()
							shared.AllowSprinting = true
						end)
						createPath(workspace.Jobs.SupplyDelivery[JobBoard].Part2.Position)
						shared.AllowSprinting = false

						task.delay(math.random(1, 3), function()
							shared.AllowSprinting = true
						end)
						createPath(JBget)
						shared.AllowSprinting = false
					end
				end
			end
		end

		if autojobs == false then
			for i, v in pairs(AUTOJOBBARRIERS) do
				game.Debris:AddItem(v, 0.01)
			end
        end
    end,
    },"Auto Job")

    Riskyright:Header({Text = "Job Settings"})  

    Riskyright:Dropdown({
        Name = "Job Selector",
        Default = "Restock",
        Options = {"Restock", "Cleaning", "All"},
        Callback = function(Value)
            SelectedJob = Value
        end
    },"Job Selector")

    Riskyright:Dropdown({
        Name = "Job Board",
        Default = "Japanese1",
        Options = {"Japanese1", "Convenience"},
        Callback = function(Value)
            JobBoard = Value
        end
    },"Job Board")

    Riskyright:Label({Text = "If Supply Job Stop's Randomly Use P Mag Below"})  

    Riskyright:Slider({
        Name = "P Magnitude",
        Minimum = 0,
        Maximum = 30,
        Default = PointRangeTilNext,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(Value)
            PointRangeTilNext = Value
        end
    },"P Magnitude")

    
    Riskyleft:Divider()

    Riskyleft:Header({Text = "Roadworks"})  

    Riskyleft:Toggle({
        Name = "Auto Roadwork",
        Default = false,
        Callback = function(Value)
            Roadwork = Value

            if Roadwork then
                task.spawn(function()
                    while task.wait(0.1) and Roadwork do
                        local actionscript = getsenv(game:GetService("Players").LocalPlayer.Backpack.LocalS)
                        local StamPercent = (game.Players.LocalPlayer.Character.CurrentStamina.Value/ game.Players.LocalPlayer.Character.MaxStamina.Value) * 100
                        local LowStam = ministam

                        if RWCanSprint and Roadwork then
                            if isrunning == false and StamPercent >= 100 and RWCanSprint then
                                actionscript.runPrompt()
                                isrunning = true
                                task.wait(1)
                            elseif isrunning == true then
                                repeat
                                    StamPercent = (game.Players.LocalPlayer.Character.CurrentStamina.Value/ game.Players.LocalPlayer.Character.MaxStamina.Value) * 100
                                    task.wait()
                                until StamPercent <= LowStam
                                    or StamPercent == 100
                                    or Roadwork == false
                                    or RWCanSprint == false

                                if StamPercent < 100 or Roadwork == false or RWCanSprint == false then
                                    actionscript.stopSprint()
                                    maintenancechecks()
                                end
                                isrunning = false
                            end
                        end
                    end
                end)

                while task.wait() and Roadwork do
                    pcall(function()
                        local MyStorage = workspace:FindFirstChild(game.Players.LocalPlayer.Name .. " Storage")
                        local RWBuy = GetClosestRoadwork()

                        if game.Players.LocalPlayer.Backpack:FindFirstChild("Roadwork") == nil and game.Players.LocalPlayer.Character:FindFirstChild("Roadwork") == nil then
                            if RWBuy ~= nil then
                                RWCanSprint = true
                                moveToPoint(RWBuy.Head.Position)
                                RWCanSprint = false
                                task.wait(0.1)
                                fireclickdetector(RWBuy.ClickDetector)
                                task.wait(0.1)
                            end
                        else
                            if #MyStorage:GetChildren() < 1 then
                                if game.Players.LocalPlayer.Backpack:FindFirstChild("Roadwork") then
                                    game.Players.LocalPlayer.Character.Humanoid:EquipTool(
                                        game.Players.LocalPlayer.Backpack:FindFirstChild("Roadwork")
                                    )
                                    task.wait(0.1)
                                end
                                game.Players.LocalPlayer.Character:FindFirstChild("Roadwork"):Activate()
                            else
                                RWCanSprint = true
                                createPath(MyStorage:GetChildren()[1].Position)
                            end
                        end
                    end)
                end
            end
        end
    },"Auto Roadwork")

    Riskyright:Divider()

    Riskyright:Header({Text = "Food Risky Settings"})  

    Riskyright:Toggle({
        Name = "Auto Buy Foods Nearby",
        Default = false,
        Callback = function(Value)
            autobuyitem = Value

            if autobuyitem then
                function GetClosestItem()
                    local foodsnear = {}

                    for i, v in pairs(ItemTable) do
                        if (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.Head.Position).Magnitude <= v.ClickDetector.MaxActivationDistance then
                            table.insert(foodsnear, v)
                        end
                    end

                    return foodsnear
                end

                while autobuyitem and task.wait() do
                    local foodstobuy = GetClosestItem()

                    if autobuyitem and #GetClosestItem() > 0 then
                        for i, v in pairs(foodstobuy) do
                            if autobuyitem == false then
                                return
                            end
                            fireclickdetector(v.ClickDetector)
                            task.wait(0.23)
                        end
                    end
                end
            end
        end
    },"Auto Buy Food Nearby")

    Riskyright:Slider({
        Name = "Ammount To Buy",
        Minimum = 0,
        Maximum = 12,
        Default = 8,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(Value)
            buyammount = Value
        end
    },"AmmOfFoodToBuy")

    Riskyright:Toggle({
        Name = "Auto Buy Food If None",
        Default = false,
        Callback = function(Value)
            detectnofood = Value
        end
    }, 'Auto Buy Food')
    
    Riskyright:Dropdown({
        Name = "Food Store",
        Search = true,
        Required = false,
        Options = {"Cafe", "Bagel & Coffee","Ramen Stand"},
        Default = nil,
        Callback = function(Value)
            if Value == "Cafe" then
                selectedposition = Vector3.new(-1010, 48, -574)
        elseif Value == "Bagel & Coffee" then
            selectedposition = Vector3.new(-389, 48, -630)
        elseif Value == "Ramen Stand" then
            selectedposition = Vector3.new(809, 29, -522)
            end
        end,
    }, "FoodStore")

    Riskyright:Divider()

    Riskyright:Header({Text = "Supplement Risky Settings"})  

    Riskyright:Label({Text = "Works Off Auto Supplement Selection"})  
    Riskyright:Label({Text = "Also, Will Work Only If You Have Food"})  

    Riskyright:Slider({
        Name = "Ammount To Buy",
        Minimum = 1,
        Maximum = 12,
        Default = 8,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(Value)
            suppammount = Value
        end
    },"Amm Of Supp To Buy")

    Riskyright:Toggle({
        Name = "Auto Buy Supplements If None",
        Default = false,
        Callback = function(Value)
            buysupplement = Value
        end
    }, 'Auto Buy Supplement')
    

    Riskyright:Divider()

    Riskyright:Header({Text = "Roadwork Settings"})  

    Riskyright:Label({Text = "If Roadwork Stop Randomly Use CP Mag"})  

    Riskyright:Slider({
        Name = "CP Magnitude",
        Minimum = 0,
        Maximum = 30,
        Default = CPRangeTilNext,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(Value)
            CPRangeTilNext = Value
        end
    }, "CP Magnitude")

    function ScanTable(table, string)
        for i, v in pairs(table) do
            if v == string then
                return i
            end
        end

        return nil
    end

    function AztupElements()
        local LivingThings
        LivingThings = workspace:FindFirstChild("Live") or Instance.new("Model")
        local Events = game.ReplicatedStorage.Events
        getgenv().runningSpeed = 500
        local ATBdistance = 10
        local ATBrange = 100
        local ATBloop = nil
        local angleOffSet = CFrame.Angles(math.rad(-90), 0, 0)

        function UtilityFind(t, c)
            for i, v in next, t do
                if c(v, i) then
                    return v, i
                end
            end

            return nil
        end

        function parseKey(str)
            return UtilityFind({ str:byte(1, 9999) }, function(v)
                return v > 128
            end)
        end

        function getKey(script)
            if not script:IsA("LocalScript") then
                error("Expected a localscript got " .. script.ClassName)
            end
            local key

            local ran, env = pcall(getsenv, script)
            if not ran then
                return
            end

            for _, v in next, env do
                if typeof(v) == "function" then
                    for _, k in next, getupvalues(v) do
                        if typeof(k) == "string" and parseKey(k) then
                            key = k
                            break
                        end
                    end
                end
            end

            if key then
                return key
            end

            for _, v in next, script.Parent:GetDescendants() do
                local con = string.match(v.ClassName, "Button") and getconnections(v.MouseButton1Click)[1]
                    or getconnections(v.Changed)[1]
                if con and con.Function then
                    for _, k in next, getupvalues(v) do
                        if typeof(k) == "string" and parseKey(k) then
                            key = k
                            break
                        end
                    end

                    if key then
                        break
                    end
                end
            end
            return key
        end

        getgenv().getKey = getKey

        function getMobInRange(range)
            local plr = game.Players.LocalPlayer
            local char = plr.Character
            local inRange
            local closest = range
            for i, v in next, LivingThings:GetChildren() do
                if v ~= char then
                    if not game.Players:FindFirstChild(v.Name) then
                        if (v:FindFirstChild("HumanoidRootPart")) and char:FindFirstChild("HumanoidRootPart") then
                            if (v.HumanoidRootPart.Position - char.HumanoidRootPart.Position).magnitude <= closest then
                                inRange = v
                                closest = (v.HumanoidRootPart.Position - char.HumanoidRootPart.Position).magnitude
                                break
                            end
                        end
                    end
                end
            end

            return inRange
        end

        local plr = game.Players.LocalPlayer
        local char = plr.Character
        local getupvalue = debug.getupvalue
        local getupvalues = debug.getupvalues
        local getconstant = debug.getconstant
        local getconstants = debug.getconstants

        local parryAnims = {
            ["rbxassetid://7009320896"] = { ["Guardbreak"] = false },
            ["rbxassetid://5087462384"] = { ["Guardbreak"] = false },
            ["rbxassetid://6501739912"] = { ["Guardbreak"] = false },
            ["rbxassetid://6704457409"] = { ["Guardbreak"] = false },
            ["rbxassetid://6718814119"] = { ["Guardbreak"] = false },
            ["rbxassetid://5029356929"] = { ["Guardbreak"] = false },
            ["rbxassetid://6930761828"] = { ["Guardbreak"] = false },
            ["rbxassetid://5087464114"] = { ["Guardbreak"] = false },
            ["rbxassetid://5029359784"] = { ["Guardbreak"] = false },
            ["rbxassetid://7876039532"] = { ["Guardbreak"] = false },
            ["rbxassetid://5810497127"] = { ["Guardbreak"] = false },
            ["rbxassetid://7891093418"] = { ["Guardbreak"] = false },
            ["rbxassetid://6930758587"] = { ["Guardbreak"] = false },
            ["rbxassetid://5110868660"] = { ["Guardbreak"] = false },
            ["rbxassetid://7877241063"] = { ["Guardbreak"] = false },
            ["rbxassetid://6550835152"] = { ["Guardbreak"] = false },
            ["rbxassetid://6604546413"] = { ["Guardbreak"] = false },
            ["rbxassetid://6875783564"] = { ["Guardbreak"] = false },
            ["rbxassetid://5052660577"] = { ["Guardbreak"] = false },
            ["rbxassetid://7877246443"] = { ["Guardbreak"] = false },
            ["rbxassetid://8594975706"] = { ["Guardbreak"] = false },
            ["rbxassetid://5865529031"] = { ["Guardbreak"] = false },
            ["rbxassetid://5116608619"] = { ["Guardbreak"] = false },
            ["rbxassetid://5110454001"] = { ["Guardbreak"] = false },
            ["rbxassetid://5092035643"] = { ["Guardbreak"] = false },
            ["rbxassetid://5869781872"] = { ["Guardbreak"] = false },
            ["rbxassetid://5110500012"] = { ["Guardbreak"] = false },
            ["rbxassetid://5645707634"] = { ["Guardbreak"] = false },
            ["rbxassetid://6718812539"] = { ["Guardbreak"] = false },
            ["rbxassetid://6194195462"] = { ["Guardbreak"] = false },
            ["rbxassetid://5110724393"] = { ["Guardbreak"] = false },
            ["rbxassetid://6930759930"] = { ["Guardbreak"] = false },
            ["rbxassetid://5883810295"] = { ["Guardbreak"] = false },
            ["rbxassetid://4918348016"] = { ["Guardbreak"] = false },
            ["rbxassetid://5092037778"] = { ["Guardbreak"] = false },
            ["rbxassetid://5052449595"] = { ["Guardbreak"] = false },
            ["rbxassetid://5087459369"] = { ["Guardbreak"] = false },
            ["rbxassetid://5873100725"] = { ["Guardbreak"] = false },
            ["rbxassetid://6573164932"] = { ["Guardbreak"] = false },
            ["rbxassetid://6566644368"] = { ["Guardbreak"] = false },
            ["rbxassetid://7791575394"] = { ["Guardbreak"] = false },
            ["rbxassetid://6360102363"] = { ["Guardbreak"] = false },
            ["rbxassetid://6719137742"] = { ["Guardbreak"] = false },
            ["rbxassetid://5052435233"] = { ["Guardbreak"] = false },
            ["rbxassetid://7876328758"] = { ["Guardbreak"] = false },
            ["rbxassetid://6875731587"] = { ["Guardbreak"] = false },
            ["rbxassetid://5126044328"] = { ["Guardbreak"] = false },
            ["rbxassetid://7887536058"] = { ["Guardbreak"] = false },
            ["rbxassetid://6674659296"] = { ["Guardbreak"] = false },
            ["rbxassetid://7130763680"] = { ["Guardbreak"] = false },
            ["rbxassetid://5092042225"] = { ["Guardbreak"] = false },
            ["rbxassetid://5110453274"] = { ["Guardbreak"] = false },
            ["rbxassetid://6360098898"] = { ["Guardbreak"] = false },
            ["rbxassetid://6704318501"] = { ["Guardbreak"] = false },
            ["rbxassetid://5870608112"] = { ["Guardbreak"] = false },
            ["rbxassetid://5126071335"] = { ["Guardbreak"] = false },
            ["rbxassetid://6257267175"] = { ["Guardbreak"] = false },
            ["rbxassetid://10234589242"] = { ["Guardbreak"] = false }, --Tiger Hunt
            ["rbxassetid://10234603041"] = { ["Guardbreak"] = true }, --Snake Bite
            ["rbxassetid://10261951458"] = { ["Guardbreak"] = false }, --Dragon Claw
            ["rbxassetid://5594891491"] = { ["Guardbreak"] = false }, --Bear Hug
            ["rbxassetid://7819569583"] = { ["Guardbreak"] = false }, --BlastCore
            ["rbxassetid://4901795168"] = { ["Guardbreak"] = true }, --brawl GB
            ["rbxassetid://4973374984"] = { ["Guardbreak"] = true }, --Thai GB
            ["rbxassetid://5016575571"] = { ["Guardbreak"] = true }, --Karate gb
            ["rbxassetid://6169229434"] = { ["Guardbreak"] = true }, --Wrestling GB
            ["rbxassetid://5016611308"] = { ["Guardbreak"] = true }, --Sumo GB
            ["rbxassetid://6538829055"] = { ["Guardbreak"] = true }, --Taek GB
            ["rbxassetid://6585959296"] = { ["Guardbreak"] = true }, --Raishin GB
            ["rbxassetid://6194191510"] = { ["Guardbreak"] = true }, --Kure GB
            ["rbxassetid://4918356164"] = { ["Guardbreak"] = true }, --Boxing GB
            ["rbxassetid://6169361647"] = { ["Guardbreak"] = true }, --Karate GB
        }

        local guardBreakTable = {
            ["Corkscrew"] = true,
            ["Blast Core"] = true,
            ["Flying Knee"] = true,
            ["Axe Kick"] = true,
            ["Tiger Bite"] = true,
            ["Reverse Heel"] = true,
            ["Solid Strike"] = true,
            ["Jolt Hook"] = true,
            ["Flying Side Kick"] = true,
            ["Sumo Throw"] = true,
            ["Bear Hug"] = true,
            ["Shoulder Bash"] = true,
            ["Forearm Smash"] = true,
            ["Suplex"] = true,
            ["Elbow Drop"] = 0.1,
            ["Body Slam"] = true,
            ["Eye Slice"] = true,
        }

        function getStyle()
            if plr:FindFirstChild("Backpack") then
                return
            end
            if plr.Backpack:FindFirstChild("Style") then
                return plr.Backpack:FindFirstChild("Style").Parent
            elseif char:FindFirstChild("Style") then
                return char:FindFirstChild("Style").Parent
            end
            return nil
        end

        function blockAttack()
            local key = getKey(plr.Backpack.LocalS)
            if not key then
                return
            end

            plr.Backpack.Action:FireServer(key, "Block", { true })
        end

        function unblockAttack()
            local key = getKey(plr.Backpack.LocalS)
            if not key then
                return
            end

            plr.Backpack.Action:FireServer(key, "Block", { false })
        end

        function guardBreak()
            local key = getKey(plr.Backpack.LocalS)
            if not key then
                return
            end

            plr.Backpack.Action:FireServer(key, "GuardBreak", { true })
        end

        getgenv().autoBlockconnections = {}

        function autoParry(v)
            local plr = game.Players.LocalPlayer
            local char = plr.Character
            if v == char then
                return
            end

            local hrp = v:WaitForChild("HumanoidRootPart", 10)
            local animator = v:WaitForChild("Humanoid", 10) and v.Humanoid:WaitForChild("Animator", 10)
            if not hrp or not animator then
                return
            end

            getgenv().autoBlockconnections[#getgenv().autoBlockconnections + 1] = animator.AnimationPlayed:Connect(
                function(animationTrack)
                    local combat = getStyle()
                    local animation = animationTrack.Animation
                    local id = animation.AnimationId
                    local tool = v:FindFirstChildWhichIsA("Tool")
                    local willGuardbreak = tool and guardBreakTable[tool.Name]

                    local distance = hrp.Parent and char and (hrp.Position - char.HumanoidRootPart.Position).magnitude
                    if
                        not distance
                        or distance > getgenv().ParryRange
                        or not parryAnims[id]
                        or not (math.random(1, 100) <= getgenv().ParryChance)
                    then
                        return
                    end

                    if willGuardbreak or parryAnims[id]["Guardbreak"] then
                        if char:FindFirstChild("Blocking") then
                            return combat:Activate()
                        end --If we already blocking then just parry?

                        if parryAnims[id]["Guardbreak"] then --Calculate speed
                            task.wait(animationTrack.Speed / 10)
                        end

                        blockAttack()

                        if getgenv().AutoCounter then
                            guardBreak()
                        end --This allows us to counter while blocking

                        combat:Activate()
                        task.wait(0.4)
                        unblockAttack()
                        return --We dont want to do anything else if they guardbreak
                    end

                    blockAttack()

                    if getgenv().AutoCounter then
                        guardBreak()
                    end --This allows us to counter while blocking

                    task.wait(0.4)
                    unblockAttack()
                end
            )
        end

        Riskyright:Label({Text = "-THESE ALL FROM AZTUP HUB NOT MINE-"})  
        Riskyright:Label({Text = "(aztup hub source is public to anyone)"})  
    

        Riskyright:Toggle({
            Name = "Auto Parry",
            Default = false,
            Callback = function(Value)
                getgenv().AutoParry = Value

                if not getgenv().AutoParry then
                    for i, v in pairs(getgenv().autoBlockconnections) do
                        v:Disconnect()
                    end
                    return
                end

                for _, v in next, LivingThings:GetChildren() do
                    task.spawn(autoParry, v)
                end

                LivingThings.ChildAdded:Connect(autoParry)
            end
        })

        Riskyright:Slider({
            Name = "AP Range",
            Minimum = 1,
            Maximum = 30,
            Default = 18,
            DisplayMethod = "Round",
            Precision = 1,
            Callback = function(Value)
                getgenv().ParryRange = Value
            end
        })

        Riskyright:Slider({
            Name = "AP Chance",
            Minimum = 0,
            Maximum = 100,
            Default = 100,
            DisplayMethod = "Round",
            Precision = 1,
            Callback = function(Value)
                getgenv().ParryChance = Value
            end
        })

        Riskyright:Toggle({
            Name = "Auto Counter",
            Default = false,
            Callback = function(Value)
                getgenv().AutoCounter = Value
            end
        })

        Riskyright:Toggle({
            Name = "Attach to Back (Mobs)",
            Default = false,
            Callback = function(Value)
                getgenv().attachtoback = Value
        
                if ATBloop then
                    ATBloop:Disconnect()
                    ATBloop = nil
                end
        
                if not getgenv().attachtoback then
                    return
                end
        
                local plr = game.Players.LocalPlayer
                local char = plr.Character or plr.CharacterAdded:Wait()
                local lastcheck = 0
                local target = getMobInRange(ATBrange)
        
                ATBloop = game:GetService("RunService").Heartbeat:Connect(function()
                    if tick() - lastcheck >= 0.1 then
                        lastcheck = tick()
        
                        if target and target:FindFirstChild("KO") then
                            target = getMobInRange(ATBrange)
                            return
                        end
        
                        if not target or not target.Parent or not target:FindFirstChild("HumanoidRootPart") then
                            target = getMobInRange(ATBrange)
                            return
                        end
                    end
        
                    if char and char:FindFirstChild("HumanoidRootPart") and target then
                        char.HumanoidRootPart.CFrame = target.HumanoidRootPart.CFrame * (CFrame.new(0, ATBdistance, 1) * angleOffSet)
                        char.HumanoidRootPart.AssemblyLinearVelocity = Vector3.zero
                        char.HumanoidRootPart.AssemblyAngularVelocity = Vector3.zero
                    end
                end)
            end
        })

        Riskyright:Slider({
            Name = "ATB Distance",
            Minimum = 1,
            Maximum = 50,
            Default = 5,
            DisplayMethod = "Round",
            Precision = 1,
            Callback = function(Value)
                ATBdistance = Value
            end
        })

        Riskyright:Slider({
            Name = "ATB Range",
            Minimum = 0,
            Maximum = 100,
            Default = 100,
            DisplayMethod = "Round",
            Precision = 1,
            Callback = function(Value)
                ATBrange = Value
            end
        })


        local RhythmLooping = false

        Riskyright:Toggle({
            Name = "Inf Rhythm",
            Default = false,
            Callback = function(Value)
                getgenv().InfRhythm = Value
                if not RhythmLooping and getgenv().InfRhythm then
                    local key = getKey(game.Players.LocalPlayer.Backpack.LocalS)
                    if not key then
                        return print("KEY NOT FOUND")
                    end
                    local action = game.Players.LocalPlayer.Backpack.Action
                    action:FireServer(key, "RhythmStance", true)
                    RhythmLooping = true
                    repeat
                        task.wait(0.1)
                    until not getgenv().InfRhythm
                    RhythmLooping = false
                    action:FireServer(key, "RhythmStance", false)
                end
            end
        })

        Riskyright:Toggle({
            Name = "Inf Dash",
            Default = false,
            Callback = function(Value)
                getgenv().InfDash = Value

                if getgenv().InfDash then
                    local env = getsenv(game.Players.LocalPlayer.Backpack.LocalS)
                    repeat
                        task.wait(0.1)
                        setupvalue(env.Dash, 2, 3)
                        setupvalue(env.Dash, 3, "")
                    until not getgenv().InfDash
                end
            end
        })

        Riskyright:Toggle({
            Name = "No Stam Dash",
            Default = false,
            Callback = function(Value)
                getgenv().NoStamDash = Value
                local env = getsenv(game.Players.LocalPlayer.Backpack.LocalS)
                local constantNum = ScanTable(getconstants(env.Dash), "FireServer")
                if not getgenv().NoStamDash then
                    setconstant(getsenv(plr.Backpack.LocalS).Dash, constantNum, "FireServer")
                    return
                end
                setconstant(getsenv(plr.Backpack.LocalS).Dash, constantNum, "GetChildren")
            end
        })

        local InfTreadLoop = false

        Riskyright:Toggle({
            Name = "Inf Treadmill Stamina",
            Default = false,
            Callback = function(Value)
                getgenv().infTreadmillStamina = Value
            end
        })

        Riskyright:Bind({
            Name = "Inf Tread Bind",
            Default = Enum.KeyCode.Nine,
            Hold = false,
            Callback = function()
                if getgenv().infTreadmillStamina and not InfTreadLoop then
                    getgenv().infTreadmillStaminaEnabled = true
                    InfTreadLoop = true

                    Window:Notify({
                        Title = "Inf Treadmill Stamina",
                        Description = tostring(getgenv().infTreadmillStaminaEnabled),
                        Lifetime = 5
                    })

                    local key = getKey(plr.Backpack.LocalS)

                    if key then
                        local action = plr.Backpack.Action
                        repeat
                            action:FireServer(key, "RunToggle", { [1] = true, [2] = false })
                            task.wait()
                            action:FireServer(key, "RunToggle", { false })
                            task.wait(0.3)
                        until not getgenv().infTreadmillStaminaEnabled or not getgenv().infTreadmillStamina
                    end
                    InfTreadLoop = false
                    getgenv().infTreadmillStaminaEnabled = false
                elseif getgenv().infTreadmillStamina and InfTreadLoop then
                    getgenv().infTreadmillStaminaEnabled = false
                    Window:Notify({
                        Title = "Inf Treadmill Stamina",
                        Description = tostring(getgenv().infTreadmillStaminaEnabled),
                        Lifetime = 5
                    })
                end
            end
        })

    end

    Riskyright:Button({
        Name = "Tp To Berserk Event",
        Callback = function()
            game:GetService("TeleportService"):Teleport(7902997481)
        end
    })

    aztupInit = false

    if typeof(getgc) ~= "nil" then
        Riskyright:Button({
            Name = "Aztup MO Features",
            Callback = function()
                if not getgenv().ACBYPASS then
                    local banRemote
                    local remoteKey

                    local plr = game.Players.LocalPlayer
                    local getupvalues = debug.getupvalues
                    local getconstant = debug.getconstant
                    local getconstants = debug.getconstants

                    local ran, err = pcall(function()
                        
                        local SHITEXPLOIT = false

                        if not is_synapse_function then
                            SHITEXPLOIT = true
                        end

                        function initGC()
                            if SHITEXPLOIT then
                                remoteKey = ""
                                banRemote = game.ReplicatedStorage.Events:FindFirstChild("Detector")
                                return true
                            end
                            for _, v in next, getgc() do
                                local constants

                                local valid = pcall(function()
                                    if typeof(v) == "function" and islclosure(v) and not is_executor_closure(v) then
                                        constants = getconstants(v)
                                    end
                                end)

                                if constants ~= nil and valid then
                                    if ScanTable(constants, "F1ySuspicion") then
                                        banRemote = getconstant(v, ScanTable(getconstants(v), "F1ySuspicion") - 1)
                                        local remoteFolder = 24

                                        for _, uv in next, getupvalues(v) do
                                            if typeof(uv) == "string" then
                                                remoteKey = uv
                                            end
                                        end

                                        if getupvalue(v, remoteFolder + 1) ~= remoteKey then
                                            plr:Kick("Kicked you to protect your account, something in the game has changed.")
                                            return
                                        end

                                        if getupvalue(v, remoteFolder) and getupvalue(v, remoteFolder):FindFirstChild(banRemote) then
                                            banRemote = getupvalue(v, remoteFolder):FindFirstChild(banRemote)
                                            return true
                                        else
                                            return plr:Kick("Failed to grab ban remote")
                                        end
                                    end
                                end
                            end
                        end

                        repeat task.wait() until initGC()

                        if not banRemote or not remoteKey then
                            plr:Kick("Kicked you to protect your account, something in the game has changed.")
                            return
                        end

                        if banRemote.Name ~= "Detector" then
                            plr:Kick("Kicked you to protect your account, something in the game has changed.")
                            return
                        end

                        local oldNamecall
                        oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
                            local ncMethod = getnamecallmethod()
                            if (self == banRemote and (ncMethod == "FireServer" or ncMethod == "fireServer")) then
                                return
                            end
                            return oldNamecall(self, ...)
                        end)

                        local oldFireServer
                        oldFireServer = hookfunction(Instance.new("RemoteEvent").FireServer, function(self, ...)
                            if self == banRemote then
                                return
                            end
                            return oldFireServer(self, ...)
                        end)

                        getgenv().ACBYPASS = true
                    end)

                    if not ran then
                        warn(err)
                    end
                end

                if getgenv().ACBYPASS and not aztupInit then
                    aztupInit = true
                    AztupElements()
                end
            end
        })
    else
        Riskyright:Label({
            Text = "-- Unavailable on your Executor --"
        })
    end

    Statsleft:Header({Text = "Stats"})
    Statsright:Header({Text = "Stat Values :"})    


    Statsleft:Toggle({
        Name = "Auto Stat Check",
        Default = autojoin,
        Callback = function(state)
            statcheck = state
            if statcheck then
                shared.StatUpdate(StatTable())
            end
        end
    }, "AutoStatCheck")

    Statsleft:Toggle({
        Name = "Refresh Stat Check",
        Default = RefreshConstant,
        Callback = function(state)
            RefreshConstant = Value
            while RefreshConstant and task.wait(0.1) do
                shared.StatUpdate(StatTable())
            end
        end
    }, "RefreshStatCheck")

        if not shared.StatConfigured then
            task.spawn(function()
                shared.StatConfigured = true
                local updateDebounce = false
                game:GetService("ReplicatedStorage").Events.UpdateStats.OnClientEvent:Connect(function()
                    if not updateDebounce and statcheck then
                        updateDebounce = true
                        pcall(function()
                            shared.StatUpdate(StatTable())
                        end)
                        task.wait(0.1)
                        updateDebounce = false
                    end
                end)
            end)
        end
    end

    game.Players.PlayerAdded:Connect(function(v)
        if staffnotifier or copnotifier then
            Notifier(v)
        end

        if OPSNotifier and OPsData ~= nil then
            OPsData = httpService:JSONDecode(readfile("MOoppositions.json"))

            if table.find(OPsData, tostring(v.UserId)) then
                webhook(
                    "Opposition Detected",
                    "DisplayName: " .. v.DisplayName .. "\nUsername: " .. v.Name .. "\nUserId: " .. tostring(v.UserId)
                )
            end
        end
    end)

    task.spawn(function()
        local autohidetimer = os.clock() + 120
        local success = false
        if AutoHide then task.wait()

            UserInputService.InputBegan:Connect(function(input, gameProcessed)
                if not gameProcessed and input.KeyCode == Enum.KeyCode.RightControl then
                    macUI.Enabled = true
                end
            end)
            
            while os.clock() < autohidetimer do task.wait()
                while macUI and macUI.Enabled do
                    if togglemacUI() then
                        success = true
                        break
                    end
                    task.wait(.1)
                end
                if success then
                    print("auto hide successful")
                    break
                end
            end
        end
    end)
    

    MacLib:SetFolder("NorthHubMO")

    tabs.Settings:InsertConfigSection("Left")

    Window.onUnloaded(function()
        print("Unloaded!")
    end)

    tabs.Settings:Select()

    MacLib:LoadAutoLoadConfig()


end

if game.GameId == 5750914919 and getgenv().FISCH == true then

    while not player:FindFirstChild("PlayerGui") do
        task.wait()
    end

    while not player:FindFirstChild("Backpack") do
        task.wait()
    end

    local character = player.Character or player.CharacterAdded:Wait()

    while not character do task.wait()
        character = player.Character
    end

    local hrp = character:FindFirstChild("HumanoidRootPart")

    while not hrp do task.wait()
        hrp = character:FindFirstChild("HumanoidRootPart")
    end

    local humanoid = character:FindFirstChildOfClass("Humanoid")

    while not humanoid do task.wait()
        humanoid = character:FindFirstChildOfClass("Humanoid")
    end

    while not workspace:FindFirstChild("world") do
        task.wait()
    end

    while not workspace.world:FindFirstChild("spawns") do
        task.wait()
    end

    while not workspace:FindFirstChild("zones") do
        task.wait()
    end

    while not workspace.zones:FindFirstChild("fishing") do
        task.wait()
    end

    if not NetworkClient:FindFirstChild('ClientReplicator') then
        sendNotification("Error", "Current Server is Bugged, serverhopping..", 5)
        task.wait(3)
        serverhop()
    end

    playergui = player:FindFirstChild("PlayerGui")
    character = player.Character or player.CharacterAdded:Wait()
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoid = character:FindFirstChildOfClass("Humanoid")
    backpack = player.Backpack

    player.CharacterAdded:Connect(function(newCharacter)
        playergui = player:FindFirstChild("PlayerGui")
        character = newCharacter
        humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        humanoid = character:FindFirstChildOfClass("Humanoid")
        backpack = player.Backpack
    end)

    local MacLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/ImSa1f/dwadaw/refs/heads/main/vasst"))()

    local windowWidth = math.clamp(screenSize.X * 0.6, 350, 800)
    local windowHeight = math.clamp(screenSize.Y * 0.6, 200, 650)

    local Window = MacLib:Window({
        Title = "North Hub",
        Subtitle = "discord.gg/northhub",
        Size = UDim2.fromOffset(windowWidth, windowHeight),
        DragStyle = 1,
        DisabledWindowControls = {},
        ShowUserInfo = false,
        Keybind = Enum.KeyCode.RightControl,
        AcrylicBlur = true,
    })

    local macUI

    while not macUI do task.wait()
        for i,v in pairs(coreGui:GetDescendants()) do
            if v.Name == "ScreenGui" and v:FindFirstChild("Base") then
                macUI = v
            end
        end
        for i, x in ipairs(gethui():GetChildren()) do
            if x.Name == "ScreenGui" and x:FindFirstChild("Base") then
                macUI = x
            end
        end
    end

    if ReplicatedStorage:FindFirstChild("world") and ReplicatedStorage.world:FindFirstChild("version") and ReplicatedStorage.world.version.Value ~= "1.11" then
        Window:Notify({
            Title = "North Hub Notification",
            Description = "Game has updated be careful",
            Lifetime = 120,
            Scale = 2,
            Style = "Cancel",
        })
    end


    local function togglemacUI()
        if macUI then
            macUI.Enabled = not macUI.Enabled
            return true
        else
            return false
        end
    end

    local function createButtonUI()
        if not macUI or not macUI.Parent then
            error("macUI or macUI.Parent is not defined")
        end

        local buttonGui = Instance.new("ScreenGui")
        buttonGui.Name = "ButtonUI"
        buttonGui.Parent = macUI.Parent

        local backgroundFrame = Instance.new("Frame")
        backgroundFrame.Name = "BackgroundFrame"
        backgroundFrame.Size = UDim2.new(0, 60, 0, 60)
        backgroundFrame.Position = UDim2.new(1, -70, -0.03, -30)
        backgroundFrame.BackgroundColor3 = Color3.new(1, 0, 0)
        backgroundFrame.BorderSizePixel = 0
        backgroundFrame.BackgroundTransparency = 1 
        backgroundFrame.Parent = buttonGui

        local button = Instance.new("ImageButton")
        button.Name = "OpenButton"
        button.Image = "rbxassetid://107491175530182"
        button.Size = UDim2.new(0, 100, 0, 100)
        button.Position = UDim2.new(0.5, -45, 0.5, -45)
        button.BackgroundTransparency = 1
        button.Parent = backgroundFrame

        return button
    end


    if UserInputService.TouchEnabled then
        local button = createButtonUI()
        button.MouseButton1Click:Connect(togglemacUI)
    end


    local globalSettings = {
        UIBlurToggle = Window:GlobalSetting({
            Name = "UI Blur",
            Default = Window:GetAcrylicBlurState(),
            Callback = function(bool)
                Window:SetAcrylicBlurState(bool)
                Window:Notify({
                    Title = Window.Settings.Title,
                    Description = (bool and "Enabled" or "Disabled") .. " UI Blur",
                    Lifetime = 5
                })
            end,
        }),
        NotificationToggler = Window:GlobalSetting({
            Name = "Notifications",
            Default = Window:GetNotificationsState(),
            Callback = function(bool)
                Window:SetNotificationsState(bool)
                Window:Notify({
                    Title = Window.Settings.Title,
                    Description = (bool and "Enabled" or "Disabled") .. " Notifications",
                    Lifetime = 5
                })
            end,
        }),
        ShowUserInfo = Window:GlobalSetting({
            Name = "Show User Info",
            Default = Window:GetUserInfoState(),
            Callback = function(bool)
                Window:SetUserInfoState(bool)
                Window:Notify({
                    Title = Window.Settings.Title,
                    Description = (bool and "Showing" or "Redacted") .. " User Info",
                    Lifetime = 5
                })
            end,
        })
    }

    local tabGroups = {
        TabGroup1 = Window:TabGroup()
    }

    local tabs = {
        Main = tabGroups.TabGroup1:Tab({ Name = "Main", Image = "rbxassetid://18821914323" }),
        miscautos = tabGroups.TabGroup1:Tab({ Name = "Misc Autos", Image = "rbxassetid://18821914323" }),
        appraising = tabGroups.TabGroup1:Tab({ Name = "Appraising", Image = "rbxassetid://18821914323" }),
        teleports = tabGroups.TabGroup1:Tab({ Name = "Teleports", Image = "rbxassetid://18821914323" }),
        misc = tabGroups.TabGroup1:Tab({ Name = "Misc", Image = "rbxassetid://18821914323" }),
        webhook = tabGroups.TabGroup1:Tab({ Name = "Webhook", Image = "rbxassetid://18821914323" }),
        Settings = tabGroups.TabGroup1:Tab({ Name = "Settings", Image = "rbxassetid://10734950309" })
    }

    local sections = {
        mainleft = tabs.Main:Section({ Side = "Left" }),
        mainright = tabs.Main:Section({ Side = "Right" }),
        miscautosleft = tabs.miscautos:Section({ Side = "Left" }),
        miscautosright = tabs.miscautos:Section({ Side = "Right" }),
        appraisingleft = tabs.appraising:Section({ Side = "Left" }),
        teleportsleft = tabs.teleports:Section({ Side = "Left" }),
        teleportsright = tabs.teleports:Section({ Side = "Right" }),
        miscleft = tabs.misc:Section({ Side = "Left" }),
        miscright = tabs.misc:Section({ Side = "Right" }),
        webhookleft = tabs.webhook:Section({ Side = "Left" }),
    }

    local mainleft = sections.mainleft
    local mainright = sections.mainright
    local miscautosleft = sections.miscautosleft
    local miscautosright = sections.miscautosright
    local appraiseleft = sections.appraisingleft
    local teleportsleft = sections.teleportsleft
    local teleportsright = sections.teleportsright
    local miscleft = sections.miscleft
    local miscright = sections.miscright
    local webhookleft = sections.webhookleft

    tool_table = {"Flimsy Rod","Training Rod","Plastic Rod","Carbon Rod","Fast Rod","Lucky Rod","Mythical Rod","Fortune Rod","Magma Rod","Rapid Rod","Magnet Rod","Steady Rod","Fungal Rod","Nocturnal Rod","Long Rod","Midas Rod","Kings Rod","Destiny Rod","Executive Rod", "Haunted Rod"}
    bait_table = {"Bagel","Worm","Insect","Maggot","Squid","Seaweed","Flakes","Shrimp","Magnet","Truffle Worm","Minnow","Coal","Rapid Catcher","Super Flakes","Night Shrimp","Fish Head","Weird Algae"}

    enchanting = false
    treasuring = false
    crabbing = false
    buyingluck = false
    tpingtofishevent = false
    usingtotem = false
    reeling = false
    swappingrod = false

    SelectedBait = "Bagel"

    local function tosigma_ornot_tosigma(color1, color2, tolerance)
        tolerance = tolerance or 0.1
        return math.abs(color1.R - color2.R) <= tolerance and
        math.abs(color1.G - color2.G) <= tolerance and
        math.abs(color1.B - color2.B) <= tolerance
    end

    local perfectcastchance = 35
    local amazingcastchance = 50
    local greatcastchance = 15

    local function adjustChances()
        perfectcastchance = math.Minimum(perfectcastchance, 100)

        local remaining = 100 - perfectcastchance
        amazingcastchance = math.Minimum(amazingcastchance, remaining)

        greatcastchance = remaining - amazingcastchance
    end

    local function nigmamalechance()
        local roll = Random.new():NextNumber(1,100)
        if roll <= perfectcastchance then
            return "Perfect"
        elseif roll <= perfectcastchance + amazingcastchance then
            return "Amazing"
        else
            return "Great"
        end
    end

    local screenWidth = workspace.Camera.ViewportSize.X
    local screenHeight = workspace.Camera.ViewportSize.Y

    local clickX = math.floor(screenWidth * 0.001)
    local clickY = math.floor(screenHeight * 0.001)

    local clickX2 = math.floor(screenWidth * 0.5)
    local clickY2 = math.floor(screenHeight * 0.5)

    mainleft:Header({
        Text = "Auto Fishing"
    })

    mainleft:Toggle({
        Name = "Auto Fishing Legit (Cast)",
        Default = autofishlegit4,
        Callback = function(t)
            autofishlegit4 = t
            local connection

            local function clientSideDetection()
                local reelGui = player.PlayerGui:FindFirstChild("reel")
                if not reelGui then return end
                
                local bar = reelGui:FindFirstChild("bar")
                if not bar then return end

                local playerbar = bar:FindFirstChild("playerbar")
                local fish = bar:FindFirstChild("fish")
                
                if playerbar and fish then
                    playerbar.Position = fish.Position
                end
            end

            local function startTracking()
                if connection then connection:Disconnect() end
                connection = RunService.RenderStepped:Connect(clientSideDetection)
            end

            local function stopTracking()
                if connection then
                    connection:Disconnect()
                    connection = nil
                end
            end
            
            while autofishlegit4 do task.wait(.3)
                pcall(function()
                    local weapon, lure = nil, nil
                    local reelGui = player.PlayerGui:FindFirstChild("reel")
                    local shakeui = player.PlayerGui:FindFirstChild("shakeui")
                    local Progress = false
                    reeling = false

                    if not usingtotem and not swappingrod then
                        for _, v in pairs(character:GetChildren()) do
                            if v.Name:find("Rod") and v:IsA("Tool") then
                                weapon = v
                                if weapon.values then
                                    lure = weapon.values.lure
                                end
                            end
                        end

                        if weapon and bobber and bobberz.Value ~= nil then
                            if weapon.values.lure.Value <= 1 then
                                vim:SendMouseButtonEvent(clickX, clickY, 0, true, game, 1)
                                task.wait(.4)
                                vim:SendMouseButtonEvent(clickX, clickY, 0, false, game, 0)
                                task.wait(3)
                            end
                        end

                        if weapon and not reelGui and not shakeui then
                            if lure.Value <= 0 and not Progress then
                                vim:SendMouseButtonEvent(clickX, clickY, 0, true, game, 1)
                                task.wait(.4)
                                vim:SendMouseButtonEvent(clickX, clickY, 0, false, game, 0)
                                Progress = true
                                task.wait(1)
                            end
                        end

                        task.spawn(function()
                            while player.PlayerGui:FindFirstChild("shakeui") do task.wait(shakespeed)
                                shakeui = player.PlayerGui:FindFirstChild("shakeui")
                                local button = shakeui and shakeui:FindFirstChild("safezone") and shakeui.safezone:FindFirstChild("button")
                                local ripple = button and button:FindFirstChild("ripple")

                                if button and ripple then
                                    button.AnchorPoint = Vector2.new(0.5, 0.5)
                                    button.Position = UDim2.new(0.5, 0, 0.5, 0)
                                    ripple.AnchorPoint = Vector2.new(0.5, 0.5)
                                    ripple.Position = UDim2.new(0.5, 0, 0.5, 0)

                                    local absPos = ripple.AbsolutePosition
                                    local absSize = ripple.AbsoluteSize
                                    vim:SendMouseButtonEvent(clickX2, clickY2, 0, true, game, 1)
                                    vim:SendMouseButtonEvent(clickX2, clickY2, 0, false, game, 0)
                                end
                            end
                        end)

                        if weapon and weapon.values.bite.Value then
                            reeling = true
                            if Random.new():NextNumber(1,100) <= breakreelchance and breakreelchance > 0 then
                                while weapon and weapon.values.bite.Value do
                                    task.wait()
                                end
                            else
                                if Random.new():NextNumber(1,100) <= catchchance and catchchance > 0 then
                                    while weapon and weapon.values.bite.Value do task.wait()
                                        startTracking()
                                    end
                                else
                                    while tosigma_ornot_tosigma(player.PlayerGui.reel.bar.playerbar.BackgroundColor3, Color3.new(1, 1, 1)) or
                                    tosigma_ornot_tosigma(player.PlayerGui.reel.bar.playerbar.BackgroundColor3, Color3.new(0.945098, 0.945098, 0.945098)) do task.wait()
                                        if not tosigma_ornot_tosigma(player.PlayerGui.reel.bar.playerbar.BackgroundColor3, Color3.new(1, 1, 1)) and
                                        not tosigma_ornot_tosigma(player.PlayerGui.reel.bar.playerbar.BackgroundColor3, Color3.new(0.945098, 0.945098, 0.945098)) then
                                            task.wait(Random.new():NextNumber(1, 1.5))
                                        end
                                    end
                                    while weapon and weapon.values.bite.Value do task.wait()
                                        startTracking()
                                    end
                                end
                            end
                        else
                            stopTracking()
                            reeling = false
                        end
                    end
                end)
                task.wait(1)
            end
            stopTracking()
        end
    }, "autofishlegitcast")

    mainleft:Toggle({
        Name = "Auto Fishing Legit (No Cast)",
        Default = autofishlegit,
        Callback = function(t)
            autofishlegit = t
            local connection

            local function clientSideDetection()
                local reelGui = player.PlayerGui:FindFirstChild("reel")
                if not reelGui then return end

                local bar = reelGui:FindFirstChild("bar")
                if not bar then return end

                local playerbar = bar:FindFirstChild("playerbar")
                local fish = bar:FindFirstChild("fish")

                if playerbar and fish then
                    playerbar.Position = fish.Position
                end
            end

            local function startTracking()
                if connection then connection:Disconnect() end
                connection = RunService.RenderStepped:Connect(clientSideDetection)
            end

            local function stopTracking()
                if connection then
                    connection:Disconnect()
                    connection = nil
                end
            end

            while autofishlegit do task.wait(.3)
                pcall(function()
                    local weapon, lure = nil, nil
                    local reelGui = player.PlayerGui:FindFirstChild("reel")
                    local shakeui = player.PlayerGui:FindFirstChild("shakeui")
                    local Progress = false
                    reeling = false

                    if not usingtotem and not swappingrod then
                        for _, v in pairs(character:GetChildren()) do
                            if v.Name:find("Rod") and v:IsA("Tool") then
                                weapon = v
                                if weapon.values then
                                    lure = weapon.values.lure
                                end
                            end
                        end

                        task.spawn(function()
                            while player.PlayerGui:FindFirstChild("shakeui") do task.wait(shakespeed)
                                shakeui = player.PlayerGui:FindFirstChild("shakeui")
                                local button = shakeui and shakeui:FindFirstChild("safezone") and shakeui.safezone:FindFirstChild("button")
                                local ripple = button and button:FindFirstChild("ripple")

                                if button and ripple then
                                    button.AnchorPoint = Vector2.new(0.5, 0.5)
                                    button.Position = UDim2.new(0.5, 0, 0.5, 0)
                                    ripple.AnchorPoint = Vector2.new(0.5, 0.5)
                                    ripple.Position = UDim2.new(0.5, 0, 0.5, 0)

                                    local absPos = ripple.AbsolutePosition
                                    local absSize = ripple.AbsoluteSize
                                    vim:SendMouseButtonEvent(clickX2, clickY2, 0, true, game, 1)
                                    vim:SendMouseButtonEvent(clickX2, clickY2, 0, false, game, 0)
                                end
                            end
                        end)

                        if weapon and weapon.values.bite.Value then
                            reeling = true
                            if Random.new():NextNumber(1,100) <= breakreelchance and breakreelchance > 0 then
                                while weapon and weapon.values.bite.Value do
                                    task.wait()
                                end
                            else
                                if Random.new():NextNumber(1,100) <= catchchance and catchchance > 0 then
                                    startTracking()
                                else
                                    while tosigma_ornot_tosigma(player.PlayerGui.reel.bar.playerbar.BackgroundColor3, Color3.new(1, 1, 1)) or
                                    tosigma_ornot_tosigma(player.PlayerGui.reel.bar.playerbar.BackgroundColor3, Color3.new(0.945098, 0.945098, 0.945098)) do task.wait()
                                        if not tosigma_ornot_tosigma(player.PlayerGui.reel.bar.playerbar.BackgroundColor3, Color3.new(1, 1, 1)) and
                                        not tosigma_ornot_tosigma(player.PlayerGui.reel.bar.playerbar.BackgroundColor3, Color3.new(0.945098, 0.945098, 0.945098)) then
                                            task.wait(Random.new():NextNumber(1, 1.5))
                                        end
                                    end
                                    while weapon and weapon.values.bite.Value do task.wait()
                                        startTracking()
                                    end
                                end
                            end
                        else
                            stopTracking()
                            reeling = false
                        end
                    end
                end)
                task.wait(1)
            end
            stopTracking()
        end
    }, "AutoFishLegit")

    local targetPosition = UDim2.new(0.5, 0, 0.5, 0)

    mainleft:Label({
        Text = "Auto Fishing (Recommend Setting Fishing Location)"
    })

    mainleft:Label({
        Text = "If this doesn't work for you, use legit auto fish"
    })

    mainleft:Toggle({
        Name = "Auto Fishing",
        Default = autofish,
        Callback = function(t)
            autofish = t
            while autofish do task.wait(.3)
                pcall(function()
                    local weapon, lure , bobber, bobberz = nil, nil, nil, nil
                    local reelGui = player.PlayerGui:FindFirstChild("reel")
                    local shakeui = player.PlayerGui:FindFirstChild("shakeui")
                    local Progress = false
                    local shouldreset = false
                    local resetFired = false
                    reeling = false

                    if not usingtotem and not swappingrod then
                        for _, v in pairs(backpack:GetChildren()) do
                            if v.Name:find("Rod") and v:IsA("Tool") then
                                humanoid:EquipTool(v)
                            end
                        end

                        for _, v in pairs(character:GetChildren()) do
                            if v.Name:find("Rod") and v:IsA("Tool") then
                                weapon = v
                                if weapon.values then
                                    lure = weapon.values.lure
                                end
                            end
                        end

                        for _, v in pairs(weapon:GetChildren()) do
                            if v.Name:find("bob") then
                                bobber = v
                                break
                            end
                        end

                        for _, v in pairs(weapon:GetDescendants()) do
                            if v.Name:find("bobberzone") then
                                bobberz = v
                                break
                            end
                        end

                        if weapon and bobber and bobberz.Value ~= nil and lure.Value < 0.5 then
                            task.wait(3)
                            if lure.Value <= 1 then
                                weapon.events.reset:FireServer()
                            end
                        end

                        while swappingrod or usingtotem do
                            task.wait()
                        end
                
                        if weapon and not reelGui and not shakeui then
                            if lure.Value <= 0 and not Progress then
                                local castType = nigmamalechance()
                                if castType == "Perfect" then
                                    weapon.events.cast:FireServer(Random.new():NextNumber(96.01, 100), 1)
                                elseif castType == "Amazing" then
                                    weapon.events.cast:FireServer(Random.new():NextNumber(80.01, 95.99), 1)
                                else
                                    weapon.events.cast:FireServer(Random.new():NextNumber(60.01, 79.99), 1)
                                end
                                Progress = true
                                task.wait(1)
                            end
                        end

                        while swappingrod or usingtotem do
                            task.wait()
                        end

                        task.spawn(function()
                            while player.PlayerGui:FindFirstChild("shakeui") do task.wait(shakespeed)
                                shakeui = player.PlayerGui:FindFirstChild("shakeui")
                                local button = shakeui and shakeui:FindFirstChild("safezone") and shakeui.safezone:FindFirstChild("button")
                                local ripple = button and button:FindFirstChild("ripple")

                                if button and ripple then
                                    button.AnchorPoint = Vector2.new(0.5, 0.5)
                                    button.Position = UDim2.new(0.5, 0, 0.5, 0)
                                    ripple.AnchorPoint = Vector2.new(0.5, 0.5)
                                    ripple.Position = UDim2.new(0.5, 0, 0.5, 0)
            
                                    local absPos = ripple.AbsolutePosition
                                    local absSize = ripple.AbsoluteSize
                                    vim:SendMouseButtonEvent(clickX2, clickY2, 0, true, game, 1)
                                    vim:SendMouseButtonEvent(clickX2, clickY2, 0, false, game, 0)
                                end
                            end
                        end)

                        while weapon.values.bite.Value and player.PlayerGui:FindFirstChild("reel") do task.wait()
                            reeling = true
                            local currentPosition = player.PlayerGui.reel.bar.fish.Position

                            if Random.new():NextNumber(1,100) <= breakreelchance and breakreelchance > 0 and currentPosition == targetPosition then
                                ReplicatedStorage.events.reelfinished:FireServer(Random.new():NextNumber(-1, -0.01), false)
                            elseif Random.new():NextNumber(1,100) <= catchchance and catchchance > 0 and currentPosition ~= targetPosition and player.PlayerGui:FindFirstChild("reel") then
                                ReplicatedStorage.events.reelfinished:FireServer(100, true)
                            elseif currentPosition ~= targetPosition and player.PlayerGui:FindFirstChild("reel") then
                                ReplicatedStorage.events.reelfinished:FireServer(100, false)
                            end
                            task.wait()
                        end
                    end
                end)
                task.wait(1)
            end
        end
    }, "AutoFish")

    mainleft:Divider()

    mainleft:Header({
        Text = "Fish Event Stuff"
    })

    local spotstofish = {"Megalodon", "Serpent", "Great White Shark", "Hammerhead Shark", "Whale Shark"}
    
    mainleft:Dropdown({
        Name = "Select Events to autofish",
        Search = true,
        Multi = true,
        Required = false,
        Options = spotstofish,
        Default = nil,
        Callback = function(selectedValues)
            selectedEvents = {}
            for event, isSelected in pairs(selectedValues) do
                if isSelected then
                    table.insert(selectedEvents, event)
                end
            end
        end,
    }, "SelectedEvents")

    while not ReplicatedStorage:FindFirstChild("playerstats") or not ReplicatedStorage.playerstats:FindFirstChild(player.Name) do
        task.wait()
    end

    local rods = ReplicatedStorage.playerstats[player.Name].Rods

    local rods_table = {}
    for _, rod in pairs(rods:GetChildren()) do
        if not table.find(rods_table, rod.Name) then
            table.insert(rods_table, rod.Name)
        end
    end

    local rodsdropdown = mainleft:Dropdown({
        Name = "Rod to swap to",
        Default = nil,
        Options = rods_table,
        Search = true,
        Multi = false,
        Required = false,
        Callback = function(t)
            selectedrodevent = t
        end
    }, "Selected_Rod")

    local rodsdropdown1 = mainleft:Dropdown({
        Name = "Rod to revert post-event",
        Default = nil,
        Options = rods_table,
        Search = true,
        Multi = false,
        Required = false,
        Callback = function(t)
            selectedrodevent1 = t
        end
    }, "Selected_Rod_Post_Event")

    mainleft:Button({
        Name = "Refresh Rods List",
        Callback = function()
            local rods_table = {}
            for _, rod in pairs(rods:GetChildren()) do
                if not table.find(rods_table, rod.Name) then
                    table.insert(rods_table, rod.Name)
                end
            end
            rodsdropdown:Refresh(rods_table)
            rodsdropdown1:Refresh(rods_table)
        end,
    })

    mainleft:Label({
        Text = "Auto-swaps to the selected rod during chosen fish events and reverts to the original rod if set"
    })

    mainleft:Toggle({
        Name = "Auto-swap rod on event",
        Default = false,
        Callback = function(state)
            autoswaprod = state
            local success, err = pcall(function()
                while autoswaprod do task.wait()
                    swappingrod = false
                    if tpingtofishevent then
                        if not backpack:FindFirstChild(selectedrodevent) and not character:FindFirstChild(selectedrodevent) and not reeling then
                            swappingrod = true
                            ReplicatedStorage.events.equiprod:FireServer(selectedrodevent)
                        end
                    end
                    if not tpingtofishevent then
                        if not backpack:FindFirstChild(selectedrodevent1) and not character:FindFirstChild(selectedrodevent1) and not reeling then
                            swappingrod = true
                            ReplicatedStorage.events.equiprod:FireServer(selectedrodevent1)
                        end
                    end
                end
            end)
            if not success then warn(err) end
        end
    }, "autoswaptoselectedrodwhenevent")

    task.spawn(function()
        while task.wait() do
            if player.PlayerGui:FindFirstChild("reel") then
                if not reeling then
                    reelTime = os.clock()
                    reeling = true
                elseif os.clock() - reelTime >= 30 then
                    if humanoid then
                        humanoid.Health = 0
                    end
                    break
                end
            else
                reeling = false
                reelTime = nil
            end
        end
    end)

    mainleft:Label({
        Text = "Recommended to use loop tp with this"
    })

    mainleft:Toggle({
        Name = "Auto Selected Fish Events",
        Default = false,
        Callback = function(state)
            selectedfishingevents = state
            local success, err = pcall(function()
                while selectedfishingevents do task.wait()
                    tpingtofishevent = false

                    for _, selectedEvent in ipairs(selectedEvents) do
                        for _, fishingSpot in ipairs(workspace.zones.fishing:GetChildren()) do
                            if fishingSpot and fishingSpot.Name and string.find(string.lower(fishingSpot.Name), string.lower(selectedEvent)) then
                                tpingtofishevent = true
    
                                if string.find(string.lower(fishingSpot.Name), "serpent") then
                                    humanoidRootPart.CFrame = fishingSpot.CFrame * CFrame.new(0, 15, 0)
                                else
                                    humanoidRootPart.CFrame = CFrame.new(fishingSpot.Position.X, 137, fishingSpot.Position.Z)
                                end
    
                                local playerPosition = humanoidRootPart.Position
                                baseplate.Position = Vector3.new(playerPosition.X, playerPosition.Y - 3, playerPosition.Z)
                                break
                            end
                            if not selectedfishingevents then
                                break
                            end
                        end
                        if tpingtofishevent then
                            break
                        end
                    end
                    if not selectedfishingevents then
                        tpingtofishevent = false
                    end
                end
            end)
            if not success then
                warn(err)
            end
        end
    }, "fishselectedevents")

    mainleft:Toggle({
        Name = "Auto Sundial Until Fish Event",
        Default = AutoSundialUntilMajorFishEvent,
        Callback = function(t)
            AutoSundialUntilMajorFishEvent = t
            while AutoSundialUntilMajorFishEvent do task.wait()
                foundmajorfishevent = false
                usingtotem = false

                while reeling do
                    task.wait()
                end

                for _, spotName in ipairs(spotstofish) do
                    for _, fishingSpot in ipairs(workspace.zones.fishing:GetChildren()) do
                        if string.find(string.lower(fishingSpot.Name), string.lower(spotName)) and AutoSundialUntilMajorFishEvent then
                            foundmajorfishevent = true
                        end
                    end
                end

                if ReplicatedStorage.world.cycle_timeshift.Value < 2 and not foundmajorfishevent and not reeling then
                    local tool = backpack:FindFirstChild("Sundial Totem")
                    if tool and not reeling then
                        usingtotem = true
                        humanoid:UnequipTools()
                        task.wait(.5)
                        humanoid:EquipTool(tool)
                        task.wait(.5)
                        tool:Activate()
                        task.wait(.5)
                        humanoid:UnequipTools()
                    end
                end

                while ReplicatedStorage.world.cycle_timeshift.Value > 2 or ReplicatedStorage.world.weather.Value:find("Aurora") or reeling do task.wait()
                    usingtotem = false
                end
            end
        end
    }, "AutoSundialUntilMajorFishEvent")

    local facingDirection = "North"

    local function getFacingCFrame(fishingCFrame, direction)
        if direction == "North" then
            return fishingCFrame * CFrame.Angles(0, math.rad(0), 0)
        elseif direction == "South" then
            return fishingCFrame * CFrame.Angles(0, math.rad(180), 0)
        elseif direction == "West" then
            return fishingCFrame * CFrame.Angles(0, math.rad(-90), 0)
        elseif direction == "East" then
            return fishingCFrame * CFrame.Angles(0, math.rad(90), 0)
        elseif direction == "Northeast" then
            return fishingCFrame * CFrame.Angles(0, math.rad(45), 0)
        elseif direction == "Northwest" then
            return fishingCFrame * CFrame.Angles(0, math.rad(-45), 0)
        elseif direction == "Southeast" then
            return fishingCFrame * CFrame.Angles(0, math.rad(135), 0)
        elseif direction == "Southwest" then
            return fishingCFrame * CFrame.Angles(0, math.rad(-135), 0)
        end
    end

    mainright:Header({
        Text = "Fishing Spot"
    })

    mainright:Button({
        Name = "Set Fishing Spot",
        Callback = function()
            fishing = humanoidRootPart.CFrame
            StarterGui:SetCore("SendNotification", {
                Title = "North Hub Notification",
                Text = "Current Position Set as Fishing Spot",
                Duration = 5
            })
        end
    })

    pcall(function()
        baseplate = workspace:FindFirstChild("parttt") or Instance.new("Part", workspace)
        baseplate.Name = "parttt"
        baseplate.Size = Vector3.new(10, 0.3, 10)
        baseplate.Anchored = true
        baseplate.CanCollide = true
        baseplate.Transparency = 0.5
    end)

    task.spawn(function()
        while task.wait() do
            pcall(function()
                if not workspace:FindFirstChild("parttt") then
                    baseplate = Instance.new("Part", workspace)
                    baseplate.Name = "parttt"
                    baseplate.Size = Vector3.new(10, 0.3, 10)
                    baseplate.Anchored = true
                    baseplate.CanCollide = true
                    baseplate.Transparency = 0.5
                end
                if workspace:FindFirstChild("parttt") then
                    baseplate = workspace:FindFirstChild("parttt")
                end
            end)
            task.wait(.1)
        end
    end)

    local function followPlayer()
        local playerPosition = humanoidRootPart.Position
        baseplate.Position = Vector3.new(playerPosition.X, playerPosition.Y - 3, playerPosition.Z)
    end

    task.spawn(function()
        pcall(function()
            while task.wait(.05) do
                if not looptp then
                    local playerPosition = humanoidRootPart.Position
                    baseplate.Position = Vector3.new(playerPosition.X, playerPosition.Y + 100, playerPosition.Z)
                end
            end
        end)
    end)

    local looptpwait = 1

    local lastTpTime = os.clock()

    mainright:Slider({
        Name = "Loop TP Delay",
        Minimum = 0,
        Maximum = 60,
        Default = looptpwait,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(t)
            looptpwait = t
        end
    }, "looptp_delay")

    mainright:Toggle({
        Name = "Loop Tp To Fishing Spot",
        Default = looptp,
        Callback = function(t)
            looptp = t
            if looptp then
                pcall(function()
                    connection3 = RunService.RenderStepped:Connect(function()
                        if not looptp then
                            connection3:Disconnect()
                            return
                        end

                        if os.clock() - lastTpTime >= looptpwait then
                            if not enchanting and not crabbing and not treasuring and not tpingtofishevent then
                                if fishing and not buyingluck and not collectingmeteor then
                                    humanoidRootPart.CFrame = getFacingCFrame(fishing, facingDirection)
                                    followPlayer()
                                    lastTpTime = os.clock()
                                end
                            end
                        end
                    end)
                end)
            end
        end,
    }, "looptp")

    mainright:Header({
        Text = "Auto Fishing Settings"
    })

    mainright:Label({
        Text = "Break Reel Chance"
    })

    breakreelchance = 0
    shakespeed = 0.1
    catchchance = 35

    mainright:Slider({
        Name = "",
        Minimum = 0,
        Maximum = 100,
        Default = 0,
        DisplayMethod = "Percent",
        Precision = 0,
        Callback = function(t)
            breakreelchance = t
        end
    }, "breakreel_chance")

    mainright:Label({
        Text = "Shake Speed"
    })

    mainright:Slider({
        Name = "",
        Minimum = 0,
        Maximum = 2,
        Default = 0.1,
        DisplayMethod = "Value",
        Precision = 1,
        Callback = function(t)
            shakespeed = t
        end
    }, "Shake_Speed")

    mainright:Label({
        Text = "Perfect Cast Chance"
    })

    mainright:Slider({
        Name = "",
        Minimum = 0,
        Maximum = 100,
        Default = perfectcastchance,
        DisplayMethod = "Percent",
        Precision = 0,
        Callback = function(t)
            perfectcastchance = t
            adjustChances()
        end
    }, "perfectcastchance")

    mainright:Label({
        Text = "Amazing Cast Chance"
    })

    mainright:Slider({
        Name = "",
        Minimum = 0,
        Maximum = 100,
        Default = amazingcastchance,
        DisplayMethod = "Percent",
        Precision = 0,
        Callback = function(t)
            amazingcastchance = t
            adjustChances()
        end
    }, "amazingcastchance")

    mainright:Label({
        Text = "Great Cast Chance"
    })

    mainright:Slider({
        Name = "",
        Minimum = 0,
        Maximum = 100,
        Default = greatcastchance,
        DisplayMethod = "Percent",
        Precision = 0,
        Callback = function(t)
            greatcastchance = t
            adjustChances()
        end
    }, "greatcastchance")

    mainright:Label({
        Text = "Perfect Catch Chance"
    })

    mainright:Slider({
        Name = "",
        Minimum = 0,
        Maximum = 100,
        Default = 35,
        DisplayMethod = "Percent",
        Precision = 0,
        Callback = function(t)
            catchchance = t
        end
    }, "perfectcatchchance")

    mainright:Divider()

    mainright:Header({
        Text = "Selling"
    })

    mainright:Slider({
        Name = "Auto Sell Delay",
        Minimum = 2,
        Maximum = 180,
        Default = 2,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(t)
            howlongtosell = t
        end
    }, "AutoSellDelay")

    mainright:Slider({
        Name = "Minimum Fish to sell",
        Minimum = 5,
        Maximum = 1000,
        Default = 100,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(t)
            minimumtosell = t
        end
    }, "AutoSellDelay")

    mainright:Toggle({
        Name = "Auto Sell tp",
        Default = autoselltp,
        Callback = function(t)
            autoselltp = t

            task.spawn(function()
                while autofishminig2 do task.wait(howlongtosell)
                    local success, err = pcall(function()
                        local currentfishamount = 0
                        for _,x in pairs(backpack:GetChildren()) do
                            if x:IsA("Tool") and x:FindFirstChild("fishscript") then
                                currentfishamount += 1
                            end
                        end

                        if currentfishamount >= minimumtosell then
                            for _, v in ipairs(workspace:WaitForChild("world"):WaitForChild("npcs"):GetDescendants()) do
                                if v:FindFirstChild("sellall") and v and v.Parent and v.Parent:FindFirstChildOfClass("Humanoid") then
                                    if v.Parent:FindFirstChild("dialogprompt") then
                                        v.Parent.dialogprompt.MaxActivationDistance = math.huge
                                    end
                                    v.sellall:InvokeServer()
                                end
                            end
                        end
                    end)
                    if not success then
                        warn("Error during selling:", err)
                    end
                end
            end)
        end
    }, "AutoSell")

    mainright:Label({Text = "sell npc needs to be rendered/ close"})

    mainright:Toggle({
        Name = "Auto Sell no tp",
        Default = autofishminig2,
        Callback = function(t)
            autofishminig2 = t
            local cachedsigmatates = {}

            task.spawn(function()
                while autofishminig2 do
                    cachedsigmatates = {}
                    local success, err = pcall(function()
                        for _, v in ipairs(workspace:WaitForChild("world"):WaitForChild("npcs"):GetDescendants()) do
                            if v:IsA("Script") and v.Name == "merchant" then
                                table.insert(cachedsigmatates, v)
                            end
                        end
                    end)
                    if not success then
                        warn("Error updating merchants: ", err)
                    end
                    --print("Updated cached merchants count:", #cachedsigmatates)
                    task.wait(3)
                end
            end)

            task.spawn(function()
                while autofishminig2 do task.wait(howlongtosell)
                    local success, err = pcall(function()
                        for i = #cachedsigmatates, 1, -1 do
                            local floyd = cachedsigmatates[i]
                            if floyd and floyd.Parent and floyd.Parent:FindFirstChildOfClass("Humanoid") and floyd:FindFirstChild("sellall") then
                                if floyd.Parent:FindFirstChild("dialogprompt") then
                                    floyd.Parent.dialogprompt.MaxActivationDistance = math.huge
                                end
                                floyd.sellall:InvokeServer()
                                --print("Invoked sellall for merchant at index:", i)
                            else
                                table.remove(cachedsigmatates, i)
                                --print("Removed invalid merchant at index:", i)
                            end
                        end
                    end)
                    if not success then
                        warn("Error during selling:", err)
                    end
                end
            end)
        end
    }, "AutoSellnoTp")

    local function sigmasellbuttonfuck(ss, name, settingKey, value)
        mainright:Button({
            Name = name,
            Callback = function()
                playergui.hud.safezone.menu.menu_safezone.ChangeSetting:FireServer(settingKey, value)
            end
        })
    end

    mainright:Divider()

    mainright:Header({
        Text = "Enable Sell Settings"
    })

    sigmasellbuttonfuck(selling, "Enable Sell All Legendaries", "willautosell_legendary", true)
    sigmasellbuttonfuck(selling, "Enable Sell All Mythical", "willautosell_mythical", true)
    sigmasellbuttonfuck(selling, "Enable Sell All Enchant Relics", "willautosell_relic", true)
    sigmasellbuttonfuck(selling, "Enable Sell All Event Fish", "willautosell_event", true)

    mainright:Divider()

    mainright:Header({
        Text = "Disable Sell Settings"
    })

    sigmasellbuttonfuck(selling, "Disable Sell All Legendaries", "willautosell_legendary", false)
    sigmasellbuttonfuck(selling, "Disable Sell All Mythical", "willautosell_mythical", false)
    sigmasellbuttonfuck(selling, "Disable Sell All Enchant Relics", "willautosell_relic", false)
    sigmasellbuttonfuck(selling, "Disable Sell All Event Fish", "willautosell_event", false)

    miscautosleft:Header({
        Text = "Luck Features"
    })

    miscautosleft:Label({Text = "Minimum Money to Auto Buy Luck"})

    miscautosleft:Slider({
        Name = "",
        Minimum = 0,
        Maximum = 100000,
        Default = 5000,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(t)
            minbuyluckamount = t
        end
    }, "MinMoneyLuck")

    miscautosleft:Label({Text = "Minimum Luck Time"})

    miscautosleft:Slider({
        Name = "",
        Minimum = 300,
        Maximum = 86400,
        Default = 5000,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(t)
            minluck = t
        end
    }, "MinMoney")

    miscautosleft:Toggle({
        Name = "Auto Buy Luck",
        Default = buyluck,
        Callback = function(t)
            buyluck = t
            task.spawn(function()
                while buyluck do task.wait(buyluckdelay)
                    pcall(function()
                        buyingluck = false
                        local currentmoney = player.leaderstats["C$"]
                        local cleanedmoneyValue = currentmoney.Value:gsub("[^%d]", "")
                        local statusLuck = game.ReplicatedStorage.playerstats[player.Name].Stats:FindFirstChild("status_luck")
                        if (not statusLuck or statusLuck.Value < minluck) and tonumber(cleanedmoneyValue) >= minbuyluckamount then
                            buyingluck = true
                            local originalPosition = humanoidRootPart.Position
                            humanoidRootPart.CFrame = CFrame.new(-930, 226, -992)
                            repeat task.wait() until workspace:FindFirstChild("world") and workspace.world:FindFirstChild("npcs") and workspace.world.npcs:FindFirstChild("Merlin")
                            workspace.world.npcs.Merlin.Merlin.luck:InvokeServer()
                            task.wait(.1)
                            humanoidRootPart.CFrame = CFrame.new(originalPosition)
                        end
                    end)
                end
            end)
        end
    }, "autobuyluck")

    miscautosleft:Divider()

    miscautosleft:Header({
        Text = "Other Farm Features"
    })

    miscautosleft:Toggle({
        Name = "Auto Collect Meteors",
        Default = autocollectmeteors,
        Callback = function(t)
            autocollectmeteors = t
            while autocollectmeteors do task.wait(.5)
                pcall(function()
                    collectingmeteor = false
                    if workspace:FindFirstChild("MeteorCrater") then
                        for i,v in pairs(workspace.MeteorItems:GetDescendants()) do
                            if v:IsA("ProximityPrompt") then
                                while v.Enabled do task.wait(.1)
                                    collectingmeteor = true
                                    workspace.MeteorCrater.KillPart:Destroy()
                                    humanoidRootPart.CFrame = workspace.MeteorCrater.Root.CFrame
                                    task.wait(1)
                                    fireproximityprompt(v)
                                end
                                collectingmeteor = false
                            end
                        end
                    end
                end)
            end
        end
    }, "autocollectmeteors")

    miscautosleft:Toggle({
        Name = "Auto Treasure",
        Default = autotreasure,
        Callback = function(t)
            autotreasure = t
            while autotreasure do task.wait()
                pcall(function()
                    treasuring = false
                    local inventory = ReplicatedStorage.playerstats[player.Name].Inventory
                    for _,v in pairs(inventory:GetChildren()) do
                        if v.Name:find("Treasure Map") and v:IsA("StringValue") then
                            if backpack:FindFirstChild("Treasure Map") and not character:FindFirstChild("Treasure Map") then
                                humanoid:EquipTool(backpack["Treasure Map"])
                            end
                            if character:FindFirstChild("Treasure Map") and not v.Repaired.Value then
                                treasuring = true
                                humanoidRootPart.CFrame = CFrame.new(-2824, 214, 1518)
                                vim:SendKeyEvent(true, Enum.KeyCode.E, false, game)
                                task.wait(.2)
                                vim:SendKeyEvent(false, Enum.KeyCode.E, false, game)
                                workspace.world.npcs["Jack Marrow"].treasure.repairmap:InvokeServer()
                            end
                            if v.Repaired.Value then
                                local xValue = v:FindFirstChild("x")
                                local yValue = v:FindFirstChild("y")
                                local zValue = v:FindFirstChild("z")

                                if xValue and yValue and zValue and xValue:IsA("NumberValue") and yValue:IsA("NumberValue") and zValue:IsA("NumberValue") then
                                    treasuring = true
                                    humanoidRootPart.CFrame = CFrame.new(xValue.Value, yValue.Value, zValue.Value)
                                    for _,v in pairs(workspace.world.chests:GetChildren()) do
                                        if v:IsA("Part") and v:FindFirstChildOfClass("ProximityPrompt") and v:FindFirstChildOfClass("ProximityPrompt").Enabled and v:FindFirstChild("ChestClosed") then
                                            fireproximityprompt(v:FindFirstChildOfClass("ProximityPrompt"))
                                        end
                                    end
                                end
                            end
                        end
                    end
                end)
            end
        end
    }, "AutoTreasure")

    miscautosright:Header({
        Text = "Totem Features"
    })

    local Totems_Table = {}
    for i,v in pairs(backpack:GetChildren()) do
        if v:IsA("Tool") and string.find(v.Name, "Totem") and v.Name ~= "Sundial Totem" and not table.find(Totems_Table, v.Name) then
            table.insert(Totems_Table,v.Name)
        end
    end

    local totemsdropdown = miscautosright:Dropdown({
        Name = "Totem to Auto Use",
        Default = nil,
        Options = Totems_Table,
        Search = true,
        Multi = false,
        Required = false,
        Callback = function(t)
            Selected_Totem = t
        end
    }, "Selected_Totem")

    miscautosright:Button({
        Name = "Refresh Totems List",
        Callback = function()
            local Totems_Table = {}
            for _, v in pairs(backpack:GetChildren()) do
                if v:IsA("Tool") and string.find(v.Name, "Totem") and v.Name ~= "Sundial Totem" and not table.find(Totems_Table, v.Name) then
                    table.insert(Totems_Table,v.Name)
                end
            end
            totemsdropdown:Refresh(Totems_Table)
        end,
    })

    local Weathers_Table = {"Foggy","Windy","Rain","Eclipse","Aurora"}

    miscautosright:Dropdown({
        Name = "Desired Weather",
        Default = nil,
        Options = Weathers_Table,
        Search = true,
        Multi = false,
        Required = false,
        Callback = function(t)
            Desired_Weather = t
        end
    }, "Desired_Weather")

    -- miscautosright:Label({
    --     Text = "Auto Selected Totem + Sundial"
    -- })

    miscautosright:Toggle({
        Name = "Auto Use Totem + Sundial",
        Default = AutoTotemSundial,
        Callback = function(t)
            AutoTotemSundial = t
            while AutoTotemSundial do task.wait()
                local totemweather = false
                usingtotem = false

                while reeling do
                    task.wait()
                end

                for _, v in pairs(ReplicatedStorage.world:GetChildren()) do
                    if v.Name == "weather" and Selected_Totem ~= "Blizzard Totem" and Selected_Totem ~= "Avalanche Totem" then
                        if v.Value:find(Desired_Weather) then
                            totemweather = true
                        else
                            totemweather = false
                        end
                    elseif Selected_Totem == "Blizzard Totem" then
                        if v.Name == "blizzard_active" and v.blizzard_active.Value then
                            totemweather = true
                        else
                            totemweather = false
                        end
                    elseif Selected_Totem == "Avalanche Totem" then
                        if workspace:GetAttribute("Avalanche") and workspace:GetAttribute("Avalanche") == true then
                            totemweather = true
                        else
                            totemweather = false
                        end
                    end
                end

                if not totemweather and not reeling then
                    local tool = backpack:FindFirstChild(Selected_Totem)
                    if tool and not reeling then
                        usingtotem = true
                        humanoid:UnequipTools()
                        task.wait(.5)
                        humanoid:EquipTool(tool)
                        task.wait(.5)
                        tool:Activate()
                        task.wait(.5)
                        humanoid:UnequipTools()
                    end
                end

                if ReplicatedStorage.world.cycle_timeshift.Value < 2 and not totemweather and not reeling then
                    local tool2 = backpack:FindFirstChild("Sundial Totem")
                    if tool2 and not reeling then
                        usingtotem = true
                        humanoid:UnequipTools()
                        task.wait(.5)
                        humanoid:EquipTool(tool2)
                        task.wait(.5)
                        tool2:Activate()
                        task.wait(.5)
                        humanoid:UnequipTools()
                    end
                end

                while ReplicatedStorage.world.cycle_timeshift.Value > 2 or ReplicatedStorage.world.weather.Value:find("Aurora") or reeling do task.wait()
                    usingtotem = false
                end
            end
        end
    }, "AutoTotemSundial")

    miscautosright:Toggle({
        Name = "Auto Use Selected Totem",
        Default = AutoUseTotem,
        Callback = function(t)
            AutoUseTotem = t
            while AutoUseTotem do task.wait()
                local success, error = pcall(function()
                    local totemweather = false
                    usingtotem = false

                    while reeling do
                        task.wait()
                    end

                    for _, v in pairs(ReplicatedStorage.world:GetChildren()) do
                        if v.Name == "weather" and Selected_Totem ~= "Blizzard Totem" and Selected_Totem ~= "Avalanche Totem" then
                            if v.Value:find(Desired_Weather) then
                                totemweather = true
                            else
                                totemweather = false
                            end
                        elseif Selected_Totem == "Blizzard Totem" then
                            if v.Name == "blizzard_active" and v.blizzard_active.Value then
                                totemweather = true
                            else
                                totemweather = false
                            end
                        elseif Selected_Totem == "Avalanche Totem" then
                            if workspace:GetAttribute("Avalanche") and workspace:GetAttribute("Avalanche") == true then
                                totemweather = true
                            else
                                totemweather = false
                            end
                        end
                    end

                    if not totemweather and not reeling then
                        local tool = backpack:FindFirstChild(Selected_Totem)
                        if tool and not reeling then
                            usingtotem = true
                            humanoid:UnequipTools()
                            task.wait(.5)
                            humanoid:EquipTool(tool)
                            task.wait(.5)
                            tool:Activate()
                            task.wait(.5)
                            humanoid:UnequipTools()
                        end
                    end

                    while ReplicatedStorage.world.weather.Value:find("Aurora") or reeling do task.wait()
                        usingtotem = false
                    end

                    while string.find(Selected_Totem:lower(), "Meteor") and workspace:FindFirstChild("MeteorCrater") or reeling do task.wait(5)
                        usingtotem = false
                        StarterGui:SetCore("SendNotification", {
                            Title = "North Hub Notification",
                            Text = "Meteor Found While Using Meteor Totem, Waiting..",
                            Duration = 4
                        })
                    end
                end)
                if not success then warn(err) end
            end
        end
    }, "AutoUseTotem")

    miscautosright:Divider()

    miscautosright:Header({
        Text = "Crab Cages"
    })

    miscautosright:Label({Text = "Minimum Money to Auto Buy"})

    miscautosright:Slider({
        Name = "",
        Minimum = 0,
        Maximum = 100000,
        Default = 5000,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(t)
            minvalue = t
        end,
    }, "MinMoneyCrabCages")

    miscautosright:Toggle({
        Name = "Auto Buy Crab Cages tp",
        Default = autobuycrab,
        Callback = function(t)
            autobuycrab = t
            if autobuycrab then
                local playergui = player.PlayerGui
                local over = playergui:FindFirstChild("over")
                local currentmoney = player.leaderstats["C$"]
                while autobuycrab do task.wait()
                    local success, err = pcall(function()
                        crabbing = false
                        local cleanedmoneyValue = currentmoney.Value:gsub("[^%d]", "")
                        if tonumber(cleanedmoneyValue) > minvalue and tonumber(cleanedmoneyValue) >= 45 and not enchanting and not tpingtofishevent then
                            crabbing = true
                            humanoidRootPart:PivotTo(CFrame.new(476, 151.5, 236))
                            for _, v in pairs(workspace.world.interactables:GetDescendants()) do
                                if v.Name:find("Crab Cage") and v:FindFirstChildOfClass("ProximityPrompt") and v:FindFirstChildOfClass("Highlight") and v:FindFirstChildOfClass("Highlight").Enabled then
                                    fireproximityprompt(v:FindFirstChildOfClass("ProximityPrompt"))
                                end
                            end
                            if over:FindFirstChild("prompt") and over.prompt:FindFirstChild("confirm") and over.prompt.Visible and over.prompt.confirm.Visible and string.find(over.prompt.title.Text, "Shop Purchase") then
                                firesignal(over.prompt.confirm.MouseButton1Click)
                            end
                        else
                            crabbing = false
                        end
                    end)
                    if not success then warn(err) end
                    if not autobuycrab then
                        crabbing = false
                    end
                end
            else
                crabbing = false
            end
        end
    }, "AutoBuyCrabTP")

    miscautosright:Toggle({
        Name = "Auto Buy Crab Cages no tp",
        Default = autobuycrabLegit,
        Callback = function(t)
            autobuycrab2 = t
            if autobuycrab2 then
                local playergui = player.PlayerGui
                local over = playergui:FindFirstChild("over")
                local currentmoney = player.leaderstats["C$"]
                while autobuycrab2 do task.wait()
                    crabbing = false
                    local success, err = pcall(function()
                        local cleanedmoneyValue = currentmoney.Value:gsub("[^%d]", "")
                        if tonumber(cleanedmoneyValue) > minvalue and tonumber(cleanedmoneyValue) >= 45 and not enchanting and not tpingtofishevent then
                            crabbing = true
                            for _, v in pairs(workspace.world.interactables:GetDescendants()) do
                                if v.Name:find("Crab Cage") and v:FindFirstChildOfClass("ProximityPrompt") and v:FindFirstChildOfClass("Highlight") and v:FindFirstChildOfClass("Highlight").Enabled then
                                    fireproximityprompt(v:FindFirstChildOfClass("ProximityPrompt"))
                                end
                            end
                            if over:FindFirstChild("prompt") and over.prompt:FindFirstChild("confirm") and over.prompt.Visible and over.prompt.confirm.Visible and string.find(over.prompt.title.Text, "Shop Purchase") then
                                firesignal(over.prompt.confirm.MouseButton1Click)
                            end
                        else
                            crabbing = false
                        end
                    end)
                    if not autobuycrab2 then
                        crabbing = false
                    end
                end
            else
                crabbing = false
            end
        end
    }, "AutoBuyCrabLegit")

    local CrabCages = 0
    local maxCrabCages = 1000

    miscautosright:Label({Text = "Maximum Crab Cages"})

    miscautosright:Slider({
        Name = "",
        Minimum = 0,
        Maximum = 15000,
        Default = 1000,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(t)
            maxCrabCages = t
        end
    }, "MaxCrabCages")

    miscautosright:Slider({
        Name = "Place Delay",
        Minimum = 0,
        Maximum = 0.5,
        Default = 0.05,
        DisplayMethod = "Value",
        Precision = 4,
        Callback = function(t)
            crabcageplacedelay = t
        end
    }, "CrabCageDelay")

    miscautosright:Slider({
        Name = "Collect Delay",
        Minimum = 0,
        Maximum = 0.5,
        Default = 0.05,
        DisplayMethod = "Value",
        Precision = 4,
        Callback = function(t)
            crabcagecollectdelay = t
        end
    }, "CrabCageDelay")

    miscautosright:Toggle({
        Name = "Auto Place Crab Cage Limit",
        Default = Crab6,
        Callback = function(t)
            Crab6 = t
            while Crab6 do task.wait()
                pcall(function()
                    local Cage = character:FindFirstChild("Crab Cage") or backpack:FindFirstChild("Crab Cage")
                    local fuhcuh = true
                    CrabCages = 0

                    for _, v in ipairs(workspace.active:GetDescendants()) do
                        if v:IsA("Script") and v.Parent.Name == player.Name then
                            CrabCages = CrabCages + 1
                            --print(CrabCages)
                        end
                    end

                    pcall(function()
                        for _, v in ipairs(workspace.active:GetChildren()) do
                            if v.Name == player.Name then
                                for _, x in ipairs(v:GetChildren()) do
                                    if x:IsA("ProximityPrompt") and x.Enabled and CrabC then
                                        fireproximityprompt(x)
                                        task.wait(crabcageplacedelay)
                                    end
                                end
                            end
                        end
                    end)

                    if CrabCages < maxCrabCages and fuhcuh and Cage and not enchanting and not tpingtofishevent then
                        if backpack:FindFirstChild("Crab Cage") then
                            humanoid:EquipTool(Cage)
                        end
                        if Cage:FindFirstChild("Deploy") then
                            Cage:Activate()
                            --Cage.Deploy:FireServer({CFrame = humanoidRootPart.CFrame * CFrame.new(0, -6, -6)})
                        end
                    end

                    if CrabCages >= maxCrabCages then
                        fuhcuh = false
                        humanoid:UnequipTools()
                    end

                    if CrabCages == 0 then
                        fuhcuh = true
                    end
                end)
            end
        end
    }, "AutoCollectCrab2")

    miscautosright:Toggle({
        Name = "Auto Place Crab Cage",
        Default = CrabC1,
        Save = true,
        Flag = "AutoPlaceCrabC",
        Callback = function(t)
            CrabC1 = t
            while CrabC1 do task.wait()
                local success, err = pcall(function()
                    local Cage = character:FindFirstChild("Crab Cage") or backpack:FindFirstChild("Crab Cage")
                    crabbing = false
                    if Cage and not enchanting and not tpingtofishevent then
                        crabbing = true
                        if backpack:FindFirstChild("Crab Cage") then
                            humanoid:EquipTool(Cage)
                        end

                        if Cage:FindFirstChild("Deploy") then
                            Cage:Activate()
                            --Cage.Deploy:FireServer({CFrame = humanoidRootPart.CFrame * CFrame.new(0, -6, -6)})
                            task.wait(crabcageplacedelay)
                        end
                    else
                        crabbing = false
                    end
                end)
                if not success then warn(err) end
            end
        end
    })

    miscautosright:Toggle({
        Name = "Auto Collect Crab Cage",
        Default = CrabC,
        Callback = function(t)
            CrabC = t
            while CrabC do task.wait()
                pcall(function()
                    for _, v in ipairs(workspace.active:GetChildren()) do
                        if v.Name == player.Name then
                            for _, x in ipairs(v:GetChildren()) do
                                if x:IsA("ProximityPrompt") and x.Enabled and CrabC then
                                    fireproximityprompt(x)
                                    task.wait(crabcagecollectdelay)
                                end
                            end
                        end
                    end
                end)
            end
        end
    }, "AutoCollectCrabCages")

    miscautosright:Label({
        Text = "This Will Make it so you can't see crab cages"
    })

    miscautosright:Toggle({
        Name = "Reduce Lag Cages",
        Default = antilag,
        Callback = function(t)
            antilag = t

            if antilag then
                local active = workspace:FindFirstChild("active")
                local safezone = player.PlayerGui.hud.safezone
                
                connection = RunService.RenderStepped:Connect(function()
                    if not antilag then
                        connection:Disconnect()
                        return
                    end

                    for _, v in ipairs(active:GetChildren()) do
                        if v.Name == player.Name then
                            for _, x in pairs(v:GetDescendants()) do
                                if x:IsA("Model") or x:IsA("Part") then
                                    x:Destroy()
                                end
                            end
                        end
                    end
                    for _, v in ipairs(safezone:GetChildren()) do
                        if v.Name == "xpup" and v:FindFirstChild("xpup") then
                            v.xpup:Destroy()
                        elseif v.Name == "coins" and v:FindFirstChild("currencygain") then
                            v.currencygain:Destroy()
                        elseif v.Name == "announcements" and v:FindFirstChild("catch") then
                            v.catch:Destroy()
                        end
                    end
                end)
            end
        end
    }, "antilagcrabcages")

    miscautosright:Label({
        Text = "no crab cage invisible"
    })

    miscautosright:Toggle({
        Name = "Reduce Lag",
        Default = antilag2,
        Callback = function(t)
            antilag2 = t
            if antilag2 then
                local safezone = player.PlayerGui.hud.safezone
                local active = workspace:FindFirstChild("active")
                
                local connection2
                connection2 = RunService.RenderStepped:Connect(function()
                    if not antilag2 then
                        connection2:Disconnect()
                        return
                    end
                    
                    for _, v in ipairs(active:GetChildren()) do
                        if v.Name == player.Name then
                            for _, x in pairs(v:GetDescendants()) do
                                if x:IsA("Part") or x:IsA("ParticleEmitter") then
                                    x:Destroy()
                                end
                            end
                        end
                    end

                    for _, v in ipairs(safezone:GetChildren()) do
                        if v.Name == "xpup" and v:FindFirstChild("xpup") then
                            v.xpup:Destroy()
                        elseif v.Name == "coins" and v:FindFirstChild("currencygain") then
                            v.currencygain:Destroy()
                        elseif v.Name == "announcements" and v:FindFirstChild("catch") then
                            v.catch:Destroy()
                        end
                    end
                end)
            end
        end
    }, "antilagcrabcages2")

    miscautosleft:Divider()

    miscautosleft:Header({
        Text = "Bait Features"
    })

    miscautosleft:Dropdown({
        Name = "Select Bait",
        Default = SelectedBait, 
        Options = bait_table,
        Search = true,
        Multi = false,
        Required = false,
        Callback = function(SelectedOption)
            SelectedBait = SelectedOption
        end
    }, "Select_Bait")

    miscautosleft:Toggle({
        Name = "Auto Equip Selected Bait",
        Default = Equip2,
        Callback = function(t)
            Equip2 = t
            while Equip2 do task.wait()
                local backpack1 = playergui.hud.safezone.backpack
                bait = backpack1:FindFirstChild("bait")

                playergui.hud.safezone.equipment.bait.scroll.safezone.e:FireServer(SelectedBait)
                if bait ~= nil then
                    baitText = bait.Text
                    actualBait = baitText:match("^Current Bait :%s*(.*)")

                    if actualBait and not actualmiscautosleft:find(SelectedBait) then
                        repeat task.wait(.3)
                            playergui.hud.safezone.equipment.bait.scroll.safezone.e:FireServer("None")
                        until bait == nil or not Equip2 
                    end
                    if bait == nil then
                        repeat task.wait(1)
                            playergui.hud.safezone.equipment.bait.scroll.safezone.e:FireServer(SelectedBait)
                        until bait ~= nil or not Equip2
                    end
                end
            end
        end
    }, "AutoEquipBait")

    miscautosleft:Toggle({
        Name = "Auto Equip All Baits",
        Default = Equip23,
        Callback = function(t)
            Equip23 = t
            local currentBait

            while Equip23 do task.wait()
                pcall(function()
                    local player = player.Name
                    local baitFolder = ReplicatedStorage.playerstats[player].Stats.bait
                    local BaitNames = {}
        
                    for _, child in ipairs(baitFolder:GetChildren()) do
                        local baitName = child.Name:gsub("^bait_", "")
                        table.insert(BaitNames, baitName)
                    end
        

                    if baitFolder.Value == "None" then
                    for _, baitName in ipairs(BaitNames) do
                        playergui.hud.safezone.equipment.bait.scroll.safezone.e:FireServer(baitName)
                            break
                        end
                    end
                end)
            end
        end
    }, "AutoEquipAllBait")

    miscautosleft:Toggle({
        Name = "Auto Buy Quality Bait",
        Default = autobuyqualitybaitcrate,
        Callback = function(t)
            autobuyqualitybait = t
            if autobuyqualitybait then
                local playergui = player.PlayerGui
                local over = playergui:FindFirstChild("over")
                local currentmoney = player.leaderstats["C$"]
                while autobuyqualitybait do task.wait()
                    local success, err = pcall(function()
                        crabbing = false
                        local cleanedmoneyValue = currentmoney.Value:gsub("[^%d]", "")
                        if tonumber(cleanedmoneyValue) > minvalue and not enchanting and not tpingtofishevent then
                            crabbing = true
                            humanoidRootPart:PivotTo(CFrame.new(-174, 143, 1933))
                            for _, v in pairs(workspace.world.interactables:GetDescendants()) do
                                if v.Name:find("Quality Bait Crate") and v:FindFirstChildOfClass("ProximityPrompt") and v:FindFirstChildOfClass("Highlight") and v:FindFirstChildOfClass("Highlight").Enabled then
                                    fireproximityprompt(v:FindFirstChildOfClass("ProximityPrompt"))
                                end
                            end
                            if over:FindFirstChild("prompt") and over.prompt:FindFirstChild("confirm") and over.prompt.Visible and over.prompt.confirm.Visible and string.find(over.prompt.title.Text, "Shop Purchase") then
                                for _, yOffset in ipairs(yOffsetValues) do
                                    clickButton(over.prompt.confirm, yOffset)
                                    task.wait(.05)
                                end
                            end
                        else
                            crabbing = false
                        end
                    end)
                    if not success then warn(err) end
                end
            else
                crabbing = false
            end
        end
    }, "AutoBuyCrabTP")

    miscautosleft:Toggle({
        Name = "Auto Buy Quality Bait Legit (No Teleport)",
        Default = autobuyqualitylegit,
        Callback = function(t)
            autobuyqualitybaitlegit = t
            if autobuyqualitybaitlegit then
                local over = playergui:FindFirstChild("over")
                local currentmoney = player.leaderstats["C$"]
                while autobuyqualitybaitlegit do task.wait()
                    crabbing = false
                    local success, err = pcall(function()
                        local cleanedmoneyValue = currentmoney.Value:gsub("[^%d]", "")
                        if tonumber(cleanedmoneyValue) > minvalue and not enchanting and not tpingtofishevent then
                            crabbing = true
                            for _, v in pairs(workspace.world.interactables:GetDescendants()) do
                                if v.Name:find("Quality Bait Crate") and v:FindFirstChildOfClass("ProximityPrompt") and v:FindFirstChildOfClass("Highlight") and v:FindFirstChildOfClass("Highlight").Enabled then
                                    fireproximityprompt(v:FindFirstChildOfClass("ProximityPrompt"))
                                end
                            end
                            if over:FindFirstChild("prompt") and over.prompt:FindFirstChild("confirm") and over.prompt.Visible and over.prompt.confirm.Visible and string.find(over.prompt.title.Text, "Shop Purchase") then
                                for _, yOffset in ipairs(yOffsetValues) do
                                    clickButton(over.prompt.confirm, yOffset)
                                    task.wait(.05)
                                end
                            end
                        else
                            crabbing = false
                        end
                    end)
                end
            else
                crabbing = false
            end
        end
    }, "AutoBuyCrabLegit")

    miscautosleft:Toggle({
        Name = "Auto Open Bait Crates",
        Default = autoopenbait,
        Callback = function(t)
            AutoOpenBaitCrates = t

            while AutoOpenBaitCrates do task.wait()
                pcall(function()
                    local baitcrate = character:FindFirstChild("Quality Bait Crate") or backpack:FindFirstChild("Quality Bait Crate")
                    openingcrate = false
                    if baitcrate and not enchanting and not tpingtofishevent then
                        openingcrate = true
                        if backpack:FindFirstChild("Quality Bait Crate") then
                            humanoid:EquipTool(baitcrate)
                        elseif character:FindFirstChild("Quality Bait Crate") then
                            baitcrate:Activate()
                        end
                    else
                        openingcrate = false
                    end
                end)
            end
        end
    }, "AutoOpenBait")

    teleportsleft:Header({
        Text = "Totem Teleports"
    })

    local totemPositions = {
        Sundial = Vector3.new(-1148, 135, -1075),
        Aurora = Vector3.new(-1811, -137, -3282),
        Eclipse = Vector3.new(5966, 274, 842),
        Meteor = Vector3.new(-1950, 275, 230),
        ["Smoke Screen"] = Vector3.new(2791, 140, -626),
        Windset = Vector3.new(2847, 179, 2700),
        Tempest = Vector3.new(35, 133, 1942),
        Blizzard = Vector3.new(20144, 743, 5805),
        Avalanche = Vector3.new(19711, 468, 6059)
    }

    teleportsleft:Dropdown({
        Name = "Totem's",
        Default = "Aurora",
        Options = { "Smoke Screen", "Tempest", "Windset", "Aurora", "Sundial", "Eclipse", "Meteor", "Blizzard", "Avalanche"},
        Search = true,
        Multi = false,
        Required = false,
        Callback = function(selectedDirection)
            totemscuh = selectedDirection
        end
    }, "totemtotpto")

    teleportsleft:Button({
        Name = "Teleport To Totem's",
        Callback = function()
            local position = totemPositions[totemscuh]
            if position then
                humanoidRootPart.CFrame = CFrame.new(position)
                followPlayer()
            end
        end
    })

    teleportsleft:Divider()

    teleportsleft:Header({
        Text = "Area Teleports"
    })

    Area_Table = {}
    for i, v in pairs(workspace.world.spawns.TpSpots:GetChildren()) do
        if v:IsA("Part") then
            table.insert(Area_Table, v.Name)
        end
    end  

    areadropdown = teleportsleft:Dropdown({
        Name = "Area to Tp To",
        Default = AREATOTPTO,
        Options = Area_Table,
        Search = true,
        Multi = false,
        Required = false,
        Callback = function(selectedArea)
            AREATOTPTO = selectedArea
        end
    }, "areatotpto")

    teleportsleft:Button({
        Name = "Tp To Area :",
        Callback = function()
            for i, v in pairs(workspace.world.spawns.TpSpots:GetChildren()) do 
                if v:IsA("Part") and v.Name == AREATOTPTO then
                    local areaPos = v.Position
                    if areaPos then
                        humanoidRootPart.CFrame = CFrame.new(areaPos) * CFrame.new(0,5,0)
                    end
                end
            end
        end
    })

    teleportsright:Header({
        Text = "NPC Teleports"
    })

    Npc_Table = {} 
    for i, v in pairs(workspace.world.npcs:GetDescendants()) do 
        if v:IsA("Model") and not table.find(Npc_Table, v.Name) then
            table.insert(Npc_Table, v.Name)
        end
    end

    npcdropdown = teleportsright:Dropdown({
        Name = "Npc To Tp To :",
        Default = NPCTOTPTO,
        Options = Npc_Table,
        Search = true,
        Multi = false,
        Required = false,
        Callback = function(selectedNPC)
            NPCTOTPTO = selectedNPC
        end
    }, "npctotpto")

    teleportsright:Button({
        Name = "Tp To NPC:",
        Callback = function()
            for i, v in pairs(workspace.world.npcs:GetDescendants()) do 
                if v:IsA("Model") and v.Name == NPCTOTPTO then
                    local worldPivotPos = v:GetPivot().Position
                    if worldPivotPos then
                        humanoidRootPart.CFrame = CFrame.new(worldPivotPos)
                    end
                end
            end
        end
    })

    teleportsright:Button({
        Name = "Refresh NPC List",
        Callback = function()
            Npc_Table = {} 
            for i, v in pairs(workspace.world.npcs:GetDescendants()) do 
                if v:IsA("Model") and not table.find(Npc_Table, v.Name) then
                    table.insert(Npc_Table, v.Name)
                end 
            end   
            npcdropdown:Refresh(Npc_Table, true)
        end
    })

    teleportsright:Divider()

    teleportsright:Header({
        Text = "Items"
    })

    Item_Table = {}
    for i, v in pairs(workspace.world.interactables:GetDescendants()) do 
        if v:IsA("Model") and not table.find(Item_Table, v.Name) then
            table.insert(Item_Table, v.Name)
        end 
    end  

    itemdropdown = teleportsright:Dropdown({
        Name = "Item to Teleport to",
        Default = ITEMTOTPTO,
        Options = Item_Table,
        Search = true,
        Multi = false,
        Required = false,
        Callback = function(selectedItem)
            ITEMTOTPTO = selectedItem
        end
    }, "itemtotpto")

    teleportsright:Button({
        Name = "Teleport to Item",
        Callback = function()
            for i, v in pairs(workspace.world.interactables:GetDescendants()) do 
                if v:IsA("Model") and v.Name == ITEMTOTPTO then
                    local itemPivotPos = v:GetPivot().Position
                    if itemPivotPos then
                        humanoidRootPart.CFrame = CFrame.new(itemPivotPos)
                    end
                end
            end
        end
    })

    teleportsright:Button({
        Name = "Refresh Item List",
        Callback = function()
            local Item_Table = {}
            Item_Table = {}
            for i, v in pairs(workspace.world.interactables:GetDescendants()) do
                if v:IsA("Model") and not table.find(Item_Table, v.Name) then
                    table.insert(Item_Table, v.Name)
                end
            end
            itemdropdown:Refresh(Item_Table)
        end,
    })

    local Fishing_Spots = {} 
    for i,v in pairs(workspace.zones.fishing:GetChildren()) do 
        if v:IsA("Part") and not table.find(Fishing_Spots,v.Name) then 
            table.insert(Fishing_Spots,v.Name)
        end 
    end 

    spotsf = teleportsright:Dropdown({
        Name = "Fishing Spots Teleports",
        Default = fishspot,
        Options = Fishing_Spots,
        Search = true,
        Multi = false,
        Required = false,
        Callback = function(selectedItem)
            fishspot = selectedItem 
        end
    }, "fishspot")

    teleportsright:Button({
        Name = "Tp To Spot",
        Callback = function()
            for _, v in pairs(workspace.zones.fishing:GetChildren()) do
                if v:IsA("Part") and v.Name == fishspot then
                    humanoidRootPart.CFrame = CFrame.new(v.Position + Vector3.new(0, 110, 0))
                    followPlayer()
                    break
                end 
            end
        end
    })

    teleportsright:Button({
        Name = "Refresh Fishing Spots",
        Callback = function()
            local Fishing_Spots = {} 
            for i,v in pairs(workspace.zones.fishing:GetChildren()) do 
                if v:IsA("Part") and not table.find(Fishing_Spots,v.Name) then 
                    table.insert(Fishing_Spots,v.Name)
                end 
            end
            spotsf:Refresh(Fishing_Spots)
        end,
    })

    teleportsright:Divider()

    teleportsright:Header({
        Text = "Other Teleports"
    })

    teleportsright:Button({
        Name = "Unlock All Locations",
        Callback = function()
            local tpSpots = workspace.world.spawns.TpSpots:GetChildren()

            for _, part in pairs(tpSpots) do
                if part:IsA("Part") or part:IsA("BasePart") then
                    local partPos = part.Position
                    if partPos then
                        humanoidRootPart.CFrame = CFrame.new(partPos)
                        task.wait(1)
                    end
                end
            end
        end
    })

    teleportsright:Button({
        Name = "Tp To DeepOcean SafeSpot",
        Callback = function()
            humanoidRootPart.CFrame = CFrame.new(1058, 130, 6000)
            followPlayer()
        end
    })

    teleportsright:Button({
        Name = "Tp To Desolate Deep",
        Callback = function()
            humanoidRootPart.CFrame = CFrame.new(-1511, -235, -2870)
            followPlayer()
        end
    })

    teleportsright:Button({
        Name = "Tp To Coral Geode",
        Callback = function()
            humanoidRootPart.CFrame = CFrame.new(-1643, -214, -2852)
            followPlayer()
        end
    })

    miscleft:Header({
        Text = "Helpful features"
    })

    local isActive = false
    local lastCleanupTime = 0
    local cleanupInterval = 2

    local function createWaterPlatform(position)
        local platform = Instance.new("Part")
        platform.Size = Vector3.new(4, 1, 4)
        platform.Position = position
        platform.Anchored = true
        platform.CanCollide = true
        platform.Transparency = 1
        platform.Parent = workspace
        return platform
    end

    local function cleanupPlatforms()
        for _, part in ipairs(workspace:GetChildren()) do
            if part:IsA("Part") and part.Transparency == 1 then
                part:Destroy()
            end
        end
    end

    local function checkWater()
        while true do
            if walkonwater then
                local position = humanoidRootPart.Position
                local rayOrigin = Vector3.new(position.X, position.Y - 1, position.Z)
                local rayDirection = Vector3.new(0, -10, 0)
                local ray = Ray.new(rayOrigin, rayDirection)

                local hitPart, hitPosition = workspace:FindPartOnRay(ray, character)

                local fishingZones = workspace:WaitForChild("zones"):WaitForChild("fishing")
                local validZoneNames = {}
                for _, zone in ipairs(fishingZones:GetChildren()) do
                    table.insert(validZoneNames, zone.Name)
                end

                if hitPart and hitPart:IsA("Part") and table.find(validZoneNames, hitPart.Name) then
                    local platformPosition = Vector3.new(position.X, hitPosition.Y - 1, position.Z)
                    createWaterPlatform(platformPosition)
                end

                if tick() - lastCleanupTime >= cleanupInterval then
                    cleanupPlatforms()
                    lastCleanupTime = tick()
                end
            end
            if not walkonwater then
                cleanupPlatforms()
            end
            task.wait()
        end
    end

    local alreadyactivatedwalkonwater = false

    miscleft:Toggle({
        Name = "Walk on Water",
        Default = walkonwater,
        Callback = function(t)
            walkonwater = t
            while walkonwater do task.wait()
                local success, err = pcall(function()
                    if not alreadyactivatedwalkonwater then
                        checkWater()
                        alreadyactivatedwalkonwater = true
                    end
                    if not walkonwater then
                        cleanupPlatforms()
                    end
                end)
                if not success then warn(err) end
            end
        end
    })

    miscleft:Toggle({
        Name = "Anti Drown",
        Default = AntiDrown,
        Callback = function(t)
            AntiDrown = t
            if AntiDrown then
                local mt = getrawmetatable(game)
                setreadonly(mt, false)

                local oldIndex = mt.__namecall

                mt.__namecall = newcclosure(function(self, ...)
                    local method = getnamecallmethod()
                    local args = {...}

                    if tostring(self) == "drown" then
                        if method == "FireServer" or method == "InvokeServer" then
                            return 
                        end
                    end

                    return oldIndex(self, unpack(args))
                end)

                setreadonly(mt, true)
                task.wait(1)
            end 
        end
    }, "AntiDrown")

    miscleft:Label({
        Text = "Script already has built in anti afk but this anti afk is for the afk label that shows when you tab out"
    })

    miscleft:Toggle({
        Name = "Anti Afk Label",
        Default = AntiAfk,
        Callback = function(t)
            AntiAfk = t
            if AntiAfk then
                if character:FindFirstChild("afk") then
                    ReplicatedStorage.events.afk:FireServer(false)
                end
                local mt = getrawmetatable(game)
                setreadonly(mt, false)
                
                local oldIndex = mt.__namecall
                
                mt.__namecall = newcclosure(function(self, ...)
                    local method = getnamecallmethod()
                    local args = {...}
                    
                    if tostring(self) == "afk" then
                        if method == "FireServer" or method == "InvokeServer" then
                            --print("Blocked remote:", tostring(self))
                            return 
                        end
                    end
                    
                    return oldIndex(self, unpack(args))
                end)
                setreadonly(mt, true)
                task.wait(1)
            end 
        end
    }, "AntiAfk")

    miscleft:Toggle({
        Name = "Hide Name (Visual Only)",
        Default = hidename,
        Callback = function(t)
            hidename = t
            if hidename then

                oldUserId = tostring(player.UserId)
                oldName = player.Name
                oldDisplayName = player.DisplayName
                local function processtext(text)
                    if string.gsub(text,oldName,".gg/NorthHub") ~= text then
                        return string.gsub(text,oldName,".gg/NorthHub")
                    elseif string.gsub(text,oldUserId,13886182) ~= text then
                        return string.gsub(text,oldUserId,13886182)
                    elseif string.gsub(text,oldDisplayName,".gg/NorthHub") ~= text then
                        return string.gsub(text,oldDisplayName,".gg/NorthHub")
                    end
                    if text ~= nil then
                        return text
                    end
                    return ''
                end
                
                for i,v in next, game:GetDescendants() do
                    if v:IsA("TextBox") or v:IsA("TextLabel") or v:IsA("TextButton") then
                        v.Text = processtext(v.Text)
                        v.Name = processtext(v.Name)
                        v.Changed:Connect(function(property)
                            v.Text = processtext(v.Text)
                            v.Name = processtext(v.Name)
                        end)
                    end
                end

                while hidename do task.wait(1)
                    pcall(function()
                        humanoidRootPart.user.user.Text = "Discord.gg/northhub"
                    end)
                end
            end
        end
    }, "HideName")

    appraiseleft:Header({
        Text = "Auto Appraise"
    })

    appraiseleft:Button({
        Name = "Appraise Item [In Hand Item]",
        Callback = function()
            workspace:WaitForChild("world"):WaitForChild("npcs"):WaitForChild("Appraiser"):WaitForChild("appraiser"):WaitForChild("appraise"):InvokeServer()
        end
    })

    appraiseleft:Slider({
        Name = "Appraise Delay",
        Minimum = 0,
        Maximum = 3,
        Default = 0.5,
        DisplayMethod = "Value",
        Precision = 2,
        Callback = function(t)
            autoappraisedelay = t
        end
    }, "autoappraise_delay")

    local doesntstick = {"mythical", "darkened", "glossy", "sinister", "translucent", "frozen", "silver", "gold", "ghastly", "albino", "negative", "electric", "hexed", "abyssal"}
    local selectedAppraiseItem
    local doesntStickSelection = {}
    local cuhbruh = nil

    local newAppraiseOptions = {"1", "2", "3", "4", "5", "6", "7", "8", "9"}

    local appraisedropdown = appraiseleft:Dropdown({
        Name = "Hotbar To Appraise",
        Default = appraiseitems,
        Options = newAppraiseOptions,
        Search = true,
        Multi = true,
        Required = false,
        Callback = function(selectedDisplayText)
            selectedHotbarItem = selectedDisplayText
        end
    }, "selectedhotbarsappraise")

    appraiseleft:Label({
        Text = "Will stop when the weight is >= ammount"
    })

    appraiseleft:Input({
        Name = "Weight Value",
        Default = weightcuh,
        TextDisappear = false,
        Callback = function(Value)
            weightcuh = Value
        end
    })

    appraiseleft:Toggle({
        Name = "Auto Appraise Weight",
        Default = autoequipfish7,
        Callback = function(t)
            autoequipfish7 = t
            while autoequipfish7 do
                task.wait(autoappraisedelay)
                for hotbarName, isSelected in pairs(selectedHotbarItem) do
                    if isSelected then
                        local selectedItem = game.Players.LocalPlayer.PlayerGui.hud.safezone.backpack.hotbar:FindFirstChild(hotbarName)
                        if selectedItem and selectedItem:FindFirstChild("item") then
                            local itemValue = selectedItem.item.Value
                            local itemmain = tostring(itemValue)
                            local playername = player.Name
                            local itemInInventory = ReplicatedStorage.playerstats[playername].Inventory:FindFirstChild(itemmain)
                            for _, v in pairs(backpack:GetDescendants()) do
                                if v.Name == "link" and tostring(v.Value) == tostring(itemValue) then
                                    famitstheitem = v.Parent
                                    break
                                end
                            end
                            if itemInInventory then
                                local WeightValue = itemInInventory:FindFirstChild("Weight")
                                local weightfam = tonumber(weightcuh)
                                local shouldAppraise = true
                                local weightfinal = tonumber(WeightValue.Value)
                                if weightfinal and weightfinal >= weightfam then
                                    shouldAppraise = false
                                end
                                if shouldAppraise then
                                    game.Players.LocalPlayer.Character.Humanoid:EquipTool(famitstheitem)

                                    local appraiser = workspace:WaitForChild("world"):WaitForChild("npcs"):WaitForChild("Appraiser"):WaitForChild("appraiser")
                                    if appraiser and appraiser:FindFirstChild("appraise") then
                                        appraiser:WaitForChild("appraise"):InvokeServer()
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    }, "Auto_Appraise_Weight")
    
    appraiseleft:Dropdown({
        Name = "Mutation Options",
        Options = doesntstick,
        Search = true,
        Multi = true,
        Required = false,
        Callback = function(selectedOptions)
            doesntStickSelection = selectedOptions
        end
    }, "mutationoptions")

    appraiseleft:Toggle({
        Name = "Auto Appraise Mutation",
        Default = autoequipcuh,
        Callback = function(t)
            autoequipfish = t
            while autoequipfish do
                task.wait(autoappraisedelay)
                for hotbarName, isSelected in pairs(selectedHotbarItem) do
                    if isSelected then
                        local selectedItem = game.Players.LocalPlayer.PlayerGui.hud.safezone.backpack.hotbar:FindFirstChild(hotbarName)
                        if selectedItem and selectedItem:FindFirstChild("item") then
                            local itemValue = selectedItem.item.Value
                            local itemmain = tostring(itemValue)
                            local playername = game.Players.LocalPlayer.Name
                            local itemInInventory = game.ReplicatedStorage.playerstats[playername].Inventory:FindFirstChild(itemmain)
                            local famitstheitem
    
                            for _, v in pairs(game.Players.LocalPlayer.Backpack:GetDescendants()) do
                                if v.Name == "link" and tostring(v.Value) == tostring(itemmain) then
                                    famitstheitem = v.Parent
                                    break
                                end
                            end
    
                            if itemInInventory and famitstheitem then
                                local mutationValue = itemInInventory:FindFirstChild("Mutation")
                                local shouldSkip = false
    
                                for selection, isSelected in pairs(doesntStickSelection) do
                                    if isSelected and mutationValue and mutationValue.Value and string.lower(tostring(mutationValue.Value)) == string.lower(tostring(selection)) then
                                        shouldSkip = true
                                        break
                                    end
                                end
    
                                if not shouldSkip then
                                    game.Players.LocalPlayer.Character.Humanoid:EquipTool(famitstheitem)

                                    local appraiser = workspace:WaitForChild("world"):WaitForChild("npcs"):WaitForChild("Appraiser"):WaitForChild("appraiser")
    
                                    if appraiser and appraiser:FindFirstChild("appraise") then
                                        appraiser:WaitForChild("appraise"):InvokeServer()
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    }, "AutoApraiseMutation")
    
    appraiseleft:Toggle({
        Name = "Appraise Mutation + Weight",
        Default = autoequipcuh,
        Callback = function(t)
            autoequipfish = t
            while autoequipfish do
                task.wait(autoappraisedelay)
                for hotbarName, isSelected in pairs(selectedHotbarItem) do
                    if isSelected then
                        pcall(function()
                            local selectedItem = game.Players.LocalPlayer.PlayerGui.hud.safezone.backpack.hotbar:FindFirstChild(hotbarName)
                            if selectedItem and selectedItem:FindFirstChild("item") then
                                local itemValue = selectedItem.item.Value
                                local itemmain = tostring(itemValue)
                                local playername = game.Players.LocalPlayer.Name
                                local itemInInventory = game.ReplicatedStorage.playerstats[playername].Inventory:FindFirstChild(itemmain)
                                local famitstheitem
                                for _, v in pairs(game.Players.LocalPlayer.Backpack:GetDescendants()) do
                                    if v.Name == "link" and tostring(v.Value) == itemmain then
                                        famitstheitem = v.Parent
                                        break
                                    end
                                end
                                if itemInInventory and famitstheitem then
                                    local mutationValue = itemInInventory:FindFirstChild("Mutation")
                                    local WeightValue = itemInInventory:FindFirstChild("Weight")
                                    local weightfam = tonumber(weightcuh)
                                    local weightfinal = tonumber(WeightValue.Value)
                                    local shouldSkip = false
                                    for selection, isSelected in pairs(doesntStickSelection) do
                                        if isSelected and mutationValue and mutationValue.Value and string.lower(tostring(mutationValue.Value)) == string.lower(selection) then
                                            shouldSkip = true
                                            break
                                        end
                                    end
                                    if shouldSkip or (weightfinal and weightfinal > weightfam) then
                                        return
                                    end
                                    game.Players.LocalPlayer.Character.Humanoid:EquipTool(famitstheitem)

                                    local appraiser = workspace.world.npcs.Appraiser:WaitForChild("appraiser")
                                    if appraiser and appraiser:FindFirstChild("appraise") then
                                        appraiser:WaitForChild("appraise"):InvokeServer()
                                    end
                                end
                            end
                        end)
                    end
                end
            end
        end
    }, "AutoAppraiseMutation+Weight")

    appraiseleft:Toggle({
        Name = "Appraise Shiny/Sparkling",
        Default = autoequipfish3,
        Callback = function(t)
            autoequipfish3 = t
            while autoequipfish3 do
                task.wait(autoappraisedelay)
                for hotbarName, isSelected in pairs(selectedHotbarItem) do
                    if isSelected then
                        pcall(function()
                            local selectedItem = game.Players.LocalPlayer.PlayerGui.hud.safezone.backpack.hotbar:FindFirstChild(hotbarName)
                            if selectedItem and selectedItem:FindFirstChild("item") then
                                local itemValue = selectedItem.item.Value
                                local itemmain = tostring(itemValue)
                                local playername = game.Players.LocalPlayer.Name
                                local itemInInventory = game.ReplicatedStorage.playerstats[playername].Inventory:FindFirstChild(itemmain)
                                local famitstheitem
                                for _, v in pairs(game.Players.LocalPlayer.Backpack:GetDescendants()) do
                                    if v.Name == "link" and tostring(v.Value) == itemmain then
                                        famitstheitem = v.Parent
                                        break
                                    end
                                end
                                if itemInInventory and famitstheitem then
                                    local shiny = itemInInventory:FindFirstChild("Shiny")
                                    local sparkingcuh = itemInInventory:FindFirstChild("Sparkling")
                                    if shiny or sparkingcuh then
                                        return
                                    else
                                        game.Players.LocalPlayer.Character.Humanoid:EquipTool(famitstheitem)

                                        local appraiser = workspace:WaitForChild("world"):WaitForChild("npcs"):WaitForChild("Appraiser"):WaitForChild("appraiser")
                                        if appraiser and appraiser:FindFirstChild("appraise") then
                                            appraiser:WaitForChild("appraise"):InvokeServer()
                                        end
                                    end
                                end
                            end
                        end)
                    end
                end
            end
        end
    }, "Auto_Appraise_Shiny_Sparkling")
    
    appraiseleft:Toggle({
        Name = "Auto Appraise Shiny",
        Default = autoequipfish5,
        Callback = function(t)
            autoequipfish5 = t
            while autoequipfish5 do
                task.wait(autoappraisedelay)
                for hotbarName, isSelected in pairs(selectedHotbarItem) do
                    if isSelected then
                        pcall(function()
                            local selectedItem = game.Players.LocalPlayer.PlayerGui.hud.safezone.backpack.hotbar:FindFirstChild(hotbarName)
                            if selectedItem and selectedItem:FindFirstChild("item") then
                                local itemValue = selectedItem.item.Value
                                local itemmain = tostring(itemValue)
                                local playername = game.Players.LocalPlayer.Name
                                local itemInInventory = game.ReplicatedStorage.playerstats[playername].Inventory:FindFirstChild(itemmain)
                                local famitstheitem
                                for _, v in pairs(game.Players.LocalPlayer.Backpack:GetDescendants()) do
                                    if v.Name == "link" and tostring(v.Value) == itemmain then
                                        famitstheitem = v.Parent
                                        break
                                    end
                                end
                                if itemInInventory and famitstheitem then
                                    local shiny = itemInInventory:FindFirstChild("Shiny")
                                    if shiny then
                                        return
                                    else
                                        game.Players.LocalPlayer.Character.Humanoid:EquipTool(famitstheitem)

                                        local appraiser = workspace:WaitForChild("world"):WaitForChild("npcs"):WaitForChild("Appraiser"):WaitForChild("appraiser")
                                        if appraiser and appraiser:FindFirstChild("appraise") then
                                            appraiser:WaitForChild("appraise"):InvokeServer()
                                        end
                                    end
                                end
                            end
                        end)
                    end
                end
            end
        end
    }, "Auto_Appraise_Shiny")
    
    appraiseleft:Toggle({
        Name = "Auto Appraise Sparkling",
        Default = autoequipfish4,
        Callback = function(t)
            autoequipfish4 = t
            while autoequipfish4 do
                task.wait(autoappraisedelay)
                for hotbarName, isSelected in pairs(selectedHotbarItem) do
                    if isSelected then
                        pcall(function()
                            local selectedItem = game.Players.LocalPlayer.PlayerGui.hud.safezone.backpack.hotbar:FindFirstChild(hotbarName)
                            if selectedItem and selectedItem:FindFirstChild("item") then
                                local itemValue = selectedItem.item.Value
                                local itemmain = tostring(itemValue)
                                local playername = game.Players.LocalPlayer.Name
                                local itemInInventory = game.ReplicatedStorage.playerstats[playername].Inventory:FindFirstChild(itemmain)
                                local famitstheitem
                                for _, v in pairs(game.Players.LocalPlayer.Backpack:GetDescendants()) do
                                    if v.Name == "link" and tostring(v.Value) == itemmain then
                                        famitstheitem = v.Parent
                                        break
                                    end
                                end
                                if itemInInventory and famitstheitem then
                                    local sparkingcuh = itemInInventory:FindFirstChild("Sparkling")
                                    if sparkingcuh then
                                        return
                                    else
                                        game.Players.LocalPlayer.Character.Humanoid:EquipTool(famitstheitem)
                                        local appraiser = workspace:WaitForChild("world"):WaitForChild("npcs"):WaitForChild("Appraiser"):WaitForChild("appraiser")
                                        if appraiser and appraiser:FindFirstChild("appraise") then
                                            appraiser:WaitForChild("appraise"):InvokeServer()
                                        end
                                    end
                                end
                            end
                        end)
                    end
                end
            end
        end
    }, "Auto_Appraise_Sparkling")

    local originalLighting = {}

    miscleft:Toggle({
        Name = "Full Bright",
        Callback = function(state)
            fullbright = state
            Lighting = cloneref(game:GetService("Lighting"))
            
            if fullbright then

                originalLighting.Brightness = Lighting.Brightness
                originalLighting.ClockTime = Lighting.ClockTime
                originalLighting.FogEnd = Lighting.FogEnd
                originalLighting.GlobalShadows = Lighting.GlobalShadows
                originalLighting.OutdoorAmbient = Lighting.OutdoorAmbient

                while fullbright do task.wait()
                    pcall(function()
                        if not fullbright then
                            Lighting.Brightness = originalLighting.Brightness
                            Lighting.ClockTime = originalLighting.ClockTime
                            Lighting.FogEnd = originalLighting.FogEnd
                            Lighting.GlobalShadows = originalLighting.GlobalShadows
                            Lighting.OutdoorAmbient = originalLighting.OutdoorAmbient
                            return
                        end
                        Lighting.Brightness = 2
                        Lighting.ClockTime = 14
                        Lighting.FogEnd = 100000
                        Lighting.GlobalShadows = false
                        Lighting.OutdoorAmbient = Color3.fromRGB(128, 128, 128)
                    end)
                end
            end
        end
    }, "fullbright")

    miscleft:Button({
        Name = "Rejoin",
        Callback = function()
            TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, player)
        end
    })

    miscleft:Button({
        Name = "Server Hop",
        Callback = function()
            serverhop()
        end
    })

    local itemsFolder = ReplicatedStorage.resources.items.items
    local itemOptions = {}

    if itemsFolder then
        for _, item in ipairs(itemsFolder:GetChildren()) do
            if item:IsA("Folder") then
                table.insert(itemOptions, item.Name)
            end
        end
    else
        warn("Items folder not found")
    end

    local selectedItem = ""
    local selectedAmount = 1

    miscleft:Dropdown({
        Name = "Item",
        Default = itemOptions[1] or "None",
        Options = itemOptions,
        Callback = function(Value)
            selectedItem = Value
            print("Item:", selectedItem)
        end    
    })

    miscleft:Input({
        Name = "Amount",
        Default = "Amount",
        TextDisappear = true,
        Callback = function(Value)
            local amount = tonumber(Value)
            if amount and amount > 0 then
                selectedAmount = amount
                print("Amm:", selectedAmount)
            else
                warn("No")
            end
        end      
    })

    miscleft:Button({
        Name = "Buy item",
        Callback = function()
            if selectedItem == "" then
                warn("No item selected")
                return
            end

            ReplicatedStorage.events.purchase:FireServer(selectedItem, "Item", nil, selectedAmount)
        end
    })

    miscright:Header({
        Text = "Other Misc"
    })

    local moneylabel = miscright:Label({Text = "Current Money: "})
    
    local lvllabel = miscright:Label({Text = "Current Level: "})

    task.spawn(function()
        while task.wait(.1) do
            local currentmoney = player.leaderstats["C$"]
            local cleanedmoneyValue = tostring(currentmoney.Value)
            cleanedmoneyValue = cleanedmoneyValue:gsub("[^%d]", "")
            local currentlvl = player.leaderstats.Level
            local cleanedlvlvalue = tostring(currentlvl.Value)
            cleanedlvlvalue = cleanedlvlvalue:gsub("[^%d]", "")
            
            moneylabel:Refresh("Current Money: " .. cleanedmoneyValue)
            lvllabel:Refresh("Current Level: " .. cleanedlvlvalue)
        end
    end)

    miscleft:Divider()

    miscleft:Header({
        Text = "Relics"
    })

    local enchantrelic = {"luck", "power"}
    local enchantselected = {}

    miscleft:Dropdown({
        Name = "Relic To Buy",
        Options = enchantrelic,
        Multi = false,
        Required = false,
        Callback = function(selectedOptions)
            enchantselected = selectedOptions
        end
    }, "relictobuy")

    miscleft:Button({
        Name = "Buy Relic",
        Callback = function()
            humanoidRootPart.Position = Vector3.new(-930, 226, -992)
            task.wait(1)
            local fam = tostring(enchantselected)
            local merlin = workspace:WaitForChild("world"):WaitForChild("npcs"):WaitForChild("Merlin"):WaitForChild("Merlin")
            merlin:WaitForChild(fam):InvokeServer()
        end
    })

    local boats_table = {}
    for i,v in pairs(workspace.active.boats:GetChildren()) do
        if v:IsA("Model") and v:FindFirstChildOfClass("Model") then
            table.insert(boats_table,v.Name)
        end
    end

    boatdropdown = miscright:Dropdown({
        Name = "Boats Currently Spawned In:",
        Default = nil,
        Search = true,
        Multi = false,
        Required = false,
        Options = boats_table,
        Callback = function(t)
            boatselected = t
        end
    }, "boatsspawnedin")

    miscright:Button({
        Name = "Refresh Boat List",
        Callback = function()
            boats_table = {}
            for i,v in pairs(workspace.active.boats:GetChildren()) do
                if v:IsA("Model") and v:FindFirstChildOfClass("Model") then
                    table.insert(boats_table,v.Name)
                end
            end
            boatdropdown:Refresh(boats_table)
        end,
    })

    miscright:Button({
        Name = "Tp Boat's (Doesn't Work)",
        Callback = function()
            for i,v in pairs(workspace.active.boats:GetChildren()) do
                if v.Name == boatselected and v:FindFirstChildOfClass("Model"):FindFirstChildOfClass("Part") then
                    v:FindFirstChildOfClass("Model"):FindFirstChildOfClass("Part").CFrame = CFrame.new(humanoidRootPart.Position + Vector3.new(-3,0,0))
                end
            end
        end
    })

    miscright:Button({
        Name = "Tp To Boat",
        Callback = function()
            for i, v in pairs(workspace.active.boats:GetChildren()) do
                if v.Name == boatselected and v:FindFirstChildOfClass("Model"):FindFirstChildOfClass("Part") then
                    local pivot = v:FindFirstChildOfClass("Model"):GetPivot()
                    local newY = pivot.Position.Y + 30  -- Increase Y by 30
                    local newPivot = CFrame.new(pivot.Position.X, newY, pivot.Position.Z)
                    humanoidRootPart:PivotTo(newPivot)
                end
            end
        end
    })

    miscright:Label({Text = "will literally turn all water in game to ice and will freeze game for a few seconds (not very useful but pretty funny)"})

    miscright:Button({
        Name = "Turn all Water to Ice",
        Callback = function()
            local terrain = workspace.Terrain
            local chunkSize = 500
            local maxHeight = 1000

            for x = -5000, 5000, chunkSize do
                for z = -5000, 5000, chunkSize do
                    local minCorner = Vector3.new(x, 0, z)
                    local maxCorner = Vector3.new(x + chunkSize, maxHeight, z + chunkSize)
                    local region = Region3.new(minCorner, maxCorner)
                    
                    terrain:ReplaceMaterial(region, 4, Enum.Material.Water, Enum.Material.Ice)
                end
            end
        end
    })

    local walkSpeedToggle = false

    miscright:Slider({
        Name = "Walk Speed Slider",
        Minimum = 0,
        Maximum = 300,
        Default = 20,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(t)
            walkspeed = t
        end
    }, "WalkSpeed")

    miscright:Slider({
        Name = "Jump Power Slider",
        Minimum = 0,
        Maximum = 300,
        Default = 40,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(t)
            jumppower = t
        end
    }, "JumpPower")

    local BoatSpeed = 0

    miscright:Slider({
        Name = "Boat Speed",
        Minimum = 0,
        Maximum = 1000,
        Default = 20,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(t)
            BoatSpeed = t
        end
    }, "BoatSpeed")

    miscright:Toggle({
        Name = "Set WalkSpeed",
        Default = false,
        Callback = function(state)
            walkSpeedToggle = state
            while walkSpeedToggle do task.wait()
                humanoid.WalkSpeed = walkspeed
                if not walkSpeedToggle then
                    humanoid.WalkSpeed = 16
                end
            end
        end
    }, "WalkSpeedToggle")

    miscright:Toggle({
        Name = "Set Jump Power",
        Default = false,
        Callback = function(state)
            jumppowertoggle = state
            while jumppowertoggle do task.wait()
                humanoid.JumpPower = jumppower
                if not jumppowertoggle then
                    humanoid.JumpPower = 50
                end
            end
        end
    }, "JumpToggle")

    local function getBoat()
        local boat
        for _,v in pairs(workspace.active.boats:GetChildren()) do
            if v.Name == player.Name then
                for _,x in pairs(v:GetDescendants()) do
                    if x.Name == "Motor" then
                        boat = x
                        break
                    end
                end
                break
            end
        end
        return boat
    end

    local isSettingSpeed = false

    miscright:Toggle({
        Name = "Set Boat Speed",
        Callback = function(state)
            if state then
                isSettingSpeed = true
                while isSettingSpeed do
                    local boat = getBoat()
                    if boat then
                        local direction = boat.Parent.CFrame.LookVector 
                        boat.Velocity = direction * BoatSpeed 
                    end
                    task.wait(0.1)
                end
            else
                isSettingSpeed = false
            end
        end
    }, "setboatspeed")

    local function setupInfiniteJump(humanoid)
        local connection
        connection = UserInputService.JumpRequest:Connect(function()
            if infjump and humanoid:GetState() == Enum.HumanoidStateType.Freefall then
                humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end)

        return connection
    end

    local jumpConnection

    miscright:Toggle({
        Name = "Infinite Jump",
        Default = infjump,
        Callback = function(t)
            infjump = t

            if infjump then
                if humanoid then
                    if jumpConnection then jumpConnection:Disconnect() end
                    jumpConnection = setupInfiniteJump(humanoid)
                end
                
                player.CharacterAdded:Connect(function(newCharacter)
                    if jumpConnection then jumpConnection:Disconnect() end
                    jumpConnection = setupInfiniteJump(humanoid)
                end)
            else
                if jumpConnection then
                    jumpConnection:Disconnect()
                    jumpConnection = nil
                end
            end
        end
    }, "InfJump")

    miscright:Toggle({
        Name = "Noclip",
        Default = noclip,
        Callback = function(t)
            noclip = t
    
            if noclipconnect then
                noclipconnect:Disconnect()
                noclipconnect = nil
            end
    
            local tool = character:FindFirstChildWhichIsA("Tool")
    
            if noclip then
                noclipconnect = RunService.Stepped:Connect(function()
                    local tool = character:FindFirstChildWhichIsA("Tool")
                    for _, descendant in pairs(character:GetDescendants()) do
                        if descendant:IsA("BasePart") and (not tool or not descendant:IsDescendantOf(tool)) then
                            descendant.CanCollide = false
                        end
                    end
                end)
            else
                local tool = character:FindFirstChildWhichIsA("Tool")
                for _, descendant in pairs(character:GetDescendants()) do
                    if descendant:IsA("BasePart") and (not tool or not descendant:IsDescendantOf(tool)) then
                        descendant.CanCollide = true
                    end
                end
            end
        end
    }, "NoClip")

    local fpsboosterexecuted = false

    miscleft:Divider()

    miscleft:Header({
        Text = "Performance Enhancers"
    })

    local fpsboosterexecuted = false
    local descendantAddedConnection

    miscleft:Toggle({
        Name = "FPS Booster",
        Default = false,
        Callback = function(state)
            boostfps = state
            while boostfps do task.wait(2)
                if not fpsboosterexecuted then
                    local Terrain = workspace:FindFirstChildOfClass('Terrain')
                    Terrain.WaterWaveSize = 0
                    Terrain.WaterWaveSpeed = 0
                    Terrain.WaterReflectance = 0
                    Terrain.WaterTransparency = 0
                    local Lighting = game.Lighting
                    Lighting.GlobalShadows = false
                    Lighting.FogEnd = 9e9
                    local userSettings = UserSettings():GetService("UserGameSettings")
                    userSettings.GraphicsQualityLevel = Enum.SavedQualitySetting.QualityLevel1

                    for i,v in pairs(game:GetDescendants()) do
                        if v:IsA("Part") or v:IsA("UnionOperation") or v:IsA("MeshPart") or v:IsA("CornerWedgePart") or v:IsA("TrussPart") then
                            v.Material = "Plastic"
                            v.Reflectance = 0
                        elseif v:IsA("Decal") then
                            v.Transparency = 1
                        elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
                            v.Lifetime = NumberRange.new(0)
                        elseif v:IsA("Explosion") then
                            v.BlastPressure = 1
                            v.BlastRadius = 1
                        end
                    end

                    for i,v in pairs(Lighting:GetDescendants()) do
                        if v:IsA("BlurEffect") or v:IsA("SunRaysEffect") or v:IsA("ColorCorrectionEffect") or v:IsA("BloomEffect") or v:IsA("DepthOfFieldEffect") then
                            v.Enabled = false
                        end
                    end

                    descendantAddedConnection = workspace.DescendantAdded:Connect(function(child)
                        task.spawn(function()
                            if child:IsA('ForceField') then
                                RunService.Heartbeat:Wait()
                                child:Destroy()
                            elseif child:IsA('Sparkles') then
                                RunService.Heartbeat:Wait()
                                child:Destroy()
                            elseif child:IsA('Smoke') or child:IsA('Fire') then
                                RunService.Heartbeat:Wait()
                                child:Destroy()
                            end
                        end)
                    end)
    
                    fpsboosterexecuted = true
                end
                if not boostfps then
                    if descendantAddedConnection then
                        descendantAddedConnection:Disconnect()
                    end
                    fpsboosterexecuted = false
                end
            end
        end
    }, "BoostFps")

    miscleft:Label({
        Text = "Disabling 3D Rendering makes ur screen go white but doesn't effect farming"
    })

    local renderdisabled = false

    miscleft:Toggle({
        Name = "Disable 3D Rendering",
        Default = disablerendering,
        Callback = function(state)
            disablerendering = state
            if disablerendering then
                while disablerendering do task.wait(.5)
                    if not renderdisabled then
                        RunService:Set3dRenderingEnabled(false)
                        renderdisabled = true
                    end
                    if not disablerendering then
                        renderdisabled = false
                        RunService:Set3dRenderingEnabled(true)
                    end
                end
            end
        end
    }, "disable3drendering")

    enchantments = {
        "Sea King",
        "Swift",
        "Long",
        "Ghastly",
        "Lucky",
        "Divine",
        "Mutated",
        "Unbreakable",
        "Steady",
        "Blessed",
        "Wormhole", 
        "Resillient",
        "Controlled",
        "Storming",
        "Breezed",
        "Insight",
        "Scrapper",
        "Quality",
        "Hasty",
        "Noir",
        "Abyssal",
        "Clever"
    }

    local function anyEnchantMatched(enchantpath)
        if not enchantpath or not enchantpath.Value then return false end
        for _, enchant in ipairs(SelectedEnchants) do
            if enchantpath.Value == enchant then
                return true
            end
        end
        return false
    end

    miscautosright:Divider()

    miscautosright:Header({
        Text = "Enchanting"
    })

    miscautosright:Dropdown({
        Name = "Select Enchants to Choose",
        Default = nil,
        Options = enchantments,
        Search = true,
        Multi = true,
        Required = false,
        Callback = function(t)
            SelectedEnchants = {}
            for enchantName, isSelected in pairs(t) do
                if isSelected then
                    table.insert(SelectedEnchants, enchantName)
                end
            end
        end
    }, "selectedenchants")

    miscautosright:Toggle({
        Name = "Auto Enchant",
        Default = autoenchantaltar,
        Callback = function(t)
            autoenchantaltar = t
            if autoenchantaltar then
                pcall(function()
                    local currentRod
                    local printedEnchantMessage = false

                    if backpack then
                        for _, item in ipairs(backpack:GetChildren()) do
                            if item and item.Name and item:IsA("Tool") and string.find(item.Name, "Rod") then
                                currentRod = item.Name
                                print(currentRod)
                                break
                            end
                        end
                    end

                    if not currentRod and character then
                        for _, v in ipairs(character:GetChildren()) do
                            if v and v.Name and v:IsA("Tool") and string.find(v.Name, "Rod") then
                                currentRod = v.Name
                                print(currentRod)
                                break
                            end
                        end
                    end

                    local enchantpath
                    if currentRod and ReplicatedStorage:FindFirstChild("playerstats") then
                        local playerStats = ReplicatedStorage.playerstats:FindFirstChild(player.Name)
                        if playerStats and playerStats.Rods and playerStats.Rods:FindFirstChild(currentRod) then
                            enchantpath = playerStats.Rods[currentRod]
                        end
                    end

                    local interactables = workspace.world.interactables
                    local over = player.PlayerGui:FindFirstChild("over")

                    while autoenchantaltar do task.wait(.5)
                        local success, err = pcall(function()
                            enchanting = false

                            for _, item in ipairs(backpack:GetChildren()) do
                                if string.find(item.Name, "Rod") and item:IsA("Tool") then
                                    currentRod = item.Name
                                else
                                    for _, v in ipairs(character:GetChildren()) do
                                        if string.find(v.Name, "Rod") and v:IsA("Tool") then
                                            currentRod = v.Name
                                        end
                                    end
                                end
                            end

                            enchantpath = ReplicatedStorage.playerstats[player.Name].Rods[currentRod]

                            if anyEnchantMatched(enchantpath) then
                                if not printedEnchantMessage then
                                    warn("Selected Enchant Obtained: " .. enchantpath.Value)
                                    printedEnchantMessage = true
                                end
                            else
                                printedEnchantMessage = false

                                if ReplicatedStorage.world.cycle.Value == "Night" then
                                    if backpack:FindFirstChild("Enchant Relic") then
                                        enchanting = true
                                        local enchantrelic = backpack:FindFirstChild("Enchant Relic")
                                        if enchantrelic then
                                            humanoid:EquipTool(enchantrelic)
                                        end
                                    else
                                        enchanting = false
                                    end

                                    if character:FindFirstChild("Enchant Relic") then
                                        enchanting = true
                                        humanoidRootPart:PivotTo(CFrame.new(1311, -802, -83))
                                        if interactables:FindFirstChild("Enchant Altar") and interactables["Enchant Altar"]:FindFirstChildOfClass("ProximityPrompt") then
                                            fireproximityprompt(interactables["Enchant Altar"]:FindFirstChildOfClass("ProximityPrompt"), 0)
                                            fireproximityprompt(interactables["Enchant Altar"]:FindFirstChildOfClass("ProximityPrompt"), 1)
                                        end
                                    else
                                        enchanting = false
                                    end
                                else
                                    enchanting = false
                                end

                                if over:FindFirstChild("prompt") and over.prompt:FindFirstChild("confirm") and over.prompt.Visible and over.prompt.confirm.Visible and string.find(over.prompt.title.Text, "Enchant") then
                                    firesignal(over.prompt.confirm.MouseButton1Click)
                                end
                            end

                            if not autoenchantaltar then
                                enchanting = false
                            end
                        end)
                        if not success then warn(err) end
                    end
                end)
            end
        end
    }, "Auto_Enchant")

    miscautosleft:Divider()

    miscautosleft:Header({
        Text = "Trading"
    })

    miscautosleft:Label({
        Text = "Dropdown's Are Case Sensitive"
    })

    miscautosleft:Input({
        Name = "Player To Send Item To",
        Default = nil,
        TextDisappear = false,
        Callback = function(Value)
            playertosendto = Value
        end
    }, "playertosendto")

    local items_table = {"1", "2", "3", "4", "5", "6", "7", "8", "9"}

    local itemsdropdown = miscautosleft:Dropdown({
        Name = "Hotbars to Offer",
        Default = appraiseitems,
        Options = items_table,
        Search = true,
        Multi = true,
        Required = false,
        Callback = function(selectedDisplayText)
            itemtooffer = selectedDisplayText
        end
    }, "hotbarsto_offer")

    miscautosleft:Toggle({
        Name = "Auto Offer Selected Items",
        Default = autotrade,
        Callback = function(t)
            autotrade = t
            while autotrade do task.wait(.2)
                pcall(function()
                
                    local selectedItem = player.PlayerGui.hud.safezone.backpack.hotbar[itemtooffer]
                    
                    if selectedItem and selectedItem:FindFirstChild("item") then
                        local itemValue = selectedItem.item.Value
                        local itemmain = tostring(itemValue)
                        local playername = game.Players.LocalPlayer.Name
                        local itemInInventory = ReplicatedStorage.playerstats[playername].Inventory:FindFirstChild(itemmain)
                        
                        if itemInInventory then
                        end
                        
                        local famitstheitem
                        for _, v in pairs(game.Players.LocalPlayer.Backpack:GetDescendants()) do
                            if v.Name == "link" and tostring(v.Value) == tostring(itemValue) then
                                famitstheitem = v.Parent
                                break
                            end
                        end
        
                        if famitstheitem then
                        end
        
                        local character = game.Players.LocalPlayer.Character
                        local backpack = game.Players.LocalPlayer.Backpack
                        
                        if famitstheitem and not character:FindFirstChild(famitstheitem.Name) and backpack:FindFirstChild(famitstheitem.Name) then
                            famitstheitem.Parent = character
                        end
                        
                        if famitstheitem then
                            if character:FindFirstChild(famitstheitem.Name) then
                                local offerButton = character[famitstheitem.Name]:FindFirstChild("offer")
                                if offerButton then
                                    offerButton:FireServer(players:WaitForChild(playertosendto))
                                    task.wait(.1)
                                    game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
                                    task.wait(.1)
                                end
                            end
                        end
                    end
                end)
            end
        end
    }, "autooffer")

    miscautosleft:Toggle({
        Name = "Auto Offer All Items",
        Default = autotrade2,
        Callback = function(t)
            autotrade2 = t
            while autotrade2 do task.wait(.2)

                for _, tool in pairs(backpack:GetChildren()) do
                    if tool:IsA("Tool") then
                        local offerButton = tool:FindFirstChild("offer")
                        if offerButton then
                            task.wait(0.1)
                            tool.Parent = game.Players.LocalPlayer.Character
                            task.wait(0.1)
                            offerButton:FireServer(Players:WaitForChild(playertosendto))
                            task.wait(0.1)
                            game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
                            if autotrade2 == false then break end
                        end
                    end
                end
            end
        end
    }, "autooffer2")

    miscautosleft:Toggle({
        Name = "Auto Accept Offer",
        Default = autoconfirmtradeoffer,
        Callback = function(t)
            autoconfirmtradeoffer = t
            if autoconfirmtradeoffer then
                while autoconfirmtradeoffer do task.wait()
                    pcall(function()
                        for i,v in pairs(player.PlayerGui.hud.safezone.bodyannouncements:GetChildren()) do
                            if v:IsA("Frame") and v.Name == "offer" then
                                repeat task.wait(1) 
                                    button = v:FindFirstChild("confirm")
                                    press(button)
                                    task.wait(.05)
                                until v.Parent == nil or not autoconfirmtradeoffer
                            end
                        end
                    end)
                end
            end
        end
    }, "autoacceptoffer")

    webhookleft:Header({
        Text = "Webhook"
    })

    webhookleft:Input({
        Name = "Input Discord Webhook",
        Default = webhookinput,
        TextDisappear = false,
        Callback = function(Value)
            webhookinput = Value
        end
    }, "webhooktouse")

    webhookleft:Toggle({
        Name = "Auto Log All Fishes [PERSONAL WEBHOOK]",
        Default = autolog,
        Callback = function(t)
            autolog = t
            while autolog do task.wait() 
                pcall(function()
                    for _, v in pairs(player.PlayerGui.hud.safezone.announcements:GetChildren()) do 
                        if v.Name == "catch" and v:FindFirstChild("Main") then 
                            local fishText = v.Main.Text
                            local cleanedText = fishText:gsub("<[^>]->", ""):gsub("You2", ""):gsub("2", " ")
                            local fishName = string.match(cleanedText, "just caught a (.+) at")
                            local vp = v:FindFirstChild("vp")
                            
                            if vp then
                                local tiername = ""
                                local bgColor = vp.BackgroundColor3

                                if bgColor == Color3.fromRGB(142, 187, 191) then
                                    tiername = "Common"
                                elseif bgColor == Color3.fromRGB(192, 135, 198) then
                                    tiername = "Epic"
                                elseif bgColor == Color3.fromRGB(161, 255, 169) then 
                                    tiername = "Uncommon"
                                else 
                                    tiername = "Legendary"
                                end

                                local embedall = {
                                    title = "FISH LOGGER",
                                    description = "NORTH HUB",
                                    color = math.random(0, 16777215),
                                    fields = {
                                        { name = "Fish Caught:", value = fishName or "Unknown" },
                                        { name = "Tier:", value = tiername },
                                    },
                                    image = { url = "https://media0.giphy.com/media/xThtadnnwMz73zdv7G/giphy.gif?cid=6c09b9526fem09845apt5pu7x2zgqcsd8bnwgi8lqlvlo62n&ep=v1_gifs_search&rid=giphy.gif&ct=g" },
                                    footer = { text = ".gg/NorthHub" }
                                }

                                local urlpersonal = webhookinput
                                SendMessageEMBED(urlpersonal, embedall)
                                task.wait(10)
                            end
                        end 
                    end
                end) 
            end 
        end 
    }, "autlogfishall")

    webhookleft:Toggle({
        Name = "Auto Log Epic Fishes",
        Default = autolog2,
        Callback = function(t)
            autolog2 = t 
            while autolog2 do task.wait() 
                pcall(function()
                    for _, v in pairs(player.PlayerGui.hud.safezone.announcements:GetChildren()) do 
                        if v.Name == "catch" and v:FindFirstChild("Main") then 
                            local fishText = v.Main.Text
                            local cleanedText = fishText:gsub("<[^>]->", ""):gsub("You2", ""):gsub("2", " ")
                            local fishName = string.match(cleanedText, "just caught a (.+) at")
                            local vp = v:FindFirstChild("vp")
                            
                            if vp then
                                local bgColor = vp.BackgroundColor3
                                if bgColor == Color3.fromRGB(192, 135, 198) then
                                    local embedall = {
                                        title = "FISH LOGGER - EPIC",
                                        description = "NORTH HUB",
                                        color = math.random(0, 16777215),
                                        fields = {
                                            { name = "Fish Caught:", value = fishName or "Unknown" },
                                            { name = "Tier:", value = "Epic" },
                                        },
                                        thumbnail = { url = "https://media0.giphy.com/media/xThtadnnwMz73zdv7G/giphy.gif?cid=6c09b9526fem09845apt5pu7x2zgqcsd8bnwgi8lqlvlo62n&ep=v1_gifs_search&rid=giphy.gif&ct=g" },
                                        footer = { text = ".gg/NorthHub" }
                                    }
                                    
                                    local urlpersonal = webhookinput
                                    local urlpublic = "https://discord.com/api/webhooks/1296357984976375860/dzU7gN20YW5jRbQq0pqfkEfPUHMRvEWbrnQs_McCQBfFX7qP7Ga3Xb-Nw777n4Pzrr7b"
                                    SendMessageEMBED(urlpersonal, embedall)
                                    task.wait(10)
                                end
                            end
                        end 
                    end
                end) 
            end 
        end 
    }, "autlogfishepic")

    webhookleft:Toggle({
        Name = "Auto Log Uncommon Fishes",
        Default = autolog3,
        Callback = function(t)
            autolog3 = t 
            while autolog3 do task.wait() 
                pcall(function()
                    for _, v in pairs(player.PlayerGui.hud.safezone.announcements:GetChildren()) do 
                        if v.Name == "catch" and v:FindFirstChild("Main") then 
                            local fishText = v.Main.Text
                            local cleanedText = fishText:gsub("<[^>]->", ""):gsub("You2", ""):gsub("2", " ")
                            local fishName = string.match(cleanedText, "just caught a (.+) at")
                            local vp = v:FindFirstChild("vp")
                            
                            if vp then
                                local bgColor = vp.BackgroundColor3
                                if bgColor == Color3.fromRGB(161, 255, 169) then
                                    local embedall = {
                                        title = "FISH LOGGER - UNCOMMON",
                                        description = "NORTH HUB",
                                        color = math.random(0, 16777215),
                                        fields = {
                                            { name = "Fish Caught:", value = fishName or "Unknown" },
                                            { name = "Tier:", value = "Uncommon" },
                                        },
                                        thumbnail = { url = "https://media0.giphy.com/media/xThtadnnwMz73zdv7G/giphy.gif?cid=6c09b9526fem09845apt5pu7x2zgqcsd8bnwgi8lqlvlo62n&ep=v1_gifs_search&rid=giphy.gif&ct=g" },
                                        footer = { text = ".gg/NorthHub" }
                                    }
                                    
                                    local urlpersonal = webhookinput
                                    SendMessageEMBED(urlpersonal, embedall)
                                    task.wait(10)
                                end
                            end
                        end 
                    end
                end) 
            end 
        end 
    }, "autlogfishuncommon")

    webhookleft:Toggle({
        Name = "Auto Log Legendary Fishes",
        Default = autolog4,
        Callback = function(t)
            autolog4 = t
            while autolog4 do task.wait()
                pcall(function()
                    for _, v in pairs(player.PlayerGui.hud.safezone.announcements:GetChildren()) do
                        if v.Name == "catch" and v:FindFirstChild("Main") then
                            local fishText = v.Main.Text
                            local cleanedText = fishText:gsub("<[^>]->", ""):gsub("You2", ""):gsub("2", " ")
                            local fishName = string.match(cleanedText, "just caught a (.+) at")
                            local vp = v:FindFirstChild("vp")

                            if vp then
                                local bgColor = vp.BackgroundColor3
                                if bgColor ~= Color3.fromRGB(142, 187, 191) and bgColor ~= Color3.fromRGB(192, 135, 198) and bgColor ~= Color3.fromRGB(161, 255, 169) then
                                    local embedall = {
                                        title = "FISH LOGGER - LEGENDARY",
                                        description = "North HUB",
                                        color = math.random(0, 16777215),
                                        fields = {
                                            { name = "Fish Caught:", value = fishName or "Unknown" },
                                            { name = "Tier:", value = "Legendary" },
                                        },
                                        thumbnail = { url = "https://media0.giphy.com/media/xThtadnnwMz73zdv7G/giphy.gif?cid=6c09b9526fem09845apt5pu7x2zgqcsd8bnwgi8lqlvlo62n&ep=v1_gifs_search&rid=giphy.gif&ct=g" },
                                        footer = { text = ".gg/NorthHub" }
                                    }

                                    local urlpersonal = webhookinput
                                    SendMessageEMBED(urlpersonal, embedall)
                                    task.wait(10)
                                end
                            end
                        end
                    end
                end)
            end
        end
    }, "autlogfishlegend")

    task.spawn(function()
        while true do task.wait(1)
            player.PlayerGui.hud.Enabled = true
        end
    end)

    MacLib:SetFolder("NorthHubFisch")
    tabs.Settings:InsertConfigSection("Left")

    Window.onUnloaded(function()
        print("Unloaded!")
    end)

    tabs.Main:Select()
    MacLib:LoadAutoLoadConfig()

    task.spawn(function()
        local autohidetimer = os.clock() + 120
        local success = false
        if AutoHide then task.wait()

            UserInputService.InputBegan:Connect(function(input, gameProcessed)
                if not gameProcessed and input.KeyCode == Enum.KeyCode.RightControl then
                    macUI.Enabled = true
                end
            end)

            while os.clock() < autohidetimer do task.wait()
                while macUI and macUI.Enabled do
                    if togglemacUI() then
                        success = true
                        break
                    end
                    task.wait(.1)
                end
                if success then
                    print("auto hide successful")
                    break
                end
            end
        end
    end)
end

if game.GameId == 3808223175  and getgenv().JujutsuInfinite == true then

    playergui = player:FindFirstChild("PlayerGui")

    while not playergui do task.wait()
        playergui = player:FindFirstChild("PlayerGui")
    end

    backpack = player:FindFirstChild("Backpack")

    while not backpack do task.wait()
        backpack = player:FindFirstChild("Backpack")
    end

    local character = player.Character or player.CharacterAdded:Wait()

    while not character do task.wait()
        character = player.Character
    end

    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

    while not humanoidRootPart do task.wait()
        humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    end

    local humanoid = character:FindFirstChildOfClass("Humanoid")

    while not humanoid do task.wait()
        humanoid = character:FindFirstChildOfClass("Humanoid")
    end

    if game.PlaceId == 10450270085 then
        local startTime = os.clock()

        while playergui:WaitForChild("ANGIntro"):GetAttribute("Finished") == false do
            if os.clock() - startTime >= 4 then
                break
            end
            task.wait()
        end

        while not workspace:FindFirstChild("Objects") do
            task.wait()
        end
        while not workspace.Objects:FindFirstChild("NPCs") do
            task.wait()
        end
    end

    if not NetworkClient:FindFirstChild('ClientReplicator') then
        sendNotification("Error", "Current Server is Bugged, serverhopping..", 5)
        task.wait(3)
        serverhop()
    end

    player.CharacterAdded:Connect(function(newCharacter)
        playergui = player:FindFirstChild("PlayerGui")
        character = newCharacter
        humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        humanoid = character:FindFirstChildOfClass("Humanoid")
        backpack = player.Backpack
    end)

    local MacLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/ImSa1f/dwadaw/refs/heads/main/vasst"))()

    local windowWidth = math.clamp(screenSize.X * 0.6, 350, 800)
    local windowHeight = math.clamp(screenSize.Y * 0.6, 200, 650)

    local Window = MacLib:Window({
        Title = "North Hub",
        Subtitle = "discord.gg/northhub",
        Size = UDim2.fromOffset(windowWidth, windowHeight),
        DragStyle = 1,
        DisabledWindowControls = {},
        ShowUserInfo = false,
        Keybind = Enum.KeyCode.RightControl,
        AcrylicBlur = true,
    })

    local macUI

    while not macUI do task.wait()
        for i,v in pairs(coreGui:GetDescendants()) do
            if v.Name == "ScreenGui" and v:FindFirstChild("Base") then
                macUI = v
            end
        end
        for i, x in ipairs(gethui():GetChildren()) do
            if x.Name == "ScreenGui" and x:FindFirstChild("Base") then
                macUI = x
            end
        end
    end


    local function togglemacUI()
        if macUI then
            macUI.Enabled = not macUI.Enabled
            return true
        else
            return false
        end
    end

    local function createButtonUI()
        if not macUI or not macUI.Parent then
            error("macUI or macUI.Parent is not defined")
        end

        local buttonGui = Instance.new("ScreenGui")
        buttonGui.Name = "ButtonUI"
        buttonGui.Parent = macUI.Parent

        local backgroundFrame = Instance.new("Frame")
        backgroundFrame.Name = "BackgroundFrame"
        backgroundFrame.Size = UDim2.new(0, 60, 0, 60)
        backgroundFrame.Position = UDim2.new(1, -70, -0.03, -30)
        backgroundFrame.BackgroundColor3 = Color3.new(1, 0, 0)
        backgroundFrame.BorderSizePixel = 0
        backgroundFrame.BackgroundTransparency = 1 
        backgroundFrame.Parent = buttonGui

        local button = Instance.new("ImageButton")
        button.Name = "OpenButton"
        button.Image = "rbxassetid://107491175530182"
        button.Size = UDim2.new(0, 100, 0, 100)
        button.Position = UDim2.new(0.5, -45, 0.5, -45)
        button.BackgroundTransparency = 1
        button.Parent = backgroundFrame

        return button
    end


    if UserInputService.TouchEnabled then
        local button = createButtonUI()
        button.MouseButton1Click:Connect(togglemacUI)
    end


    local restteleporting = false
    local collectingdrop = false
    local foraging = false

    local MissionRewards = {"Kura Camp Set", "Numa Temple Set", "Shijo Town Set", "Umi Village Set", "Yuki Fortress Set"}
    local SelectedMission = "Yuki Fortress Set"

    local Difficulty = {"Easy", "Medium", "Hard", "Nightmare"}
    local DiffSelected

    local Bosses = {"Finger Bearer", "Ocean Curse", "Soul Curse", "Volcano Curse", "Sorcerer Killer", "Heian Imaginary Demon"}
    local BossSelected

    local InvestigationBoss = {"Cursed School", "Yasohachi Bridge", "Tokyo Subway", "Eerie Farm", "Detention Center"}
    local InvestigationSelected
    
    Innet_Table = {}
    local InnetSelected = {}
    local SlotSelected = {}
    local autoreroll = false
    
    local instantkill = false
    killdistance = 20
    local mobenemy
    local foundQuestWhenInvalid = 0
    local AutoCollectChest = false
    local OnClientInvokeConnection
    foundone = false

    local forage_Table = {}
    local SelectedForages = {}
    local Innate_Bag = {}
    local InnateBagSelected
    local SlotBagSelected

    local waitsliderquest = 20

    local placeID = 119359147980471
    local function teleportPlayer()
        TeleportService:Teleport(placeID)
    end

    local autoreroll = false
    
    pcall(function()
        baseplate = workspace:FindFirstChild("parttt") or Instance.new("Part", workspace)
        baseplate.Name = "parttt"
        baseplate.Size = Vector3.new(10, 0.3, 10)
        baseplate.Anchored = true
        baseplate.CanCollide = true
        baseplate.Transparency = 0.5
    end)

    task.spawn(function()
        while task.wait() do
            pcall(function()
                if not workspace:FindFirstChild("parttt") then
                    baseplate = Instance.new("Part", workspace)
                    baseplate.Name = "parttt"
                    baseplate.Size = Vector3.new(10, 0.3, 10)
                    baseplate.Anchored = true
                    baseplate.CanCollide = true
                    baseplate.Transparency = 0.5
                end
                if workspace:FindFirstChild("parttt") then
                    baseplate = workspace:FindFirstChild("parttt")
                end
            end)
            task.wait(.1)
        end
    end)

    local function followPlayer()
        local playerPosition = humanoidRootPart.Position
        baseplate.Position = Vector3.new(playerPosition.X, playerPosition.Y - 3, playerPosition.Z)
    end

    task.spawn(function()
        pcall(function()
            while task.wait(.05) do
                if not restteleporting then
                    local playerPosition = humanoidRootPart.Position
                    baseplate.Position = Vector3.new(playerPosition.X, playerPosition.Y + 100, playerPosition.Z)
                end
            end
        end)
    end)


    local globalSettings = {
        UIBlurToggle = Window:GlobalSetting({
            Name = "UI Blur",
            Default = Window:GetAcrylicBlurState(),
            Callback = function(bool)
                Window:SetAcrylicBlurState(bool)
                Window:Notify({
                    Title = Window.Settings.Title,
                    Description = (bool and "Enabled" or "Disabled") .. " UI Blur",
                    Lifetime = 5
                })
            end,
        }),
        NotificationToggler = Window:GlobalSetting({
            Name = "Notifications",
            Default = Window:GetNotificationsState(),
            Callback = function(bool)
                Window:SetNotificationsState(bool)
                Window:Notify({
                    Title = Window.Settings.Title,
                    Description = (bool and "Enabled" or "Disabled") .. " Notifications",
                    Lifetime = 5
                })
            end,
        })

        --[[
        ShowUserInfo = Window:GlobalSetting({
            Name = "Show User Info",
            Default = Window:GetUserInfoState(),
            Callback = function(bool)
                Window:SetUserInfoState(bool)
                Window:Notify({
                    Title = Window.Settings.Title,
                    Description = (bool and "Showing" or "Redacted") .. " User Info",
                    Lifetime = 5
                })
            end,
        })
            --]]
    }

    local tabGroups = {
        TabGroup1 = Window:TabGroup()
    }

    local tabs = {
        Main = tabGroups.TabGroup1:Tab({ Name = "Main", Image = "rbxassetid://93139146814165" }),
        Farm = tabGroups.TabGroup1:Tab({ Name = "Farm Settings", Image = "rbxassetid://106804767297733" }),
        Misc = tabGroups.TabGroup1:Tab({ Name = "Misc", Image = "rbxassetid://121157752745208" }),
        Settings = tabGroups.TabGroup1:Tab({ Name = "Settings", Image = "rbxassetid://10734950309" })
    }

    local sections = {
        mainleft = tabs.Main:Section({ Side = "Left" }),
        mainright = tabs.Main:Section({ Side = "Right" }),
        farmleft = tabs.Farm:Section({ Side = "Left" }),
        miscleft = tabs.Misc:Section({ Side = "Left" }),
        miscright = tabs.Misc:Section({ Side = "Right" }),
    }

    local mainleft = sections.mainleft
    local mainright = sections.mainright
    local farmleft = sections.farmleft
    local miscleft = sections.miscleft
    local miscright = sections.miscright

    mainleft:Header({
        Text = "Main"
    })

    mainleft:Dropdown({
        Name = "Mission Reward Selection:",
        Default = nil,
        Options = MissionRewards,
        Search = true,
        Multi = false,
        Required = false,
        Callback = function(selectedNPC)
            SelectedMission = selectedNPC
        end
    }, "SelectedMissionReward")

    mainleft:Toggle({
        Name = "Auto Farm Quest",
        Default = false,
        Callback = function(state)
            autofarmmobs = state
            if autofarmmobs then
                while autofarmmobs do task.wait()
                    local success, err = pcall(function()
                        while playergui.Menu.Enabled and playergui.Menu.MenuButtons.Visible do task.wait()
                            press(playergui.Menu.MenuButtons.Play)
                            task.wait(.5)
                        end
                        if not playergui.StorylineDialogue.Frame.QuestFrame.Visible then
                            local mobsFolder = workspace.Objects.Mobs
                            local connection
                            if not connection then
                                local function onChildAdded(child)
                                    if not child.Name:find("Curse") then
                                    mobenemy = child
                                    end
                                    if connection then
                                        connection:Disconnect()
                                    end
                                end

                                connection = mobsFolder.ChildAdded:Connect(onChildAdded)
                            end
                            local args = {
                                [1] = {
                                    ["type"] = "Band",
                                    ["set"] = SelectedMission,
                                    ["rewards"] = {
                                        ["essence"] = 17,
                                        ["cash"] = 45000,
                                        ["exp"] = 7500000,
                                        ["chestMeter"] = 79
                                    },
                                    ["rewardsText"] = "$45000 | 7500000 EXP | 17 Mission Essence",
                                    ["difficulty"] = 1,
                                    ["title"] = "Defeat a band",
                                    ["amount"] = 1,
                                    ["level"] = 400,
                                    ["subtitle"] = "of 4 curse users",
                                    ["grade"] = "Non Sorcerer"
                                }
                            }

                            ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Data"):WaitForChild("AcceptQuest"):InvokeServer(unpack(args))
                            task.wait(.1)
                        end
                        while collectingdrop or foraging do task.wait()
                            alreadytped = false
                        end
                        if playergui.StorylineDialogue.Frame.QuestFrame.Visible and mobenemy then
                            local mobhumanoid = mobenemy:FindFirstChildOfClass("Humanoid")
                            if mobhumanoid and mobhumanoid.Health >= 0 then
                                local mob_part = getPrimaryPartFunc(mobenemy)
                                if mob_part then
                                    if typeof(mob_part) == "CFrame" then
                                        humanoidRootPart.CFrame = mob_part * CFrame.new(0,-15,0)
                                    elseif typeof(mob_part) == "Instance" then
                                        humanoidRootPart.CFrame = mob_part.CFrame * CFrame.new(0,-15,0)
                                    end
                                end
                                if instantkill then
                                    for _,x in pairs(mobenemy:GetDescendants()) do
                                        if x.Name == "Neck" then
                                            x:Destroy()
                                            break
                                        end
                                    end
                                    task.wait(.2)
                                    mobhumanoid.Health = 0
                                    task.wait(.2)
                                    mobhumanoid.Health = 30
                                    task.wait(.2)
                                    mobhumanoid.Health = 0
                                end
                            end
                            if (mobhumanoid and mobhumanoid.Health == 0 or not mobenemy or not mobenemy.Parent or not mobhumanoid) and playergui.StorylineDialogue.Frame.QuestFrame.Visible then
                                foundQuestWhenInvalid += 1
                                if foundQuestWhenInvalid >= 200 then
                                    for _ = 1,50 do
                                        ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Data"):WaitForChild("CancelQuest"):FireServer()
                                        task.wait(.05)
                                    end
                                    foundQuestWhenInvalid = 0
                                end
                            end
                        end
                        if not playergui.StorylineDialogue.Frame.QuestFrame.Visible then
                            Window:Notify({
                                Title = "North Hub Notification",
                                Description = "Currently resting in safe spot",
                                Lifetime = 15,
                            })
                            local alreadytped = false
                            local restime = os.clock() + waitsliderquest
                            local alreadyset = false
                            while os.clock() < restime and autofarmmobs do task.wait()
                                restteleporting = true
                                local currentY = humanoidRootPart.CFrame.Y
                                if currentY < 3000 and not alreadyset then
                                    targetY = humanoidRootPart.CFrame.Y + 4000 + 1500
                                    alreadyset = true
                                else
                                    if not alreadyset then
                                        targetY = humanoidRootPart.CFrame.Y + 1500
                                        alreadyset = true
                                    end
                                end

                                if currentY >= targetY then
                                    followPlayer()
                                    humanoidRootPart.CFrame = baseplate.CFrame * CFrame.new(0,3,0)
                                else
                                    humanoidRootPart.CFrame = humanoidRootPart.CFrame * CFrame.new(0,math.random(1500, 3000), 0)
                                end
                                while collectingdrop or foraging do task.wait()
                                    alreadyset = false
                                end
                            end
                        end
                        task.wait(.05)
                    end)
                    if not success then
                        warn(err)
                    end
                end
            end
        end
    }, "AutoFarmQuest")

    mainleft:Toggle({
        Name = "Auto Boss",
        Default = false,
        Callback = function(state)
            BossFarm = state
            if BossFarm and game.PlaceId ~= 10450270085 and game.PlaceId ~= 119359147980471 then
                while BossFarm do task.wait()
                    local foundHRP = false

                    task.spawn(function()
                        for i, v in pairs(workspace.Objects.Mobs:GetDescendants()) do
                            if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health ~= 0 then
                                while collectingdrop do
                                    task.wait()
                                end
                                humanoidRootPart.CFrame = v.HumanoidRootPart.CFrame
                                foundHRP = true
                                break
                            end
                        end

                        if not foundHRP then
                            while collectingdrop do
                                task.wait()
                            end
                            humanoidRootPart.CFrame = workspace.Objects.Spawns.BossSpawn.CFrame
                        end
                    end)

                    task.spawn(function()
                        while BossFarm and instantkill do task.wait(.2)
                            pcall(function()
                                local playerRootPart = character:FindFirstChild("HumanoidRootPart")
                                if playerRootPart then
                                    for _, mob in pairs(workspace.Objects.Mobs:GetChildren()) do
                                        if mob:IsA("Model") and mob:FindFirstChild("HumanoidRootPart") then
                                            for _,x in pairs(mob:GetDescendants()) do
                                                if x.Name == "Neck" then
                                                    x:Destroy()
                                                    break
                                                end
                                            end
                                            mob.Humanoid.Health = 0
                                            task.wait(.2)
                                            mob.Humanoid.Health = 30
                                            task.wait(.2)
                                            mob.Humanoid.Health = 0
                                            task.wait(.2)
                                        end
                                    end
                                end
                            end)
                        end
                    end)
                    
                    if foundchest then
                        foundone = true
                    end

                    if not foundHRP and playergui.ReadyScreen.Enabled and playergui.ReadyScreen.Frame.Replay.Visible and foundone then
                        press(playergui.ReadyScreen.Frame.Replay)
                    end
                end
            end
        end
    }, "AutoBoss")

    mainleft:Toggle({
        Name = "Auto Investigate",
        Default = false,
        Callback = function(state)
            autoInvestigate = state
            if autoInvestigate and game.PlaceId ~= 10450270085 then
                local startTime = os.time()
                while autoInvestigate do task.wait()
                    local isBusy = false

                    task.spawn(function()
                        while autoInvestigate do task.wait()
                            if os.time() - startTime > 210 then
                                game:GetService("Players").LocalPlayer.Character:BreakJoints()
                                startTime = os.time() 
                                continue
                            end
                        end
                    end)

                    local success, err = pcall(function()
                        pcall(function()
                            if playergui.StorylineDialogue.Frame.Dialogue.Skip.Visible then
                                task.wait(.1)
                                press(playergui.StorylineDialogue.Frame.Dialogue.Skip)
                            end
    
                            if playergui.ReadyScreen.Frame.Replay.Visible then
                                task.wait(.1)
                                press(playergui.ReadyScreen.Frame.Replay)
                            end
                        end)
    
           
                        task.spawn(function()
                            pcall(function()
                                local playerRootPart = character:FindFirstChild("HumanoidRootPart")
                                if playerRootPart then
                                    for _, mob in pairs(workspace.Objects.Mobs:GetChildren()) do
                                        if not mob.Name:find("Cursed") and not mob.Name:find("Special") and mob:IsA("Model") and mob:FindFirstChild("HumanoidRootPart") and mob.Humanoid.Health ~= 0 then
                                            isBusy = true
                                            if not mob:FindFirstChild("DeathBall") then
                                                if mob.Humanoid.CombatAgent.Statuses:FindFirstChild("IsBoss") then
                                                    task.wait(10)
                                                    if not mob:FindFirstChild("DeathBall") then
                                                        humanoidRootPart.CFrame = mob.HumanoidRootPart.CFrame
                                                        task.wait(0.2)
                                                        for _, x in pairs(mob:GetChildren()) do task.wait(0.3)
                                                            if x.Name == "Head" or x.Name == "LowerTorso" or x.Name == "Neck" or x.Name == "Part" then
                                                                x:Destroy()
                                                                mob.Humanoid.Health = 0
                                                                break
                                                            end
                                                        end
                                                    end
                                                elseif playergui.StorylineDialogue.Frame.QuestFrame.QuestInfo.Task.Description.Text == "Exorcise all curse users" and not mob.Humanoid.CombatAgent.Statuses:FindFirstChild("IsBoss") then
                                                    humanoidRootPart.CFrame = mob.HumanoidRootPart.CFrame
                                                    task.wait(0.2)
                                                    for _, x in pairs(mob:GetChildren()) do task.wait(0.3)
                                                        if x.Name == "Head" or x.Name == "LowerTorso" or x.Name == "Neck" or x.Name == "Part" then
                                                            x:Destroy()
                                                            mob.Humanoid.Health = 0
                                                            break
                                                        end
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                            end)
                        end)
                    
                        task.spawn(function()
                            pcall(function()
                                for _, v in pairs(workspace.Objects.MissionItems:GetChildren()) do
                                    if v.Name:find("Civil") then
                                        isBusy = true
                                        humanoidRootPart.CFrame = v.HumanoidRootPart.CFrame
                                        task.wait(.5)
                                        fireproximityprompt(v.PickUp)
                                        task.wait(.5)
                                        humanoidRootPart.CFrame = workspace.Map.Parts.SpawnLocation.CFrame
                                        break
                                    elseif v.Name:find("Object") then
                                        isBusy = true
                                        humanoidRootPart.CFrame = v.CFrame
                                        task.wait(.5)
                                        fireproximityprompt(v.Collect)
                                    end
                                end
                            end)
                        end)
    
             
                        task.spawn(function()
                            if playergui.StorylineDialogue.Frame.QuestFrame.Visible and playergui.StorylineDialogue.Frame.QuestFrame.QuestInfo.Task.Visible and playergui.StorylineDialogue.Frame.QuestFrame.QuestInfo.Task.Progress.Quantity.Visible and playergui.StorylineDialogue.Frame.QuestFrame.QuestInfo.Task.Description.Text == "Exorcise all curses" then
                                for _, x in pairs(workspace.Objects.Mobs:GetChildren()) do
                                    if not x:FindFirstChild("DeathBall") and x.Humanoid.Health ~= 0 and (x.Name:find('Cursed') or x.Name:find("Special") or x.Name:find("Grade")) then
                                        isBusy = true
                                        humanoidRootPart.CFrame = x.HumanoidRootPart.CFrame
                                        task.wait()
                                        for _, mobneck in pairs(x:GetChildren()) do
                                            if mobneck.Name == "Head" or mobneck.Name == "LowerTorso" or mobneck.Name == "Neck" or mobneck.Name == "Part" then
                                                mobneck:Destroy()
                                                x:BreakJoints()
                                                x.Humanoid.Health = 0
                                                task.wait()
                                                break
                                            end
                                        end
                                        break
                                    end
                                end
                            end
                        end)
                        
             
                        --[[
                        task.spawn(function()
                            pcall(function()
                                for _, x in pairs(workspace.Objects.Mobs:GetChildren()) do
                                    if not x:FindFirstChild("DeathBall") and not x.Name:find('Cursed') and not x.Name:find("Special") then
                                        isBusy = true
                                        humanoidRootPart.CFrame = x.HumanoidRootPart.CFrame
                                        task.wait(.2)
                                        for _, mobneck in pairs(x:GetDescendants()) do
                                            if mobneck.Name == "Neck" or mobneck.Name == "Part" or mobneck.Name == "Head" then
                                                mobneck:Destroy()
                                                break
                                            end
                                        end
                                        break
                                    end
                                end
                            end)
                        end)
                        --]]
                    end)
                    
                    
                    if not isBusy then
                        repeat task.wait() until workspace:FindFirstChild("Map")
                        humanoidRootPart.CFrame = workspace.Map.Parts.SpawnLocation.CFrame
                    end
    
                    if not success then warn(err) end
                end
            end
        end
    }, "AutoInvestigate")

    mainleft:Toggle({
        Name = "Instant Kill",
        Default = false,
        Callback = function(state)
            instakill = state
            if instakill then
                while instakill do task.wait()
                    instantkill = true
                    sethiddenproperty(player, "SimulationRadius", 9e8)
                    if not instakill then
                        instantkill = false
                    end
                end
            end
        end
    }, "InstantKill")


    mainleft:Toggle({
        Name = "Anti Hit",
        Default = false,
        Callback = function(state)
            antihit = state
            if antihit then
                while antihit do task.wait(0.5)
                    local args = {
                        [1] = "Infinity: Mugen"
                    }
                    
                    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Combat"):WaitForChild("Skill"):FireServer(unpack(args))
                end
            end
        end
    }, "AntiHit")
    

    mainleft:Toggle({
        Name = "Kill Aura",
        Default = false,
        Callback = function(state)
            killaura = state
            if killaura then
    
                while killaura do task.wait()
                    local success, err = pcall(function()
                        closestMob = nil
                        for _, mob in pairs(workspace.Objects.Mobs:GetChildren()) do
                            if mob:FindFirstChildOfClass("Humanoid") and mob:FindFirstChildOfClass("Humanoid").Health > 0 then
                                local mobhumanoid = mob:FindFirstChildOfClass("Humanoid")
                                local mobpart = getPrimaryPartFunc(mob)
                                local mobPosition = mobpart.Position

                                if mobPosition then
                                    local distance = (humanoidRootPart.Position - mobPosition).magnitude
                                    if distance < killdistance then
                                        closestDistance = distance
                                        closestMob = mobhumanoid
                                    end
                                end
                            end
                        end

                        if closestMob then
                            for i = 1, 5 do task.wait(0.3)
                                local args = {
                                    [1] = i,
                                    [2] = {
                                        [1] = closestMob
                                    }
                                }

                                ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Combat"):WaitForChild("M1"):FireServer(unpack(args))
                            end
                        end
                    end)
                    if not success then
                        warn(err)
                    end
                end
            end
        end
    }, "KillAura")

    mainleft:Slider({
        Name = "Distance",
        Default = 20,
        Minimum = 20,
        Maximum = 100,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(t)
            killdistance = t
        end
    }, "KillAuraDistance")

    mainleft:Slider({
        Name = "Resting Time",
        Default = waitsliderquest,
        Minimum = 12,
        Maximum = 30,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(t)
            waitsliderquest = t
        end
    }, "RestingTime")
    
    mainright:Header({
        Text = "Sub Main"
    })

    local promotionConditions = {
        [60] = "Grade 4",
        [120] = "Grade 3",
        [180] = "Grade 2",
        [240] = "Grade 1",
        [300] = "Special Grade"
    }
    
    local function getExpectedGrade(level)
        if level >= 300 then
            return "Special Grade"
        elseif level >= 240 then
            return "Grade 1"
        elseif level >= 180 then
            return "Grade 2"
        elseif level >= 120 then
            return "Grade 3"
        elseif level >= 60 then
            return "Grade 4"
        else
            return "Non Sorcerer"
        end
    end

    mainright:Dropdown({
        Name = "Boss To Do :",
        Default = nil,
        Options = Bosses,
        Search = true,
        Multi = false,
        Required = false,
        Callback = function(selectedNPC)
            BossSelected = selectedNPC
        end
    }, "BossToTpTo")

    mainright:Dropdown({
        Name = "Investigation To Do :",
        Default = nil,
        Options = InvestigationBoss,
        Search = true,
        Multi = false,
        Required = false,
        Callback = function(selectedNPC)
            InvestigationSelected = selectedNPC
        end
    }, "InvestigationToTpTo")

    mainright:Dropdown({
        Name = "Difficulty",
        Default = nil,
        Options = Difficulty,
        Search = true,
        Multi = false,
        Required = false,
        Callback = function(selectedNPC)
            DiffSelected = selectedNPC
        end
    }, "DifficultySelected")

    mainright:Button({
        Name = "Create Any Boss Lobby",
        Callback = function()
            if game.PlaceId == 119359147980471 then
                local args = {
                    [1] = "Boss",
                    [2] = BossSelected,
                    [3] = DiffSelected,
                    [4] = ""
                }

                ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Raids"):WaitForChild("CreateLobby"):InvokeServer(unpack(args))
                local args = {
                    [1] = "Boss"
                }

                ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Raids"):WaitForChild("StartLobby"):InvokeServer(unpack(args))
            else
                teleportPlayer()
            end
        end,
    })

    mainright:Button({
        Name = "Create Any Investigation Lobby",
        Callback = function()
            if game.PlaceId == 78904562518018 then
                local args = {
                    [1] = "Investigation",
                    [2] = InvestigationSelected,
                    [3] = DiffSelected,
                    [4] = ""
                }

                ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Raids"):WaitForChild("CreateLobby"):InvokeServer(unpack(args))
                local args = {
                    [1] = "Investigation"
                }

                ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Raids"):WaitForChild("StartLobby"):InvokeServer(unpack(args))
            else
                TeleportService:Teleport(78904562518018)
            end
        end,
    })

    mainright:Toggle({
        Name = "Auto Join Investigation",
        Default = false,
        Callback = function(state)
            autojoininvestigation = state
            if autojoininvestigation and game.PlaceId == 78904562518018 then
                while autojoininvestigation do task.wait(.5)
                    local args = {
                        [1] = "Investigation",
                        [2] = InvestigationSelected,
                        [3] = DiffSelected,
                        [4] = ""
                    }
    
                    ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Raids"):WaitForChild("CreateLobby"):InvokeServer(unpack(args))
                    local args = {
                        [1] = "Investigation"
                    }
    
                    ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Raids"):WaitForChild("StartLobby"):InvokeServer(unpack(args))
                end
            elseif game.PlaceId == 10450270085 then
                TeleportService:Teleport(78904562518018)
            end
        end
    }, "AutoJoinInvestigation")

    mainright:Toggle({
        Name = "Auto Join Boss",
        Default = false,
        Callback = function(state)
            autojoinboss = state
            if autojoinboss and game.PlaceId == 119359147980471 then
                while autojoinboss do task.wait(.5)
                    local args = {
                        [1] = "Boss",
                        [2] = BossSelected,
                        [3] = DiffSelected,
                        [4] = ""
                    }
    
                    ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Raids"):WaitForChild("CreateLobby"):InvokeServer(unpack(args))
                    local args = {
                        [1] = "Boss"
                    }
    
                    ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Raids"):WaitForChild("StartLobby"):InvokeServer(unpack(args))
                end
            elseif game.PlaceId == 10450270085 then
                TeleportService:Teleport(119359147980471)
            end
        end
    }, "AutoJoinBoss")
    
    local blacklist = {}

    farmleft:Header({Text = "Farming Settings"})

    farmleft:Toggle({
        Name = "Auto Promote",
        Default = false,
        Callback = function(state)
            autopromote = state
            if autopromote and game.PlaceId == 10450270085 then
                while autopromote do task.wait(.5)
                    local success, err = pcall(function()
                        local level = player.ReplicatedData.level.Value
                        local grade = player.ReplicatedData.grade.Value
                        local expectedGrade = getExpectedGrade(level)

                        if grade ~= expectedGrade then
                            ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Dialogue"):WaitForChild("GetResponse"):InvokeServer("Clan Head Jujutsu High", "Start")
                            task.wait(Random.new():NextNumber(0.5, 1))
                            ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Dialogue"):WaitForChild("GetResponse"):InvokeServer("Clan Head Jujutsu High", "Promote")
                            task.wait(Random.new():NextNumber(0.5, 1))
                            ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Dialogue"):WaitForChild("DialogueFinished"):FireServer("Clan Head Jujutsu High")
                        end
                    end)
                    if not success then
                        warn("Error during promotion check:", err)
                    end
                end
            end
        end
    }, "AutoPromote")

    farmleft:Toggle({
        Name = "Auto Collect Chests",
        Default = false,
        Callback = function(state)
            AutoCollectChest = state
            pcall(function()
            if AutoCollectChest then
                ReplicatedStorage.Remotes.Client.CollectChest.OnClientInvoke = function(What)
                    if not What then
                        if playergui.Loot.Enabled then
                            return 1
                        else
                            return 0
                        end
                    elseif playergui.Loot.Enabled then
                        return
                    else
                        return true
                    end
                end
                task.spawn(function()
                    while AutoCollectChest do
                        pcall(function()
                        foundchest = false
                        for _, x in pairs(workspace.Objects.Drops:GetChildren()) do
                            if x:IsA("Model") and x:FindFirstChild("Collect") then
                                if not playergui.Loot.Enabled and x.Collect.Enabled then
                                    foundchest = true
                                    task.wait()
                                    fireproximityprompt(x.Collect)
                                end
                            end
                        end
                        task.wait(.1)
                        if not AutoCollectChest then
                            foundchest = false
                        end
                    end)
                    end
                end)
            else
                ReplicatedStorage.Remotes.Client.CollectChest.OnClientInvoke = nil
            end
        end)
        end
    }, "AutoCollectChest")

    farmleft:Toggle({
        Name = "Auto Collect Drops",
        Default = false,
        Callback = function(state)
            autocollect = state
            if autocollect then
                while autocollect do task.wait()
                    collectingdrop = false
                    passedchestcheck = true
                    local success, err = pcall(function()
                        while playergui.Menu.Enabled and playergui.Menu.MenuButtons.Visible do task.wait()
                            press(playergui.Menu.MenuButtons.Play)
                            task.wait(.5)
                        end
                        if workspace:FindFirstChild("Objects") and workspace.Objects:FindFirstChild("Drops") and not playergui.StorylineDialogue.Frame.QuestFrame.Visible then
                            for _,v in pairs(workspace.Objects.Drops:GetDescendants()) do
                                if v:IsA("ProximityPrompt") and v.Enabled and not blacklist[v.Parent] and v.Parent.Name ~= "Chest" and v.Parent.Name ~= "Talisman" then
                                    if v.Parent:FindFirstChild("PlayerOwned") and v.Parent:FindFirstChild("PlayerOwned").Value ~= player then
                                        passedchestcheck = false
                                        blacklist[v.Parent] = true
                                    end
                                    collectingdrop = true
                                    while v and v.Enabled and autocollect and passedchestcheck do task.wait()
                                        local drop_part = getPrimaryPartFunc(v.Parent)
                                        if drop_part then
                                            if typeof(drop_part) == "CFrame" then
                                                humanoidRootPart.CFrame = drop_part * CFrame.new(0,-15,0)
                                            elseif typeof(drop_part) == "Instance" then
                                                humanoidRootPart.CFrame = drop_part.CFrame * CFrame.new(0,-15,0)
                                            end
                                            fireproximityprompt(v)
                                        else
                                            if v.Parent then
                                                blacklist[v.Parent] = true
                                            end
                                            break
                                        end
                                    end
                                end
                            end
                            -- if playergui.Loot.Enabled then
                            --     press(playergui.Loot.Frame.Flip)
                            --     task.wait(.4)
                            -- end
                        end
                    end)
                    if not success then warn(err) end
                    if not autocollect then
                        collectingdrop = false
                    end
                end
            end
        end
    }, "AutoCollectAllDrops")

    farmleft:Toggle({
        Name = "Auto Collect Talisman",
        Default = false,
        Callback = function(state)
            autocollecttalis = state
            if autocollecttalis then
                while autocollecttalis do task.wait()
                    collectingdrop = false
                    passedchestcheck = true
                    local success, err = pcall(function()
                        while playergui.Menu.Enabled and playergui.Menu.MenuButtons.Visible do task.wait()
                            press(playergui.Menu.MenuButtons.Play)
                            task.wait(.5)
                        end
                        if workspace:FindFirstChild("Objects") and workspace.Objects:FindFirstChild("Drops") and not playergui.StorylineDialogue.Frame.QuestFrame.Visible then
                            for _,v in pairs(workspace.Objects.Drops:GetDescendants()) do
                                if v:IsA("ProximityPrompt") and v.Enabled and not blacklist[v.Parent] and v.Parent.Name ~= "Chest" and v.Parent.Name == "Talisman" then
                                    if v.Parent:FindFirstChild("PlayerOwned") and v.Parent:FindFirstChild("PlayerOwned").Value ~= player then
                                        passedchestcheck = false
                                        blacklist[v.Parent] = true
                                    end
                                    collectingdrop = true
                                    while v and v.Enabled and autocollecttalis and passedchestcheck do task.wait()
                                        local drop_part = getPrimaryPartFunc(v.Parent)
                                        if drop_part then
                                            if typeof(drop_part) == "CFrame" then
                                                humanoidRootPart.CFrame = drop_part * CFrame.new(0,-15,0)
                                            elseif typeof(drop_part) == "Instance" then
                                                humanoidRootPart.CFrame = drop_part.CFrame * CFrame.new(0,-15,0)
                                            end
                                            fireproximityprompt(v)
                                        else
                                            if v.Parent then
                                                blacklist[v.Parent] = true
                                            end
                                            break
                                        end
                                    end
                                end
                            end
                            -- if playergui.Loot.Enabled then
                            --     press(playergui.Loot.Frame.Flip)
                            --     task.wait(.4)
                            -- end
                        end
                    end)
                    if not success then warn(err) end
                    if not autocollecttalis then
                        collectingdrop = false
                    end
                end
            end
        end
    }, "AutoCollectTalisman")

    pcall(function()
        if game.PlaceId == 10450270085 then
            for i,v in pairs(workspace.Map.ForageSpots:GetChildren()) do
                if v.Name ~= "Frost Petal" and v.Name ~= "Spring Puff" and not table.find(forage_Table,v.Name) then
                    table.insert(forage_Table,v.Name)
                end
            end
        end
    end)

    farmleft:Toggle({
        Name = "Auto Forage Selected",
        Default = false,
        Callback = function(state)
            autoforage = state
            if autoforage and game.PlaceId == 10450270085 then
                while autoforage do task.wait()
                    foraging = false
                    local success, err = pcall(function()
                        for _, v in pairs(workspace.Map.ForageSpots:GetDescendants()) do
                            if v:IsA("ProximityPrompt") and v.Enabled and not blacklist[v.Parent] and v.Parent.Name ~= "Frost Petal" and v.Parent.Name ~= "Spring Puff" and not collectingdrop then
                                local parentName = v.Parent.Name
                                if #SelectedForages > 0 and table.find(SelectedForages, parentName) then
                                    foraging = true
                                    while v and v.Enabled and autoforage and not blacklist[v.Parent] and not collectingdrop do task.wait()
                                        local forage_part = getPrimaryPartFunc(v.Parent)
                                        if forage_part then
                                            if typeof(forage_part) == "CFrame" then
                                                humanoidRootPart.CFrame = forage_part * CFrame.new(0,-15,0)
                                            elseif typeof(forage_part) == "Instance" then
                                                humanoidRootPart.CFrame = forage_part.CFrame * CFrame.new(0,-15,0)
                                            end
                                            fireproximityprompt(v)
                                        else
                                            if v.Parent then
                                                blacklist[v.Parent] = true
                                            end
                                            break
                                        end
                                    end
                                end
                            end
                        end
                    end)
                    if not success then
                        warn(err)
                    end
                    if not autoforage then
                        collectingdrop = false
                    end
                end
            end
        end
    }, "AutoFarmForages")

    farmleft:Toggle({
        Name = "Auto Use Luck Items",
        Default = false,
        Callback = function(state)
            autouseluck = state
            if autouseluck then
                while autouseluck do task.wait()
                    local luckboost = {"Golden Beckoning Cat", "Polished Beckoning Cat", "Wooden Beckoning Cat", "Withered Beckoning Cat", "Luck Vial"}
                    if game:GetService("Players").LocalPlayer.ReplicatedData.luckBoost.duration.Value == 0 then
                        for _, item in ipairs(luckboost) do
                            local inventoryItem = game:GetService("Players").LocalPlayer.ReplicatedData.inventory:FindFirstChild(item)
                            if inventoryItem and inventoryItem.Value > 0 then
                                local args = {
                                    [1] = item 
                                }
                                
                                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Data"):WaitForChild("EquipItem"):InvokeServer(unpack(args))
                                break
                            end
                            task.wait(3.5)
                        end
                    end
                end
            end
        end
    }, "AutoUseLuck")
    
    farmleft:Toggle({
        Name = "Auto Use Lotus",
        Default = false,
        Callback = function(state)
            autouselotus = state
            if autouselotus then
                local lotuses = {}
                for _, lotus in pairs(game:GetService("Players").LocalPlayer.ReplicatedData.inventory:GetChildren()) do
                    if lotus.Name:find("Lotus") and lotus.Value ~= 0 then
                        table.insert(lotuses, lotus.Name) 
                    end
                end
    
                while autouselotus do task.wait()
                    if not game:GetService("Players").LocalPlayer.PlayerGui.Main.Topbar.Boosts.Lotus.Visible then
                        for _, item in ipairs(lotuses) do
                            local inventoryItem = game:GetService("Players").LocalPlayer.ReplicatedData.inventory:FindFirstChild(item)
                            if inventoryItem and inventoryItem.Value > 0 then
                                local args = {
                                    [1] = item 
                                }
                                
                                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Data"):WaitForChild("EquipItem"):InvokeServer(unpack(args))
                                task.wait(3.5)
                                break 
                            end
                        end
                    end
                end
            end
        end
    }, "AutoUseLotus")
    
    farmleft:Toggle({
        Name = "Server Hop If No Drops",
        Default = false,
        Callback = function(state)
            autocollectshop = state
            if autocollectshop then
                while autocollectshop do task.wait()
                    local success, err = pcall(function()
                        if workspace:FindFirstChild("Objects") and workspace.Objects:FindFirstChild("Drops") then
                            local dropsFound = false
                            for _, v in pairs(workspace.Objects.Drops:GetDescendants()) do
                                if v:IsA("ProximityPrompt") and v.Enabled and v.Parent.Name ~= "Talisman" then
                                    dropsFound = true
                                    break
                                end
                            end
                            if not dropsFound then
                                serverhop()
                            end
                        else
                            serverhop()
                        end
                    end)
                    if not success then
                        warn(err)
                    end
                end
            end
        end
    }, "ShopDrops")

    local foragedropdown = farmleft:Dropdown({
        Name = "Select Forages to Farm",
        Search = true,
        Multi = true,
        Required = false,
        Options = forage_Table,
        Default = nil,
        Callback = function(selectedValues)
            SelectedForages = {}
            for forageName, isSelected in pairs(selectedValues) do
                if isSelected then
                    table.insert(SelectedForages, forageName)
                end
            end
        end,
    }, "ForagesToFarm")

    farmleft:Button({
        Name = "Refresh Forage List",
        Callback = function()
            local forage_Table = {}
            if game.PlaceId == 10450270085 then
                for i,v in pairs(workspace.Map.ForageSpots:GetChildren()) do
                    if v.Name ~= "Frost Petal" and v.Name ~= "Spring Puff" and not table.find(forage_Table,v.Name) then
                        table.insert(forage_Table,v.Name)
                    end
                end
            end
            foragedropdown:Refresh(forage_Table)
        end,
    })

    local Innate_Table = {
        "Boogie Woogie",
        "Blood Manipulation",
        "Blazing Courage",
        "Construction",
        "Cloning Technique",
        "Cursed Speech",
        "Tool Manipulation",
        "Straw Doll",
        "Cryokinesis",
        "Ratio",
        "Heavenly Restriction",
        "Judgeman",
        "Demon Vessel",
        "Soul Manipulation",
        "Hydrokinesis",
        "Infinity",
        "Star Rage",
        "Curse Queen",
        "Gambler Fever",
        "Volcano"
    }

    miscleft:Header({
        Text = "Spinning"
    })

    miscleft:Dropdown({
        Name = "Innate Slot",
        Default = nil,
        Options = {"1", "2", "3", "4"},
        Search = true,
        Multi = true,
        Required = false,
        Callback = function(selectedNPC)
            SlotSelected = {}
            for innateslot, isSelected in pairs(selectedNPC) do
                if isSelected then
                    table.insert(SlotSelected, innateslot)
                end
            end
        end
    }, "SlotToSpin")

    miscleft:Dropdown({
        Name = "Innate To Spin For",
        Default = nil,
        Options = Innate_Table,
        Search = true,
        Multi = true,
        Required = false,
        Callback = function(selectedValues)
            InnateSelected = {}
            for innateName, isSelected in pairs(selectedValues) do
                if isSelected then
                    table.insert(InnateSelected, innateName)
                end
            end
        end
    }, "SelectedInnet")


    local innates = player.ReplicatedData.innates

    local innateLabels = {}
    
    for i = 1, 4 do
        innateLabels[i] = miscleft:Label({Text = "Innate " .. i .. " : " .. innates[tostring(i)].Value})
    end
    
    miscleft:Toggle({
        Name = "Auto ReRoll Innate",
        Default = false,
        Callback = function(state)
            autoreroll = state
            if not autoreroll then return end

            task.spawn(function()
                while autoreroll do task.wait(0.4)
                    for _, slot in ipairs(SlotSelected) do
                        task.spawn(function()
                            local innateFound = false
                            for _, v in pairs(player.ReplicatedData.innates:GetChildren()) do
                                if v.Name == tostring(slot) then
                                    if not table.find(InnateSelected, v.Value) and autoreroll then
                                        local args = {
                                            [1] = tonumber(slot)
                                        }
                                        local success, errorMessage = pcall(function()
                                            ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Data"):WaitForChild("InnateSpin"):InvokeServer(unpack(args))
                                        end)
                                        task.wait()
                                        if not success then
                                            warn("Error ", slot, ": ", errorMessage)
                                        end
                                    end
                                end
                            end
                        end)
                    end
                end
            end)
            
            task.spawn(function()
                while autoreroll do task.wait()
                    for i = 1, 4 do
                        local success, err = pcall(function()
                            innateLabels[i]:Refresh("Innate " .. i .. " : " .. innates[tostring(i)].Value)
                        end)
    
                        if not success then
                            warn("Failed to refresh innate label " .. i .. ": " .. err)
                        end
                    end
                end
            end)
        end
    }, "rerollInnates")

    miscleft:Divider()

    miscleft:Header({
        Text = "Unlock Innate Slots"
    })

    local innateamm

    miscleft:Slider({
        Name = "Innate Slots : ",
        Minimum = 0,
        Maximum = 15,
        Default = 4,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(t)
            innateamm = t
        end
    }, "InnatesToUnlock")

    miscleft:Button({
        Name = "Unlock Innates",
        Callback = function()
            local args = {
                [1] = innateamm
            }

            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Data"):WaitForChild("InnateSpin"):InvokeServer(unpack(args))
            task.wait(.5)
            serverhop()
        end
    })

    miscleft:Divider()

    miscleft:Header({
        Text = "Innate Bag"
    })

    for i, v in pairs(game:GetService("Players").LocalPlayer.ReplicatedData.innatebag:GetChildren()) do
        if v:IsA("BoolValue") then
            table.insert(Innate_Bag, v.Name)
        end
    end

    local InnateBagDropdown = miscleft:Dropdown({
        Name = "Slot To Equip",
        Default = nil,
        Options = {"1", "2", "3", "4"},
        Search = true,
        Multi = false,
        Required = false,
        Callback = function(selectedInnate)
            SlotBagSelected = selectedInnate
        end
    }, "SlotToEquipBag")

    local InnateBagDropdown = miscleft:Dropdown({
        Name = "Innate Bag",
        Default = nil,
        Options = Innate_Bag,
        Search = true,
        Multi = false,
        Required = false,
        Callback = function(selectedValues)
            InnateBagSelected = selectedValues
        end
    }, "InnateBagSelected")
    
    miscleft:Button({
        Name = "Equip Innate",
        Callback = function()
            local args = {
                [1] = SlotBagSelected,
                [2] = InnateBagSelected
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Data"):WaitForChild("SetInnateBag"):FireServer(unpack(args))
        end,
    })
    
    miscleft:Button({
        Name = "Refresh Innate Bag",
        Callback = function()
            Innate_Bag = {}
            for i, v in pairs(game:GetService("Players").LocalPlayer.ReplicatedData.innatebag:GetChildren()) do
                if v:IsA("BoolValue") then
                    table.insert(Innate_Bag, v.Name)
                end
            end
            InnateBagDropdown:Refresh(Innate_Bag)
        end,
    })

    miscleft:Header({
        Text = "Sub Misc"
    })

    local walkSpeedToggle = false

    miscleft:Slider({
        Name = "Walk Speed Slider",
        Minimum = 0,
        Maximum = 300,
        Default = 20,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(t)
            walkspeed = t
        end
    }, "WalkSpeed")

    miscleft:Slider({
        Name = "Jump Power Slider",
        Minimum = 0,
        Maximum = 300,
        Default = 40,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(t)
            jumppower = t
        end
    }, "JumpPower")

    miscleft:Toggle({
        Name = "Set WalkSpeed",
        Default = false,
        Callback = function(state)
            walkSpeedToggle = state
            while walkSpeedToggle do task.wait()
                humanoid.WalkSpeed = walkspeed
                if not walkSpeedToggle then
                    humanoid.WalkSpeed = 16
                end
            end
        end
    }, "WalkSpeedToggle")

    miscleft:Toggle({
        Name = "Set Jump Power",
        Default = false,
        Callback = function(state)
            jumppowertoggle = state
            while jumppowertoggle do task.wait()
                humanoid.JumpPower = jumppower
                if not jumppowertoggle then
                    humanoid.JumpPower = 50
                end
            end
        end
    }, "JumpToggle")

    local function setupInfiniteJump(humanoid)
        local connection
        connection = UserInputService.JumpRequest:Connect(function()
            if infjump and humanoid:GetState() == Enum.HumanoidStateType.Freefall then
                humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end)

        return connection
    end

    local jumpConnection

    miscleft:Toggle({
        Name = "Infinite Jump",
        Default = infjump,
        Callback = function(t)
            infjump = t

            if infjump then
                if humanoid then
                    if jumpConnection then jumpConnection:Disconnect() end
                    jumpConnection = setupInfiniteJump(humanoid)
                end
                
                player.CharacterAdded:Connect(function(newCharacter)
                    if jumpConnection then jumpConnection:Disconnect() end
                    jumpConnection = setupInfiniteJump(humanoid)
                end)
            else
                if jumpConnection then
                    jumpConnection:Disconnect()
                    jumpConnection = nil
                end
            end
        end
    }, "InfJump")

    miscleft:Toggle({
        Name = "Noclip",
        Default = noclip,
        Callback = function(t)
            noclip = t
    
            if noclipconnect then
                noclipconnect:Disconnect()
                noclipconnect = nil
            end
    
            local tool = character:FindFirstChildWhichIsA("Tool")
    
            if noclip then
                noclipconnect = RunService.Stepped:Connect(function()
                    local tool = character:FindFirstChildWhichIsA("Tool")
                    for _, descendant in pairs(character:GetDescendants()) do
                        if descendant:IsA("BasePart") and (not tool or not descendant:IsDescendantOf(tool)) then
                            descendant.CanCollide = false
                        end
                    end
                end)
            else
                local tool = character:FindFirstChildWhichIsA("Tool")
                for _, descendant in pairs(character:GetDescendants()) do
                    if descendant:IsA("BasePart") and (not tool or not descendant:IsDescendantOf(tool)) then
                        descendant.CanCollide = true
                    end
                end
            end
        end
    }, "NoClip")

    NPCs_Table = {}
    if game.PlaceId == 10450270085 then
        for i, v in pairs(workspace.Objects.NPCs:GetChildren()) do 
            if v:IsA("Model") and not table.find(NPCs_Table, v.Name) then
                table.insert(NPCs_Table, v.Name)
            end
        end
    end

    miscright:Header({
        Text = "Teleports"
    })

    tpsdropdown = miscright:Dropdown({
        Name = "NPC to Tp to",
        Default = nil,
        Options = NPCs_Table,
        Search = true,
        Multi = false,
        Required = false,
        Callback = function(selectedNPC)
            NPCtotp = selectedNPC
        end
    }, "npctoteleportto")

    tpsdropdown = miscright:Dropdown({
        Name = "Portal to Tp to",
        Default = nil,
        Options = Portals_Table,
        Search = true,
        Multi = false,
        Required = false,
        Callback = function(selectedNPC)
            Portaltotp = selectedNPC
        end
    }, "portaltoteleportto")

    miscright:Button({
        Name = "Tp To Selected NPC",
        Callback = function()
            if game.PlaceId == 10450270085 then
                for i, v in pairs(workspace.Objects.NPCs:GetChildren()) do 
                    if v:IsA("Model") and v.Name == NPCtotp then
                        local partofthing = getPrimaryPartFunc(v)
                        if partofthing then
                            humanoidRootPart.CFrame = partofthing.CFrame
                        end
                    end
                end
            end
        end
    })

    Portals_Table = {} 
    if game.PlaceId == 10450270085 then
        for i, v in pairs(workspace.Objects.Portals:GetChildren()) do 
            if v:IsA("BasePart") and not table.find(Portals_Table, v.Name) then
                table.insert(Portals_Table, v.Name)
            end
        end
    end

    miscright:Button({
        Name = "Tp To Selected Portal",
        Callback = function()
            for i, v in pairs(workspace.Objects.Portals:GetChildren()) do 
                if v:IsA("BasePart") and v.Name == Portaltotp then
                    local partofthing = getPrimaryPartFunc(v)
                    if partofthing then
                        humanoidRootPart.CFrame = partofthing.CFrame
                    end
                end
            end
        end
    })

    miscright:Button({
        Name = "Tp To Spawn",
        Callback = function()
            humanoidRootPart.CFrame = CFrame.new(-405, 4470, -15656)
        end
    })

    miscright:Button({
        Name = "Refresh NPC List",
        Callback = function()
            NPCs_Table = {}
            if game.PlaceId == 10450270085 then
                for i, v in pairs(workspace.Objects.NPCs:GetChildren()) do 
                    if v:IsA("Model") and not table.find(NPCs_Table, v.Name) then
                        table.insert(NPCs_Table, v.Name)
                    end
                end
            end
            tpsdropdown:Refresh(NPCs_Table)
        end,
    })

    miscright:Divider()

    miscright:Header({
        Text = "Other Stuff"
    })

    miscright:Button({
        Name = "Reset Character",
        Callback = function()
            if game.PlaceId ~= 5130598377 and game.PlaceId ~= 8008202756 then
                humanoid.Health = 0
            end
        end
    })

    local fpsboosterexecuted = false
    local descendantAddedConnection

    miscright:Toggle({
        Name = "FPS Booster",
        Default = false,
        Callback = function(state)
            boostfps = state
            while boostfps do task.wait(2)
                if not fpsboosterexecuted then
                    local Terrain = workspace:FindFirstChildOfClass('Terrain')
                    Terrain.WaterWaveSize = 0
                    Terrain.WaterWaveSpeed = 0
                    Terrain.WaterReflectance = 0
                    Terrain.WaterTransparency = 0
                    local Lighting = game.Lighting
                    Lighting.GlobalShadows = false
                    Lighting.FogEnd = 9e9
                    local userSettings = UserSettings():GetService("UserGameSettings")
                    userSettings.GraphicsQualityLevel = Enum.SavedQualitySetting.QualityLevel1

                    for i,v in pairs(game:GetDescendants()) do
                        if v:IsA("Part") or v:IsA("UnionOperation") or v:IsA("MeshPart") or v:IsA("CornerWedgePart") or v:IsA("TrussPart") then
                            v.Material = "Plastic"
                            v.Reflectance = 0
                        elseif v:IsA("Decal") then
                            v.Transparency = 1
                        elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
                            v.Lifetime = NumberRange.new(0)
                        elseif v:IsA("Explosion") then
                            v.BlastPressure = 1
                            v.BlastRadius = 1
                        end
                    end

                    for i,v in pairs(Lighting:GetDescendants()) do
                        if v:IsA("BlurEffect") or v:IsA("SunRaysEffect") or v:IsA("ColorCorrectionEffect") or v:IsA("BloomEffect") or v:IsA("DepthOfFieldEffect") then
                            v.Enabled = false
                        end
                    end

                    descendantAddedConnection = workspace.DescendantAdded:Connect(function(child)
                        task.spawn(function()
                            if child:IsA('ForceField') then
                                RunService.Heartbeat:Wait()
                                child:Destroy()
                            elseif child:IsA('Sparkles') then
                                RunService.Heartbeat:Wait()
                                child:Destroy()
                            elseif child:IsA('Smoke') or child:IsA('Fire') then
                                RunService.Heartbeat:Wait()
                                child:Destroy()
                            end
                        end)
                    end)
    
                    fpsboosterexecuted = true
                end
                if not boostfps then
                    if descendantAddedConnection then
                        descendantAddedConnection:Disconnect()
                    end
                    fpsboosterexecuted = false
                end
            end
        end
    }, "BoostFps")

    miscright:Label({
        Text = "Disabling 3D Rendering makes ur screen go white and doesn't effect autofarming"
    })
    
    local renderdisabled = false

    miscright:Toggle({
        Name = "Disable 3D Rendering",
        Default = false,
        Callback = function(state)
            disablerendering = state
            while disablerendering do task.wait(.5)
                if not renderdisabled then
                    RunService:Set3dRenderingEnabled(false)
                    renderdisabled = true
                end
                if not disablerendering then
                    renderdisabled = false
                    RunService:Set3dRenderingEnabled(true)
                end
            end
        end
    }, "Disable3dRendering")

    local redeemedCodes = {} 

    miscright:Toggle({
        Name = "Redeem Codes",
        Default = false,
        Callback = function(state)
            RedeemCode = state
            if RedeemCode then
                while RedeemCode do task.wait()
                    local codes = {"RELEASE", "50K_FOLLOWERS"}
                    for _, v in ipairs(codes) do task.wait()
                        if not redeemedCodes[v] then
                            local Result = ReplicatedStorage.Remotes.Server.Data.RedeemCode:InvokeServer(v)
                            if Result == "Redeemed" then
                                redeemedCodes[v] = true
                            end
                        end
                    end
                end
            end
        end
    },"RedeemCodes")
    

    --[[
    miscright:Button({
        Name = "Wipe All Data",
        Callback = function()
            Window:Dialog({
                Title = "North Hub",
                Description = "This will wipe your data but in doing so you get to redeem codes again and spin again. TL;DR: Inf spins but wipes your data",
                Buttons = {
                    {
                        Name = "Confirm",
                        Callback = function()
                            ReplicatedStorage.Remotes.Server.Data.GiveItem:FireServer("reset" )
        
                            serverhop()
                        end,
                    },
                    {
                        Name = "Cancel"
                    }
                }
            })
        end
    })
     --]]

    MacLib:SetFolder("NorthHubJJI")
    tabs.Settings:InsertConfigSection("Left")

    Window.onUnloaded(function()
        print("Unloaded!")
    end)

    tabs.Main:Select()
    MacLib:LoadAutoLoadConfig()
    task.spawn(function()
        local autohidetimer = os.clock() + 120
        local success = false
        if AutoHide then task.wait()

            UserInputService.InputBegan:Connect(function(input, gameProcessed)
                if not gameProcessed and input.KeyCode == Enum.KeyCode.RightControl then
                    macUI.Enabled = true
                end
            end)
            
            while os.clock() < autohidetimer do task.wait()
                while macUI and macUI.Enabled do
                    if togglemacUI() then
                        success = true
                        break
                    end
                    task.wait(.1)
                end
                if success then
                    print("auto hide successful")
                    break
                end
            end
        end
    end)
end

if game.GameId == 1578260208 and getgenv().SwordBloxOnlineRebirth == true then

    local character = player.Character or player.CharacterAdded:Wait()

    while not character do task.wait()
        character = player.Character
    end

    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

    while not humanoidRootPart do task.wait()
        humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    end

    local humanoid = character:FindFirstChildOfClass("Humanoid")

    while not humanoid do task.wait()
        humanoid = character:FindFirstChildOfClass("Humanoid")
    end

    player.CharacterAdded:Connect(function(newCharacter)
        character = newCharacter
        humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        humanoid = character:FindFirstChildOfClass("Humanoid")
    end)

    local camera = workspace.Camera
    local screenWidth = camera.ViewportSize.X
    local screenHeight = camera.ViewportSize.Y

    local clickX = math.floor(screenWidth * 0.99)
    local clickY = math.floor(screenHeight * 0.99)

    task.wait(2)

    --// ADONIS BYPASS Breaks Luarmor tho :(\\
    -- local g = getinfo or debug.getinfo
    -- local d = false
    -- local h = {}

    -- local x, y

    -- setthreadidentity(2)

    -- for i, v in getgc(true) do
    --     if typeof(v) == "table" then
    --         local a = rawget(v, "Detected")
    --         local b = rawget(v, "Kill")

    --         if typeof(a) == "function" and not x then
    --             x = a

    --             local o; o = hookfunction(x, function(c, f, n)
    --                 if c ~= "_" then
    --                     if d then
    --                         warn(`Adonis AntiCheat flagged\nMethod: {c}\nInfo: {f}`)
    --                     end
    --                 end

    --                 return true
    --             end)

    --             table.insert(h, x)
    --         end

    --         if rawget(v, "Variables") and rawget(v, "Process") and typeof(b) == "function" and not y then
    --             y = b
    --             local o; o = hookfunction(y, function(f)
    --                 if d then
    --                     warn(`Adonis AntiCheat tried to kill (fallback): {f}`)
    --                 end
    --             end)

    --             table.insert(h, y)
    --         end
    --     end
    -- end

    -- local o; o = hookfunction(getrenv().debug.info, newcclosure(function(...)
    --     local a, f = ...

    --     if x and a == x then
    --         if d then
    --             warn(`adonis bypassed`)
    --         end

    --         return coroutine.yield(coroutine.running())
    --     end

    --     return o(...)
    -- end))

    -- setthreadidentity(7)

    local MacLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/ImSa1f/dwadaw/refs/heads/main/vasst"))()

    local windowWidth = math.clamp(screenSize.X * 0.6, 350, 800)
    local windowHeight = math.clamp(screenSize.Y * 0.6, 200, 650)

    local Window = MacLib:Window({
        Title = "North Hub",
        Subtitle = "discord.gg/northhub",
        Size = UDim2.fromOffset(windowWidth, windowHeight),
        DragStyle = 1,
        DisabledWindowControls = {},
        ShowUserInfo = false,
        Keybind = Enum.KeyCode.RightControl,
        AcrylicBlur = true,
    })

    local macUI

    while not macUI do task.wait()
        for i,v in pairs(coreGui:GetDescendants()) do
            if v.Name == "ScreenGui" and v:FindFirstChild("Base") then
                macUI = v
            end
        end
        for i, x in ipairs(gethui():GetChildren()) do
            if x.Name == "ScreenGui" and x:FindFirstChild("Base") then
                macUI = x
            end
        end
    end

    local function togglemacUI()
        if macUI then
            macUI.Enabled = not macUI.Enabled
            return true
        else
            return false
        end
    end

    local function createButtonUI()
        if not macUI or not macUI.Parent then
            error("macUI or macUI.Parent is not defined")
        end

        local buttonGui = Instance.new("ScreenGui")
        buttonGui.Name = "ButtonUI"
        buttonGui.Parent = macUI.Parent

        local backgroundFrame = Instance.new("Frame")
        backgroundFrame.Name = "BackgroundFrame"
        backgroundFrame.Size = UDim2.new(0, 60, 0, 60)
        backgroundFrame.Position = UDim2.new(1, -70, -0.03, -30)
        backgroundFrame.BackgroundColor3 = Color3.new(1, 0, 0)
        backgroundFrame.BorderSizePixel = 0
        backgroundFrame.BackgroundTransparency = 1 
        backgroundFrame.Parent = buttonGui

        local button = Instance.new("ImageButton")
        button.Name = "OpenButton"
        button.Image = "rbxassetid://107491175530182"
        button.Size = UDim2.new(0, 100, 0, 100)
        button.Position = UDim2.new(0.5, -45, 0.5, -45)
        button.BackgroundTransparency = 1
        button.Parent = backgroundFrame

        return button
    end

    local button = createButtonUI()
    button.MouseButton1Click:Connect(togglemacUI)

    farmingboss = false
    initialtponmob = false
    initialtponboss = false

    pcall(function()
        baseplate = workspace:FindFirstChild("parttt") or Instance.new("Part", workspace)
        baseplate.Name = "parttt"
        baseplate.Size = Vector3.new(10, 0.3, 10)
        baseplate.Anchored = true
        baseplate.CanCollide = true
        baseplate.Transparency = 0.5
    end)

    task.spawn(function()
        while task.wait() do
            pcall(function()
                if not workspace:FindFirstChild("parttt") then
                    baseplate = Instance.new("Part", workspace)
                    baseplate.Name = "parttt"
                    baseplate.Size = Vector3.new(10, 0.3, 10)
                    baseplate.Anchored = true
                    baseplate.CanCollide = true
                    baseplate.Transparency = 0.5
                end
                if workspace:FindFirstChild("parttt") then
                    baseplate = workspace:FindFirstChild("parttt")
                end
            end)
            task.wait(.1)
        end
    end)

    local function followPlayer()
        local playerPosition = humanoidRootPart.Position
        baseplate.Position = Vector3.new(playerPosition.X, playerPosition.Y - 3, playerPosition.Z)
    end

    task.spawn(function()
        pcall(function()
            while task.wait(.05) do
                if not farmingboss and not farmingmob then
                    local playerPosition = humanoidRootPart.Position
                    baseplate.Position = Vector3.new(playerPosition.X, playerPosition.Y + 100, playerPosition.Z)
                end
            end
        end)
    end)

    local globalSettings = {
        UIBlurToggle = Window:GlobalSetting({
            Name = "UI Blur",
            Default = Window:GetAcrylicBlurState(),
            Callback = function(bool)
                Window:SetAcrylicBlurState(bool)
                Window:Notify({
                    Title = Window.Settings.Title,
                    Description = (bool and "Enabled" or "Disabled") .. " UI Blur",
                    Lifetime = 5
                })
            end,
        }),
        NotificationToggler = Window:GlobalSetting({
            Name = "Notifications",
            Default = Window:GetNotificationsState(),
            Callback = function(bool)
                Window:SetNotificationsState(bool)
                Window:Notify({
                    Title = Window.Settings.Title,
                    Description = (bool and "Enabled" or "Disabled") .. " Notifications",
                    Lifetime = 5
                })
            end,
        }),
        ShowUserInfo = Window:GlobalSetting({
            Name = "Show User Info",
            Default = Window:GetUserInfoState(),
            Callback = function(bool)
                Window:SetUserInfoState(bool)
                Window:Notify({
                    Title = Window.Settings.Title,
                    Description = (bool and "Showing" or "Redacted") .. " User Info",
                    Lifetime = 5
                })
            end,
        })
    }

    local tabGroups = {
        TabGroup1 = Window:TabGroup()
    }

    local tabs = {
        Main = tabGroups.TabGroup1:Tab({ Name = "Main", Image = "rbxassetid://93139146814165" }),
        Misc = tabGroups.TabGroup1:Tab({ Name = "Misc", Image = "rbxassetid://121157752745208" }),
        Settings = tabGroups.TabGroup1:Tab({ Name = "Settings", Image = "rbxassetid://10734950309" })
    }

    local sections = {
        mainleft = tabs.Main:Section({ Side = "Left" }),
        mainright = tabs.Main:Section({ Side = "Right" }),
        miscleft = tabs.Misc:Section({ Side = "Left" }),
        miscright = tabs.Misc:Section({ Side = "Right" }),
    }

    local mainleft = sections.mainleft
    local mainright = sections.mainright
    local farmleft = sections.farmleft
    local miscleft = sections.miscleft
    local miscright = sections.miscright

    mainleft:Header({
        Text = "Main"
    })

    local Mobs_Table = {}
    if workspace:FindFirstChild("Mobs") then
        for i,v in pairs(workspace.Mobs:GetChildren()) do 
            if v:IsA("Model") and v:FindFirstChildOfClass("Humanoid") and not table.find(Mobs_Table,v.Config.Entity.Value) then 
                table.insert(Mobs_Table,v.Config.Entity.Value)
            end
        end
    end

    local mobsdropdown = mainleft:Dropdown({
        Name = "Mobs to Farm",
        Search = true,
        Multi = true,
        Required = false,
        Options = Mobs_Table,
        Default = nil,
        Callback = function(selectedValues)
            SelectedMobs = {}
            for mobName, isSelected in pairs(selectedValues) do
                if isSelected then
                    table.insert(SelectedMobs, mobName)
                end
            end
        end,
    }, "MobsToFarm")

    mainleft:Button({
        Name = "Refresh Mobs List",
        Callback = function()
            local Mobs_Table = {}
            if workspace:FindFirstChild("Mobs") then
                for i,v in pairs(workspace.Mobs:GetChildren()) do 
                    if v:IsA("Model") and v:FindFirstChildOfClass("Humanoid") and not table.find(Mobs_Table,v.Config.Entity.Value) then 
                        table.insert(Mobs_Table,v.Config.Entity.Value)
                    end
                end
            end
            mobsdropdown:Refresh(Mobs_Table)
        end,
    })

    DistanceY = -20

    mainleft:Slider({
        Name = "Farm Mob Height",
        Default = -20,
        Minimum = -50,
        Maximum = 50,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(t)
            DistanceY = t
        end
    }, "FarmMobHeight")

    local function calculateFaceDirection(yAxis)
        if yAxis > 0 then
            return CFrame.Angles(math.rad(-90), 0, 0)
        elseif yAxis < 0 then
            return CFrame.Angles(math.rad(90), 0, 0)
        else
            return CFrame.new()
        end
    end

    local targetPart
    local targetPart2

    mainleft:Toggle({
        Name = "Auto Farm Mobs",
        Default = false,
        Callback = function(state)
            autofarmmobs = state
            if autofarmmobs and workspace:FindFirstChild("Mobs") then
                while autofarmmobs do task.wait()
                    local success, err = pcall(function()
                        if player and character and humanoidRootPart and not farmingboss then
                            farmingmob = false
                            closestMob = nil
                            local closestDistance = math.huge
                            
                            for _, mobName in ipairs(SelectedMobs) do
                                for _, v in pairs(workspace.Mobs:GetChildren()) do
                                    if v:IsA("Model") and v:FindFirstChild("Config") and v.Config:FindFirstChild("Entity") and v.Config.Entity.Value == mobName and v:FindFirstChildOfClass("Humanoid").Health > 0 then
                                        local mobHumanoidRootPart = getPrimaryPartFunc(v)
                                        if mobHumanoidRootPart then
                                            local distance = (humanoidRootPart.Position - mobHumanoidRootPart.Position).Magnitude
                                            
                                            if distance < closestDistance then
                                                closestMob = v
                                                closestDistance = distance
                                            end
                                        end
                                    end
                                end
                            end

                            if closestMob then
                                local targetPart = getPrimaryPartFunc(closestMob)
                                if targetPart then
                                    if closestMob:FindFirstChildOfClass("Humanoid") and closestMob:FindFirstChildOfClass("Humanoid").Health > 0 and autofarmmobs and not farmingboss then
                                        farmingmob = true
                                        if typeof(targetPart) == "CFrame" then
                                            humanoidRootPart.CFrame = targetPart * CFrame.new(0, DistanceY, 0) * calculateFaceDirection(DistanceY)
                                        elseif typeof(targetPart) == "Instance" then
                                            humanoidRootPart.CFrame = targetPart.CFrame * CFrame.new(0, DistanceY, 0) * calculateFaceDirection(DistanceY)
                                        end
                                        followPlayer()
                                    end
                                end
                            end
                        end
                    end)
                    if not success then warn(err) end
                end
                if not autofarmmobs then
                    if closestMob then
                        local targetPart = getPrimaryPartFunc(closestMob)
                        if targetPart then
                            local tp_timer = os.clock() + 0.1
                            while os.clock() < tp_timer do task.wait()
                                humanoidRootPart.CFrame = targetPart.CFrame * CFrame.new(0, 5, 0)
                            end
                        end
                    else
                        if DistanceY > 1 then
                            tpnumber = 4
                        else
                            tpnumber = math.abs(DistanceY) + 5
                        end
                        humanoidRootPart.CFrame = humanoidRootPart.CFrame * CFrame.new(0, tpnumber, 0)
                    end
                end
            end
        end
    }, "Auto_Farm_Mobs")

    -- task.spawn(function()
    --     while task.wait() do
    --         if autofarmmobs and targetPart then
    --             local distance = (humanoidRootPart.Position - targetPart.Position).Magnitude
    --             if distance < 100 then
    --                 vim:SendMouseButtonEvent(clickX, clickY, 0, true, game, 1)
    --                 vim:SendMouseButtonEvent(clickX, clickY, 0, false, game, 0)
    --                 task.wait(.33)
    --             end
    --         end
    --     end
    -- end)

    -- bossspawns = {
    --     [floor2] = CFrame.new(-986, 1927, -726)
    --     [Floor3] = CFrame.new(953, 2495, 592)
    -- }

    mainleft:Toggle({
        Name = "Auto Farm Boss",
        Default = false,
        Callback = function(state)
            autofarmboss = state
            if autofarmboss and workspace:FindFirstChild("Mobs") then
                local currentboss
                while autofarmboss do task.wait()
                    farmingboss = false
                    initialtponboss = false
                    for _, v in pairs(workspace.Mobs:GetChildren()) do
                        if v:IsA("Model") and v:FindFirstChild("IsBoss") and v:FindFirstChildOfClass("Humanoid") and v:FindFirstChildOfClass("Humanoid").Health > 0 then
                            targetPart2 = getPrimaryPartFunc(v)
                            if targetPart2 then
                                farmingboss = true
                                if v:FindFirstChildOfClass("Humanoid") and v:FindFirstChildOfClass("Humanoid").Health > 0 and autofarmboss then
                                    if typeof(targetPart2) == "CFrame" then
                                        humanoidRootPart.CFrame = targetPart2 * CFrame.new(0, DistanceY, 0) * calculateFaceDirection(DistanceY)
                                    elseif typeof(targetPart2) == "Instance" then
                                        humanoidRootPart.CFrame = targetPart2.CFrame * CFrame.new(0, DistanceY, 0) * calculateFaceDirection(DistanceY)
                                    end
                                    followPlayer()
                                end
                            end
                        else
                            for _,x in pairs(workspace.Map:GetChildren()) do
                                if x.Name:find("BossFloor") or x.Name:find("BossPlatform") then
                                    humanoidRootPart.CFrame = (x:FindFirstChildOfClass("UnionOperation").CFrame or x:FindFirstChildOfClass("Part").CFrame) * CFrame.new(0,-40,0)
                                    followPlayer()
                                end
                            end
                        end
                    end
                end
                if not autofarmboss then
                    if currentboss then
                        targetPart2 = getPrimaryPartFunc(currentboss)
                        local tp_timer = os.clock() + 0.1
                        while os.clock() < tp_timer do task.wait()
                            humanoidRootPart.CFrame = targetPart2.CFrame * CFrame.new(0, 5, 0)
                        end
                    else
                        if DistanceY > 1 then
                            tpnumber = 4
                        else
                            tpnumber = math.abs(DistanceY) + 5
                        end
                        humanoidRootPart.CFrame = humanoidRootPart.CFrame * CFrame.new(0, tpnumber, 0)
                    end
                end
            end
        end
    }, "autofarmboss")

    -- task.spawn(function()
    --     while task.wait() do
    --         if autofarmboss and targetPart2 then
    --             local distance = (humanoidRootPart.Position - targetPart.Position).Magnitude
    --             if distance < 100 then
    --                 vim:SendMouseButtonEvent(clickX, clickY, 0, true, game, 1)
    --                 vim:SendMouseButtonEvent(clickX, clickY, 0, false, game, 0)
    --                 task.wait(.33)
    --             end
    --         end
    --     end
    -- end)

    mainleft:Toggle({
        Name = "Farm All Ore",
        Default = false,
        Callback = function(state)
            autoallore = state
            if autoallore then
                local Blacklist = {}

                while autoallore do task.wait(Random.new():NextNumber(0.1,0.2))
                    local success, err = pcall(function()
                        for _,v in pairs(workspace.Materials:GetDescendants()) do
                            if v:IsA("NumberValue") and v.Name == "Id" and not Blacklist[v] and autoallore then
                                ReplicatedStorage.ClaimMaterial:InvokeServer(v.Value)
                                Blacklist[v] = true
                                task.delay(3, function()
                                    Blacklist[v] = false
                                end)
                            end
                        end
                    end)
                    if not success then warn(err) end
                end
            end
        end
    }, "Auto_All_Ore")

    mainleft:Toggle({
        Name = "Kill Aura",
        Default = false,
        Callback = function(state)
            killaura = state
            if killaura then
                local clickX = math.floor(screenWidth * 0.001)
                local clickY = math.floor(screenHeight * 0.001)
                local script = player.PlayerGui.CLIENT
                local ran, env = pcall(function() return getsenv(script) end)

                if not ran then
                    return warn(env)
                end

                local SearchFor = {"swordslashes", "swordanims", "slashIndex"}
                local function getRelevantTables()
                    local foundTables = {}

                    for _, v in pairs(env) do
                        if typeof(v) == "function" then
                            for i, upvalue in ipairs(getupvalues(v)) do
                                if typeof(upvalue) == "table" then
                                    for key, _ in pairs(upvalue) do
                                        if table.find(SearchFor, key) then
                                            table.insert(foundTables, {table = upvalue, index = i, func = v})
                                            break
                                        end
                                    end
                                end
                            end
                        end
                    end

                    return foundTables
                end

                local foundTables = getRelevantTables()

                if #foundTables == 0 then
                    return warn("No relevant tables found!")
                end

                while killaura do task.wait()
                    pcall(function()
                        for _, v in pairs(workspace.Mobs:GetChildren()) do
                            if v:FindFirstChildOfClass("Humanoid") and v:FindFirstChildOfClass("Humanoid").Health > 0 then
                                local mobtargetpart = getPrimaryPartFunc(v)
                                local distance = (humanoidRootPart.Position - mobtargetpart.Position).Magnitude
                                if distance < 50 then
                                    foundTables = getRelevantTables()

                                    for _, data in ipairs(foundTables) do
                                        local v1 = data.table
                                        local i1 = data.index
                                        local func = data.func

                                        for i, v in pairs(v1) do
                                            if i == "slashDeb" then
                                                v1[i] = 0
                                            end
                                        end
                                    end

                                    env["slash"]()
                                    task.wait(Random.new():NextNumber(0.4, 0.6))
                                end
                            end
                        end
                    end)
                end
            end
        end
    }, "Kill_Aura")

    alreadygodded = false

    mainleft:Toggle({
        Name = "Godmode",
        Default = false,
        Callback = function(state)
            godmode = state
            if godmode then
                while godmode do task.wait()
                    if not alreadygodded then
                        ReplicatedStorage:WaitForChild("ZSwitching"):FireServer(true)
                        player.CharacterAdded:Connect(function(newCharacter)
                            ReplicatedStorage:WaitForChild("ZSwitching"):FireServer(true)
                        end)
                        alreadygodded = true
                        task.wait(.5)
                    end
                    task.wait(1)
                    if not godmode then
                        ReplicatedStorage:WaitForChild("ZSwitching"):FireServer(false)
                    end
                end
                if not godmode then
                    ReplicatedStorage:WaitForChild("ZSwitching"):FireServer(false)
                end
            end
        end
    }, "godmode")

    mainleft:Toggle({
        Name = "Inf Stamina",
        Default = false,
        Callback = function(state)
            infstamina = state
            if infstamina then

                local PlayerStats = player.PlayerGui:FindFirstChild("GameGui")
                local Stamina = PlayerStats and PlayerStats:FindFirstChild("Stamina")
                local maxstam = player:FindFirstChild("PlayerStats") and player.PlayerStats:FindFirstChild("MaxStamina")

                local connection

                if Stamina and maxstam then
                    Stamina.Value = maxstam.Value
                    connection = Stamina:GetPropertyChangedSignal("Value"):Connect(function()
                        if Stamina.Value ~= maxstam.Value then
                            Stamina.Value = maxstam.Value
                        end
                    end)
                end

                RunService.Stepped:Connect(function()
                    if not infstamina then
                        if connection then
                            connection:Disconnect()
                            connection = nil
                        end
                    end
                end)
            end
        end
    }, "Inf Stamina")

    mainright:Divider()

    mainright:Header({
        Text = "Stat Features"
    })

    Stats_Table = {
        "Strength", "Vitality",
        "Defense", "Luck",
        "Agility"
    }

    mainright:Dropdown({
        Name = "Select Stat to Invest",
        Default = nil,
        Options = Stats_Table,
        Search = true,
        Multi = false,
        Required = false,
        Callback = function(t)
            selectedstat = t
        end
    }, "SelectedStat")

    mainright:Toggle({
        Name = "Auto Stat",
        Default = false,
        Callback = function(state)
            autostat = state
            while autostat do task.wait(Random.new():NextNumber(0.33,0.5))
                local success, err = pcall(function()
                    local playerstats = player.PlayerStats
                    local statvalue = playerstats[selectedstat].Value + 1
                    ReplicatedStorage.StatsEvent:FireServer(selectedstat, statvalue)
                    ReplicatedStorage.UpdateChar:InvokeServer(true)
                end)
                if not success then warn(err) end
            end
        end
    }, "Auto_Stat")

    mainright:Button({
        Name = "Reset Stats",
        Callback = function()
            for _ = 1,10 do
                local playerstats = player.PlayerStats
                for _,v in pairs(playerstats:GetChildren()) do
                    for _,x in ipairs(Stats_Table) do
                        if v.Name == x and v.Value ~= 0 then
                            ReplicatedStorage.StatsEvent:FireServer(v.Name, 0)
                            ReplicatedStorage.UpdateChar:InvokeServer(true)
                        end
                    end
                end
                task.wait(.1)
            end
        end
    })

    mainright:Divider()

    mainright:Header({
        Text = "Stat Display"
    })

    local Stats = {
        "Level", "Col", "Strength", "Vitality",
        "Defense", "Agility", "Luck", "LevelPoints",
        "One-HandedSkill", "Two-HandedSkill", "RapierSkill",
        "DaggerSkill", "SmithingSkill", "TailoringSkill"
    }
    
    local labels = {}
    local lastValues = {}
    
    for _, stat in ipairs(Stats) do
        labels[stat] = mainright:Label({ Text = stat .. ": Loading..."})
        lastValues[stat] = nil
    end
    
    task.spawn(function()
        while task.wait() do
            for _, stat in ipairs(Stats) do
                local statValue = player.PlayerStats[stat] and player.PlayerStats[stat].Value or "N/A"
                statValue = tostring(statValue):gsub("[^%d]", "")
    
                if statValue ~= lastValues[stat] then
                    labels[stat]:Refresh(stat .. ": " .. statValue)
                    lastValues[stat] = statValue
                end
            end
        end
    end)

    miscright:Header({
        Text = "Teleports"
    })

    local Npc_Table = {}
    if workspace:FindFirstChild("QuestGivers") then
        for i,v in pairs(workspace.QuestGivers:GetChildren()) do 
            if v:IsA("Model") and v:FindFirstChildOfClass("Humanoid") and not table.find(Npc_Table,v.Config.Entity.Value) then 
                table.insert(Npc_Table,v.Config.Entity.Value)
            end
        end
    end

    local npcdropdown =  miscright:Dropdown({
        Name = "Npc To Teleport To",
        Default = npctotpto,
        Options = Npc_Table,
        Search = true,
        Multi = false,
        Required = false,
        Callback = function(t)
            npctotpto = t
        end
    }, "NpcToTpTo")

    miscright:Button({
        Name = "Teleport To Npc",
        Callback = function()
            for i,v in pairs(workspace.QuestGivers:GetChildren()) do 
                if v.Config.Entity.Value == npctotpto then 
                    humanoidRootPart:PivotTo(v.HumanoidRootPart.CFrame * CFrame.new(0,5,0))
                end
            end
        end
    })

    miscright:Button({
        Name = "Refresh Npc List",
        Callback = function()
            local Npc_Table = {}
            if workspace:FindFirstChild("QuestGivers") then
                for i,v in pairs(workspace.QuestGivers:GetChildren()) do
                    if v:IsA("Model") and v:FindFirstChildOfClass("Humanoid") and not table.find(Npc_Table,v.Config.Entity.Value) then
                        table.insert(Npc_Table,v.Config.Entity.Value)
                    end
                end
                npcdropdown:Refresh(Npc_Table)
            end
        end
    })

    miscright:Button({
        Name = "Teleport to Spawn",
        Callback = function()
            for i,v in pairs(workspace.TeleportPads:GetDescendants()) do
                if v.Name:find("Spawn") then
                    local spawnpart = getPrimaryPartFunc(v)
                    if typeof(spawnpart) == "CFrame" then
                        humanoidRootPart.CFrame = spawnpart * CFrame.new(0, 5, 0)
                    elseif typeof(spawnpart) == "Instance" then
                        humanoidRootPart.CFrame = spawnpart.CFrame * CFrame.new(0, 5, 0)
                    end
                end
            end
        end
    })

    miscright:Button({
        Name = "Teleport to Boss",
        Callback = function()
            for _,v in pairs(workspace.Map:GetDescendants()) do
                if v.Name:find("BossFloor") or v.Name:find("BossPlatform") then
                    humanoidRootPart.CFrame = (v:FindFirstChildOfClass("UnionOperation").CFrame or v:FindFirstChildOfClass("Part").CFrame) * CFrame.new(0,5,0)
                end
            end
        end
    })

    miscright:Button({
        Name = "Teleport to Shop",
        Callback = function()
            shopnpcfound = false
            if workspace:FindFirstChild("Map") and workspace.Map:FindFirstChild("Interior") and workspace:FindFirstChild("Interactions") then
                for _,v in pairs(workspace.Interactions:GetChildren()) do
                    if v.Name == "Merchant" and v:FindFirstChildOfClass("Model") and v:FindFirstChildOfClass("Model").Name == "" and v.Id.Value ~= 461066949.8455768 then
                        shopnpcfound = true
                        local shoppart = getPrimaryPartFunc(v)
                        humanoidRootPart.CFrame = shoppart.CFrame * CFrame.new(0,0,5)
                    end
                end
                if not shopnpcfound then
                    for _,v in pairs(workspace.Interactions:GetDescendants()) do
                        if v:IsA("Model") and v:FindFirstChildOfClass("StringValue") and v:FindFirstChildOfClass("StringValue").Value == "Shop" then
                            local shoppart = getPrimaryPartFunc(v)
                            if typeof(shoppart) == "CFrame" then
                                humanoidRootPart.CFrame = shoppart * CFrame.new(0, 5, 0)
                            elseif typeof(shoppart) == "Instance" then
                                humanoidRootPart.CFrame = shoppart.CFrame * CFrame.new(0, 5, 0)
                            end
                        end
                    end
                end
            end
        end
    })

    miscright:Button({
        Name = "Teleport to Terminal (Floor 2 Quest Complete)",
        Callback = function()
            local floorlabel = player.PlayerGui.GameGui["MenuGui-NEW"].FrontRight.Menu.Frames.Map.FrameB.MainFrame.FloorNumber

            local currentfloor = floorlabel.Text:match("%d+")
            if currentfloor == "2" then
                humanoidRootPart:PivotTo(CFrame.new(53, -323, 305))
            end
        end
    })

    local HttpService = game:GetService("HttpService")
    local TeleportService = game:GetService("TeleportService")
    local Players = game:GetService("Players")
    local PlaceID = game.PlaceId

    local function tp()
        local HttpService = game:GetService("HttpService")
        local PlaceID = game.PlaceId
        local TeleportService = game:GetService("TeleportService")
        local httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
        if httprequest then
            local servers = {}
            local req = httprequest({Url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true", PlaceID)})
            local body = HttpService:JSONDecode(req.Body)

            if body and body.data then
                for _, v in ipairs(body.data) do
                    if type(v) == "table" and v.playing < v.maxPlayers and v.id ~= game.JobId then
                        table.insert(servers, v.id)
                    end
                end
            end

            if #servers > 0 then
                TeleportService:TeleportToPlaceInstance(PlaceID, servers[math.random(1, #servers)], player)
            end
        end
    end

    miscleft:Header({
        Text = "Useful Misc"
    })

    miscleft:Toggle({
        Name = "Anti Staff",
        Default = false,
        Callback = function(state)
            antistaff = state
            local startTime = os.clock()
            while antistaff do task.wait(.3)
                local success, err = pcall(function()
                    for _,v in pairs(players:GetPlayers()) do
                        if v:GetRankInGroup(5683480) >= 201 then
                            while os.clock() - startTime < 4 do task.wait(.1)
                                tp()
                            end
                            player:Kick(v:GetRoleInGroup(5683480).." Joined.\n\nGroupID:"..v:GetRankInGroup(5683480))
                        end
                    end
                end)
                if not success then warn(err) end
            end
        end
    }, "Anti_Staff")

    local AllIDs = {}
    local foundAnything = ""
    local actualHour = os.date("!*t").hour
    local Deleted = false
    local File = pcall(function()
        AllIDs = httpService:JSONDecode(readfile("NotSameServers.json"))
    end)
    if not File then
        table.insert(AllIDs, actualHour)
        writefile("NotSameServers.json", httpService:JSONEncode(AllIDs))
    end
    function TPReturner()
        local Site;
        if foundAnything == "" then
            Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
        else
            Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
        end
        local ID = ""
        if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
            foundAnything = Site.nextPageCursor
        end
        local num = 0;
        for i,v in pairs(Site.data) do
            local Possible = true
            ID = tostring(v.id)
            if tonumber(v.maxPlayers) > tonumber(v.playing) then
                for _,Existing in pairs(AllIDs) do
                    if num ~= 0 then
                        if ID == tostring(Existing) then
                            Possible = false
                        end
                    else
                        if tonumber(actualHour) ~= tonumber(Existing) then
                            local delFile = pcall(function()
                                delfile("NotSameServers.json")
                                AllIDs = {}
                                table.insert(AllIDs, actualHour)
                            end)
                        end
                    end
                    num = num + 1
                end
                if Possible == true then
                    table.insert(AllIDs, ID)
                    task.wait()
                    pcall(function()
                        writefile("NotSameServers.json", httpService:JSONEncode(AllIDs))
                        task.wait()
                        TeleportService:TeleportToPlaceInstance(PlaceID, ID, player)
                    end)
                    task.wait(4)
                end
            end
        end
    end

    function Teleport()
        while task.wait() do
            pcall(function()
                TPReturner()
                if foundAnything ~= "" then
                    TPReturner()
                end
            end)
        end
    end

    miscleft:Button({
        Name = "Teleport to Lowest Server",
        Callback = function()
            Teleport()
        end
    })

    esp_settings = {
        textsize = 14,
        colour = Color3.fromRGB(255, 255, 255)
    }

    function createESP(model, textLabelContent)
        local gui = Instance.new("BillboardGui")
        gui.Name = "Cracked esp"
        gui.ResetOnSpawn = false
        gui.AlwaysOnTop = true
        gui.LightInfluence = 0
        gui.Size = UDim2.new(1.75, 0, 1.75, 0)
        gui.Parent = model
    
         function createTextLabel(text, color, strokeColor)
            local textLabel = Instance.new("TextLabel")
            textLabel.Size = UDim2.new(0.0001, 0.00001, 0.0001, 0.00001)
            textLabel.BackgroundTransparency = 1
            textLabel.BorderSizePixel = 0
            textLabel.Font = Enum.Font.GothamSemibold
            textLabel.TextSize = esp_settings.textsize
            textLabel.TextColor3 = color
            textLabel.TextStrokeTransparency = 0.5
            textLabel.TextStrokeColor3 = strokeColor
            textLabel.Text = text
            textLabel.Parent = gui
            return textLabel
        end
    
         textColor = Color3.fromRGB(255, 255, 255) 
         strokeColor = Color3.fromRGB(0, 0, 0) 
         textLabel = createTextLabel(textLabelContent, textColor, strokeColor)
        
        return textLabel
    end
    
    local function playerESPHandler()
        local playerPosition = humanoidRootPart.Position
        for _, v in pairs(players:GetChildren()) do
            if v ~= player and v.Character and v.Character:FindFirstChild("Head") then
                local distance = (playerPosition - v.Character.Head.Position).magnitude
                local existingESP = v.Character.Head:FindFirstChild("Cracked esp")
                if distance <= espmaxdistancePlayersStuds then
                    if not existingESP then
                        createESP(v.Character.Head, "{" .. v.Name .. " : ALIVE }")
                    end
                end
            end
        end
    end

    local function createMobESP(model, textLabelContent)
        local gui = Instance.new("BillboardGui")
        gui.Name = "Cracked esp"
        gui.ResetOnSpawn = false
        gui.AlwaysOnTop = true
        gui.LightInfluence = 0
        gui.Size = UDim2.new(1.75, 0, 1.75, 0)
        gui.Parent = model
    
        local textLabel = Instance.new("TextLabel")
        textLabel.Size = UDim2.new(0.5, 0, 0.5, 0)
        textLabel.BackgroundTransparency = 1
        textLabel.BorderSizePixel = 0
        textLabel.Font = Enum.Font.GothamSemibold
        textLabel.TextSize = esp_settings.textsize
        textLabel.TextColor3 = esp_settings.colour
        textLabel.TextStrokeTransparency = 0.5
        textLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0) 
        textLabel.Text = textLabelContent
        textLabel.Parent = gui
    end
    
    local function updateMobESP(model)
        local existingESP = model:FindFirstChild("Cracked esp")
        if existingESP then
            local textColor = Color3.fromRGB(255, 0, 0) 
            local textLabel = existingESP:FindFirstChildOfClass("TextLabel")
            if textLabel then
                textLabel.TextColor3 = textColor
                textLabel.Text = "{" .. model.Config.Entity.Value .. " : ALIVE }"
            end
        end
    end
    
    local function mobESPHandler()
        local playerPosition = humanoidRootPart.Position
        for _, mob in pairs(workspace.Mobs:GetChildren()) do
            if mob:IsA("Model") and mob:FindFirstChildOfClass("Humanoid") then
                local targetpart = getPrimaryPartFunc(mob)
                local distance = (playerPosition - targetpart.Position).magnitude
                if distance > espmaxdistanceStuds then
                    local existingESP = mob:FindFirstChild("Cracked esp")
                    if existingESP then
                        existingESP:Destroy()
                    end
                else
                    if not mob:FindFirstChild("Cracked esp") then
                        createMobESP(mob, "{" .. mob.Config.Entity.Value .. " : ALIVE }")
                    else
                        updateMobESP(mob)
                    end
                end
            end
        end
    end

    chestUpdateConnections = {}
    espmaxdistanceStuds = 100  
    espmaxdistancePlayersStuds = 100  
    studsToMeters = 0.196850394

    miscleft:Slider({
        Name = "Mob ESP Distance (meters)",
        Minimum = 1,
        Maximum = 5000,
        Default = 100,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(newDistanceMeters)
            espmaxdistanceStuds = newDistanceMeters / studsToMeters
        end
    }, "mobespdistance")

    miscleft:Toggle({
        Name = "MOB ESP",
        Default = mobesp,
        Callback = function(state)
            mobesp = state
            if mobesp then
                mobESPConnection = RunService.Stepped:Connect(mobESPHandler)
            else
                if mobESPConnection then
                    mobESPConnection:Disconnect()
                    mobESPConnection = nil
                    for _, mob in pairs(workspace.Mobs:GetChildren()) do
                        if mob:IsA("Model") and mob:FindFirstChildOfClass("Humanoid") then
                            local existingESP = mob:FindFirstChild("Cracked esp")
                            if existingESP then
                                existingESP:Destroy()
                            end
                        end
                    end
                end
            end
        end
    }, "mobesp")

    miscleft:Slider({
        Name = "PLAYER ESP Distance (meters)",
        Minimum = 1,
        Maximum = 5000,
        Default = 100,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(newDistanceMeters)
            espmaxdistancePlayersStuds = newDistanceMeters / studsToMeters
        end
    }, "playerespdistance")
    
    miscleft:Toggle({
        Name = "PLAYER ESP",
        Default = playeresp,
        Callback = function(state)
            playeresp = state
            if playeresp then
                playerESPConnection = RunService.Stepped:Connect(playerESPHandler)
            else
                if playerESPConnection then
                    playerESPConnection:Disconnect()
                    playerESPConnection = nil
                    for _, v in pairs(players:GetChildren()) do
                        if v ~= player and v.Character and v.Character:FindFirstChild("Head") then
                            local existingESP = v.Character.Head:FindFirstChild("Cracked esp")
                            if existingESP then
                                existingESP:Destroy()
                            end
                        end
                    end
                end
            end
        end
    }, "playeresp")

    local walkSpeedToggle = false
    
    miscleft:Slider({
        Name = "Walk Speed Slider",
        Minimum = 0,
        Maximum = 200,
        Default = 20,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(t)
            walkspeed = t
        end
    }, "walkspeedamount")

    miscleft:Slider({
        Name = "Jump Power Slider",
        Minimum = 0,
        Maximum = 200,
        Default = 50,
        DisplayMethod = "Round",
        Precision = 0,
        Callback = function(t)
            jumppower = t
        end
    }, "JumpPoweramount")
    
    miscleft:Toggle({
        Name = "Set Walk Speed",
        Default = false,
        Callback = function(state)
            walkSpeedToggle = state
            while walkSpeedToggle do task.wait()
                humanoid.WalkSpeed = walkspeed
                if not walkSpeedToggle then
                    humanoid.WalkSpeed = 16
                end
            end
        end
    }, "walkspeechange")

    miscleft:Toggle({
        Name = "Set Jump Power",
        Default = false,
        Callback = function(state)
            jumppowertoggle = state
            while jumppowertoggle do task.wait()
                humanoid.JumpPower = jumppower
                if not jumppowertoggle then
                    humanoid.JumpPower = 50
                end
            end
        end
    }, "jumppowerchange")
    
    local function setupInfiniteJump(humanoid)
        local connection
        connection = UserInputService.JumpRequest:Connect(function()
            if infjump and humanoid:GetState() == Enum.HumanoidStateType.Freefall then
                humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end)
    
        return connection
    end
    
    local jumpConnection
    
    miscleft:Toggle({
        Name = "Infinite Jump",
        Default = infjump,
        Callback = function(t)
            infjump = t

            if infjump then
                local humanoid = player.Character and player.Character:FindFirstChild("Humanoid")
                if humanoid then
                    if jumpConnection then jumpConnection:Disconnect() end
                    jumpConnection = setupInfiniteJump(humanoid)
                end
                
                player.CharacterAdded:Connect(function(newCharacter)
                    local newHumanoid = newCharacter:WaitForChild("Humanoid")
                    if jumpConnection then jumpConnection:Disconnect() end
                    jumpConnection = setupInfiniteJump(newHumanoid)
                end)
            else
                if jumpConnection then
                    jumpConnection:Disconnect()
                    jumpConnection = nil
                end
            end
        end
    }, "infjump")

    miscleft:Toggle({
        Name = "Noclip",
        Default = noclip,
        Callback = function(t)
            noclip = t
    
            if noclipconnect then
                noclipconnect:Disconnect()
                noclipconnect = nil
            end
    
            if noclip then
                for _, child in pairs(character:GetDescendants()) do
                    if child:IsA("BasePart") then
                        child.CanCollide = false
                    end
                end
    
                noclipconnect = character.DescendantAdded:Connect(function(part)
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end)
            else
                for _, child in pairs(character:GetDescendants()) do
                    if child:IsA("BasePart") then
                        child.CanCollide = true
                    end
                end
            end
        end
    }, "NoClip")

    -- misc:Toggle({
    --     Name = "ESP Areas",
    --     Default = false,
    --     Save = true,
    --     Flag = "ESPAreas",
    --     Callback = function(state)
    --         areaesp = state
    --         local player = game.Players.LocalPlayer
    --         local camera = workspace.CurrentCamera
    
    --         if areaesp then
    --             local ESP = Instance.new("ScreenGui")
    --             ESP.Name = "Area ESP"
    --             ESP.Parent = player:WaitForChild("PlayerGui")
    
    --             for _, island in ipairs(islandLocations) do
    --                 local textLabel = Instance.new("TextLabel")
    --                 textLabel.Size = UDim2.new(0, 70, 0, 30)
    --                 textLabel.BackgroundTransparency = 1
    --                 textLabel.TextColor3 = Color3.new(1, 1, 1)
    --                 textLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
    --                 textLabel.TextStrokeTransparency = 0
    --                 textLabel.Text = island[1]
    --                 textLabel.TextScaled = true
    --                 textLabel.Font = Enum.Font.GothamBold
    --                 textLabel.Parent = ESP
    
    --                 local distanceLabel = Instance.new("TextLabel")
    --                 distanceLabel.Size = UDim2.new(0, 70, 0, 20)
    --                 distanceLabel.BackgroundTransparency = 1
    --                 distanceLabel.TextColor3 = Color3.new(1, 1, 1)
    --                 distanceLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
    --                 distanceLabel.TextStrokeTransparency = 0
    --                 distanceLabel.TextScaled = true
    --                 distanceLabel.Font = Enum.Font.GothamBold
    --                 distanceLabel.Position = UDim2.new(0, 0, 1, 0) 
    --                 distanceLabel.Parent = ESP
    
    --                 task.spawn(function()
    --                     while areaesp do
    --                         local screenPosition, onScreen = camera:WorldToScreenPoint(island[2].Position)
    --                         textLabel.Position = UDim2.new(0, screenPosition.X - textLabel.Size.X.Offset / 2, 0, screenPosition.Y)
    --                         distanceLabel.Position = UDim2.new(0, screenPosition.X - distanceLabel.Size.X.Offset / 2, 0, screenPosition.Y + 30)
    
    --                         local distance = (island[2].Position - player.Character.HumanoidRootPart.Position).magnitude
    --                         distanceLabel.Text = string.format("[%.2f]", distance)
    
    --                         textLabel.Visible = onScreen
    --                         distanceLabel.Visible = onScreen
    --                         task.wait(.1)
    --                     end
    --                     textLabel:Destroy()
    --                     distanceLabel:Destroy()
    --                 end)
    
    --                 textLabel.AncestryChanged:Connect(function(_, parent)
    --                     if not parent then
    --                         textLabel:Destroy()
    --                         distanceLabel:Destroy()
    --                     end
    --                 end)
    --             end
    --         else
    --             local existingESP = player.PlayerGui:FindFirstChild("Area ESP")
    --             if existingESP then
    --                 existingESP:Destroy()
    --             end
    --         end
    --     end
    -- })

    MacLib:SetFolder("NorthHubSBOR")
    tabs.Settings:InsertConfigSection("Left")

    Window.onUnloaded(function()
        print("Unloaded!")
    end)

    tabs.Main:Select()
    MacLib:LoadAutoLoadConfig()
    task.spawn(function()
        local autohidetimer = os.clock() + 120
        local success = false
        if AutoHide then task.wait()

            UserInputService.InputBegan:Connect(function(input, gameProcessed)
                if not gameProcessed and input.KeyCode == Enum.KeyCode.RightControl then
                    macUI.Enabled = true
                end
            end)
            
            while os.clock() < autohidetimer do task.wait()
                while macUI and macUI.Enabled do
                    if togglemacUI() then
                        success = true
                        break
                    end
                    task.wait(.1)
                end
                if success then
                    print("auto hide successful")
                    break
                end
            end
        end
    end)
end
